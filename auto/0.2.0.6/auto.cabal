-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:128b90c6829d9af5fa20983f902bcb40
    SHA1:58751de9453415378f7125ab50b6d5d297d39158
    SHA256:11da204f31dd8110fee7bbd221baf29325cc716d0a4bec83bb5e8a6127fc16cc
    SHA512:96802c4dd07a24c3788d0ef5c6515fcf2450e3b5f78ba24eed05033eca3068d000edea15c2a97c9364b1f31c2bfa7b27aff4a4a457267e9f2e1c9010525ab3b6
    Skein512_512:35a6745c6d4dc95363e8b95c64d39b6e1dc7d80a7163b8fbbfff920fc869bec60fc73ec2b97b1dd3460b23cfd8c12bec9835fdf0ca05a974d0b02615522a070e

x-package-locations:
    https://hackage.haskell.org/package/auto-0.2.0.6/auto-0.2.0.6.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/auto-0.2.0.6.tar.gz

x-package-size: 105011
-- END Added by all-cabal-hashes-tool

name:                auto
version:             0.2.0.6
synopsis:            Denotative, locally stateful programming DSL & platform
description:         (Up to date documentation is maintained at
                     <https://mstksg.github.com/auto>)
                     .
                     Read the README first!
                     <https://github.com/mstksg/auto/blob/master/README.md>
                     , for motivating examples, and concrete explanations of
                     things described here.
                     .
                     /auto/ is a Haskell DSL and platform providing
                     declarative, compositional, denotative semantics for
                     discrete-step, locally stateful, interactive programs,
                     games, and automations, with implicitly derived
                     serialization.  It is suited for any domain where either
                     the input or the output can be described as a stream of
                     values: a stream of input events, output views, etc.
                     .
                     /auto/ works by providing a type that encapsulates
                     "value stream transformers", or locally stateful
                     functions; by specifying your program as a (potentially
                     cyclic) graph of relationships between value streams, you
                     create a way of "declaring" a system based simply on
                     static relationships between quantities.
                     .
                     Instead of a "state monad" type solution, where all
                     functions have access to a global state, /auto/ works by
                     specifying relationships which each exist independently
                     and on their own, without any global state.
                     .
                     A more fuller exposition is in the `README.md`, in this
                     project directory and also online at
                     <https://github.com/mstksg/auto/blob/master/README.md>;
                     you can get started by reading the tutorial, which is
                     also in this project directory in the `tutorial`
                     directory, and also incidentally online at
                     <https://github.com/mstksg/auto/blob/master/tutorial/tutorial.md>.
                     Also, check out the
                     <https://github.com/mstksg/auto-examples auto-examples>
                     repository on github for plenty of real-world and toy
                     examples to learn from!
                     .
                     Support available on freenode's #haskell-auto,
                     #haskell-game, and also on the github issue
                     tracker for the source repository.
                     .
                     Import "Control.Auto" to begin!

license:             MIT
license-file:        LICENSE
author:              Justin Le
maintainer:          justin@jle.im
copyright:           (c) Justin Le 2015
category:            Control
homepage:            https://github.com/mstksg/auto
bug-reports:         https://github.com/mstksg/issues
build-type:          Simple
extra-source-files:  README.md
                     CHANGELOG.md
                     tutorial/tutorial.md
                     .gitignore
cabal-version:       >=1.10

source-repository head
  type:              git
  location:          git://github.com/mstksg/auto.git

library
  exposed-modules:     Control.Auto
                     , Control.Auto.Blip
                     , Control.Auto.Blip.Internal
                     , Control.Auto.Collection
                     , Control.Auto.Core
                     , Control.Auto.Effects
                     , Control.Auto.Generate
                     , Control.Auto.Interval
                     , Control.Auto.Process
                     , Control.Auto.Process.Random
                     , Control.Auto.Run
                     , Control.Auto.Serialize
                     , Control.Auto.Switch
                     , Control.Auto.Time
  -- other-modules:
  -- other-extensions:
  build-depends:       base         >= 4.6      && < 4.9
                     , MonadRandom  >= 0.3.0.1  && < 0.4
                     , bytestring   >= 0.10.4.0 && < 0.11
                     , cereal       >= 0.4.1.1  && < 0.5
                     , containers   >= 0.5.5.1  && < 0.6
                     , deepseq      >= 1.3.0.2  && < 2.0
                     , profunctors  >= 4.3      && < 5.0
                     , random       >= 1.1      && < 2.0
                     , semigroups   >= 0.16     && < 0.17
                     , transformers >= 0.4.2.0  && < 0.5
  hs-source-dirs:      src
  default-language:    Haskell2010
  ghc-options:         -Wall
