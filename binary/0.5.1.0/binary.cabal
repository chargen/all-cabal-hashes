-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:c61d77323255f23e413e84d4bcbd853a
    SHA1:d88e4d9ea163f25674f6a2a6217d5cb6541cd3fb
    SHA256:2ad477b47e9158d61517689f5f0c7b0240ff891059418d6758879020800351a3
    SHA512:588766896b6c2c55ebdc449aee3e42b3140b43740e71f4057e368dda4ac8b5a0f527d5b446fd82b1775606361dbd25efaf418bc0aca18da97b148ce421665336
    Skein512_512:f6671f65905831f4889a91e55ed5a0e370714e6c9086ea15011d3aa5ee825cf53a6a7f4d736f9bc4c6a9aca73c21282154b1f394716d416221ae6c6c26350888

x-package-locations:
    https://hackage.haskell.org/package/binary-0.5.1.0/binary-0.5.1.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/binary-0.5.1.0.tar.gz

x-package-size: 20205
-- END Added by all-cabal-hashes-tool

name:            binary
version:         0.5.1.0
x-revision: 1
license:         BSD3
license-file:    LICENSE
author:          Lennart Kolmodin <kolmodin@gmail.com>
maintainer:      Lennart Kolmodin, Don Stewart <dons@galois.com>
homepage:        http://code.haskell.org/binary/
description:     Efficient, pure binary serialisation using lazy ByteStrings.
                 Haskell values may be encoded to and from binary formats, 
                 written to disk as binary, or sent over the network.
                 Serialisation speeds of over 1 G\/sec have been observed,
                 so this library should be suitable for high performance
                 scenarios.
synopsis:        Binary serialisation for Haskell values using lazy ByteStrings
category:        Data, Parsing
stability:       provisional
build-type:      Simple
cabal-version:   >= 1.2
tested-with:     GHC ==6.4.2, GHC ==6.6.1, GHC ==6.8.0, GHC ==6.10.1
extra-source-files: README index.html

flag bytestring-in-base
flag split-base
flag applicative-in-base

library
  if flag(bytestring-in-base)
    -- bytestring was in base-2.0 and 2.1.1
    build-depends: base >= 2.0 && < 2.2
    cpp-options: -DBYTESTRING_IN_BASE
  else
    -- in base 1.0 and 3.0 bytestring is a separate package
    build-depends: base < 2.0 || >= 3, bytestring >= 0.9

  if flag(split-base)
    build-depends:   base >= 3.0 && < 4.7, containers, array
  else
    build-depends:   base < 3.0

  if flag(applicative-in-base)
    build-depends: base >= 2.0
    cpp-options: -DAPPLICATIVE_IN_BASE
  else
    build-depends: base < 2.0
  hs-source-dirs:  src

  exposed-modules: Data.Binary,
                   Data.Binary.Put,
                   Data.Binary.Get,
                   Data.Binary.Builder
                   Data.Binary.Builder.Internal

  other-modules:   Data.Binary.Builder.Base

  extensions:      CPP,
                   FlexibleContexts

  ghc-options:     -O2 -Wall -fliberate-case-threshold=1000

--  if impl(ghc < 6.5)
--    ghc-options:   -fallow-undecidable-instances
