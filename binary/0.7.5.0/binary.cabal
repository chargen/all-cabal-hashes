-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:6f68557ef4756c58bdb2a06f3dfd3904
    SHA1:0bf1e4e51c0e37e48ba4c388defd7a43093d399b
    SHA256:4709c5aa7cc99cb4a465a68de1648968208d0c60c368e2fece476d977530ef19
    SHA512:232e7c3da1c0055f3e9f211a86e81c76bc44ab1b70cabd23c93634dbaa42eed8bd9314fbedc16b9703d3ca92b0bbf232e6c30bb1384687dad0e6e85c9abb8947
    Skein512_512:ebe4f7d307c2a989b002aff504d1744127837e38fa836715ce3cce3a9c9b5161e24094e9ad263bd9dcee900e969834e35806255489b0e9e6a13ce61f2b621fc1

x-package-locations:
    https://hackage.haskell.org/package/binary-0.7.5.0/binary-0.7.5.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/binary-0.7.5.0.tar.gz

x-package-size: 45764
-- END Added by all-cabal-hashes-tool

name:            binary
version:         0.7.5.0
license:         BSD3
license-file:    LICENSE
author:          Lennart Kolmodin <kolmodin@gmail.com>
maintainer:      Lennart Kolmodin, Don Stewart <dons00@gmail.com>
homepage:        https://github.com/kolmodin/binary
description:     Efficient, pure binary serialisation using lazy ByteStrings.
                 Haskell values may be encoded to and from binary formats,
                 written to disk as binary, or sent over the network.
                 The format used can be automatically generated, or
                 you can choose to implement a custom format if needed.
                 Serialisation speeds of over 1 G\/sec have been observed,
                 so this library should be suitable for high performance
                 scenarios.
synopsis:        Binary serialisation for Haskell values using lazy ByteStrings
category:        Data, Parsing
stability:       provisional
build-type:      Simple
cabal-version:   >= 1.8
tested-with:     GHC == 7.4.2, GHC == 7.6.3, GHC == 7.8.2, GHC == 7.10.1
extra-source-files:
  README.md docs/hcar/binary-Lb.tex tools/derive/*.hs

-- from the benchmark 'bench'
extra-source-files:
  benchmarks/CBenchmark.h

source-repository head
  type: git
  location: git://github.com/kolmodin/binary.git

library
  build-depends:   base >= 3.0 && < 5, bytestring >= 0.9, containers, array
  hs-source-dirs:  src
  exposed-modules: Data.Binary,
                   Data.Binary.Put,
                   Data.Binary.Get,
                   Data.Binary.Get.Internal,
                   Data.Binary.Builder,
                   Data.Binary.Builder.Internal

  other-modules:   Data.Binary.Builder.Base,
                   Data.Binary.Class

  if impl(ghc >= 7.2.1)
    cpp-options: -DGENERICS
    other-modules: Data.Binary.Generic
    if impl(ghc <= 7.6)
      -- prior to ghc-7.4 generics lived in ghc-prim
      build-depends: ghc-prim

  ghc-options:     -O2 -Wall -fliberate-case-threshold=1000

-- Due to circular dependency, we cannot make any of the test-suites or
-- benchmark depend on the binary library. Instead, for each test-suite and
-- benchmark, we include the source directory of binary and build-depend on all
-- the dependencies binary has.

test-suite qc
  type:  exitcode-stdio-1.0
  hs-source-dirs: src tests
  main-is: QC.hs
  other-modules:
    Action
    Arbitrary
  build-depends:
    base >= 3.0 && < 5,
    bytestring >= 0.9,
    random>=1.0.1.0,
    test-framework,
    test-framework-quickcheck2 >= 0.3,
    QuickCheck>=2.8

  -- build dependencies from using binary source rather than depending on the library
  build-depends: array, containers
  ghc-options: -Wall -O2 -threaded

test-suite read-write-file
  type:  exitcode-stdio-1.0
  hs-source-dirs: src tests
  main-is: File.hs
  build-depends:
    base >= 3.0 && < 5,
    bytestring >= 0.9,
    Cabal,
    directory,
    filepath,
    HUnit

  -- build dependencies from using binary source rather than depending on the library
  build-depends: array, containers
  ghc-options: -Wall

benchmark bench
  type: exitcode-stdio-1.0
  hs-source-dirs: src benchmarks
  main-is: Benchmark.hs
  other-modules: MemBench
  build-depends:
    base >= 3.0 && < 5,
    bytestring
  -- build dependencies from using binary source rather than depending on the library
  build-depends: array, containers
  c-sources: benchmarks/CBenchmark.c
  include-dirs: benchmarks
  ghc-options: -O2

benchmark get
  type: exitcode-stdio-1.0
  hs-source-dirs: src benchmarks
  main-is: Get.hs
  build-depends:
    attoparsec,
    base >= 3.0 && < 5,
    bytestring,
    cereal,
    criterion == 1.*,
    deepseq,
    mtl
  -- build dependencies from using binary source rather than depending on the library
  build-depends: array, containers
  ghc-options: -O2

benchmark builder
  type: exitcode-stdio-1.0
  hs-source-dirs: src benchmarks
  main-is: Builder.hs
  build-depends:
    base >= 3.0 && < 5,
    bytestring,
    criterion == 1.*,
    deepseq,
    mtl
  -- build dependencies from using binary source rather than depending on the library
  build-depends: array, containers
  ghc-options: -O2
