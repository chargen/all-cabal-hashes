-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:a9c0eb0ee4c34f11a81ccf9be62877a2
    SHA1:a8c9bd44c32a7ecd7be8c2f889d1f5f1500ac954
    SHA256:200d81da3348a1053c0f1ab5e5392dc51e9d48e26fcae609b518f9f67f22c4ef
    SHA512:261cbda6e246c0290baa1d8aa9c54c892828ae80290fe3e12d424300bc1e4d84fd03ad5ec715b6e4c5741379abf6675d5c4e18de41de49397dc8b38e940b211c
    Skein512_512:f0f463efd76296114df8013364ff8587349bb9c8ea4b9246af73807ee5c84d23c43f6850bd5c85698c666c23e95329a2683ee9e89bf8f4e5f1d74634e213d07c

x-package-locations:
    https://hackage.haskell.org/package/binary-0.4.2/binary-0.4.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/binary-0.4.2.tar.gz

x-package-size: 39656
-- END Added by all-cabal-hashes-tool

name:            binary
version:         0.4.2
x-revision: 1
license:         BSD3
license-file:    LICENSE
author:          Lennart Kolmodin <kolmodin@dtek.chalmers.se>
maintainer:      Lennart Kolmodin, Don Stewart <dons@galois.com>
homepage:        http://code.haskell.org/binary/
description:     Efficient, pure binary serialisation using lazy ByteStrings.
                 Haskell values may be encoded to and from binary formats, 
                 written to disk as binary, or sent over the network.
                 Serialisation speeds of over 1 G\/sec have been observed,
                 so this library should be suitable for high performance
                 scenarios.
synopsis:        Binary serialisation for Haskell values using lazy ByteStrings
category:        Data, Parsing
stability:       provisional
build-type:      Simple
cabal-version:   >= 1.2
tested-with:     GHC ==6.4.2, GHC ==6.6.1, GHC ==6.8.0
extra-source-files: README index.html

flag bytestring-in-base
flag split-base
flag applicative-in-base

library
  if flag(bytestring-in-base)
    -- bytestring was in base-2.0 and 2.1.1
    build-depends: base >= 2.0 && < 2.2
    cpp-options: -DBYTESTRING_IN_BASE
  else
    -- in base 1.0 and 3.0 bytestring is a separate package
    build-depends: base < 2.0 || >= 3, bytestring >= 0.9

  if flag(split-base)
    build-depends:   base >= 3.0 && < 4.7, containers, array
  else
    build-depends:   base < 3.0

  if flag(applicative-in-base)
    build-depends: base >= 2.0
    cpp-options: -DAPPLICATIVE_IN_BASE
  else
    build-depends: base < 2.0

  exposed-modules: Data.Binary,
                   Data.Binary.Put,
                   Data.Binary.Get,
                   Data.Binary.Builder
  extensions:      CPP, FlexibleContexts
  hs-source-dirs:  src
  ghc-options:     -O2 -Wall -fliberate-case-threshold=1000
  if impl(ghc < 6.5)
    cpp-options:   -fallow-undecidable-instances
