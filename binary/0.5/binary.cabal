-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:3155848b750d2a8fd208383223a48883
    SHA1:fa2440b4957a3767080c4fd9cf89d3bddf30b318
    SHA256:f5950ed11de88028dc5eeb2584ba1a86c39a424a5432204343b94404339e5411
    SHA512:870b3baf2881d12b403570f1699ae1bb14d715827d6f903259a03bb25a7a8fcc61fc6937ef3cc517538c089cc38cb585d5ca612defe98501df95cf8bf455d39c
    Skein512_512:99c8f924d3347857eb903e73ddf536fc1b2b8eb0dfcd1e5b7e7eb2a3db023fb9ce91ed2e0f2f86c1e81bc3b6c39dad2130ad0644d3d22245143d1c90e90bc0f6

package-locations:
    https://hackage.haskell.org/package/binary-0.5/binary-0.5.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/binary-0.5.tar.gz

package-size: 41309
-- END Added by all-cabal-hashes-tool

name:            binary
version:         0.5
x-revision: 1
license:         BSD3
license-file:    LICENSE
author:          Lennart Kolmodin <kolmodin@dtek.chalmers.se>
maintainer:      Lennart Kolmodin, Don Stewart <dons@galois.com>
homepage:        http://code.haskell.org/binary/
description:     Efficient, pure binary serialisation using lazy ByteStrings.
                 Haskell values may be encoded to and from binary formats, 
                 written to disk as binary, or sent over the network.
                 Serialisation speeds of over 1 G\/sec have been observed,
                 so this library should be suitable for high performance
                 scenarios.
synopsis:        Binary serialisation for Haskell values using lazy ByteStrings
category:        Data, Parsing
stability:       provisional
build-type:      Simple
cabal-version:   >= 1.2
tested-with:     GHC ==6.4.2, GHC ==6.6.1, GHC ==6.8.0, GHC ==6.10.1
extra-source-files: README index.html

flag bytestring-in-base
flag split-base
flag applicative-in-base

library
  if flag(bytestring-in-base)
    -- bytestring was in base-2.0 and 2.1.1
    build-depends: base >= 2.0 && < 2.2
    cpp-options: -DBYTESTRING_IN_BASE
  else
    -- in base 1.0 and 3.0 bytestring is a separate package
    build-depends: base < 2.0 || >= 3, bytestring >= 0.9

  if flag(split-base)
    build-depends:   base >= 3.0 && < 4.7, containers, array
  else
    build-depends:   base < 3.0

  if flag(applicative-in-base)
    build-depends: base >= 2.0
    cpp-options: -DAPPLICATIVE_IN_BASE
  else
    build-depends: base < 2.0
  hs-source-dirs:  src

  exposed-modules: Data.Binary,
                   Data.Binary.Put,
                   Data.Binary.Get,
                   Data.Binary.Builder

  extensions:      CPP,
                   FlexibleContexts

  ghc-options:     -O2 -Wall -fliberate-case-threshold=1000

--  if impl(ghc < 6.5)
--    ghc-options:   -fallow-undecidable-instances
