name:          usb-safe
version:       0.5.1.1
cabal-version: >=1.6
build-type:    Custom
license:       BSD3
license-file:  LICENSE
copyright:     2010 Bas van Dijk
author:        Bas van Dijk
maintainer:    Bas van Dijk <v.dijk.bas@gmail.com>
stability:     experimental
category:      System, Monadic Regions
synopsis:      Type-safe communication with USB devices.
description:
  The usb library provides a standard Haskell abstraction layer over
  bindings-libusb providing: abstract types instead of Ptrs, automatic
  marshalling and unmarshalling, automatic garbage collection,
  exceptions instead of integer return codes, etc..

  .

  While all that is very nice there are still some things that you can
  do wrong. For example doing I/O with a closed device or reading from
  or writing to an endpoint which doesn't belong to the claimed
  interface. Or reading from an Out endpoint or writing to an In
  endpoint.

  .

  usb-safe provides the following guarantees:

  .

  * You can't reference handles to devices that are closed. In other words: no
     I/O with closed handles is possible.

  .

  * The programmer specifies the region in which devices should remain open. On
    exit from the region the opened devices will be closed automatically.

  .

  * You can't reference handles to configurations that have not been set.

  .

  * You can't reference handles to interfaces that have not been claimed.

  .

  * Just like with devices, the programmer can specify the region in
    which interfaces should remain claimed. On exit from the region
    the claimed interfaces will be released automatically.

  .

  * You can't reference handles to alternates that have not been set.

  .

  * You can't reference endpoints that don't belong to a setted alternate.

  .

  * You can't read from an endpoint with an Out transfer direction.

  .

  * You can't write to an endpoint with an In transfer direction.

  .

  * You can't read from or write to endpoints with the unsupported transfer
    types Control and Isochronous. Only I/O with endpoints with the Bulk and
    Interrupt transfer types is allowed.

  .

  The primary technique used in usb-safe is called \"Lightweight monadic
  regions\" which was invented by Oleg Kiselyov and Chung-chieh Shan.
  See:

  .

  <http://okmij.org/ftp/Haskell/regions.html#light-weight>

  .

  This technique is implemented in the @regions@ package which is
  re-exported from @usb-safe@.

  .

  See the @usb-safe-examples@ package for examples how to use this library:

  .

  @darcs get@ <http://code.haskell.org/~basvandijk/code/usb-safe-examples>

source-repository head
  Type:     darcs
  Location: http://code.haskell.org/~basvandijk/code/usb-safe

Library
  GHC-Options: -Wall -fno-warn-orphans
  build-depends: base                      >= 4       && < 4.3
               , base-unicode-symbols      >= 0.1.1   && < 0.2
               , usb                       == 0.3.*
               , bytestring                == 0.9.*
               , regions                   == 0.4.*
               , transformers              >= 0.1.4   && < 0.2
               , MonadCatchIO-transformers == 0.0.2.0 && < 0.1
  exposed-modules: System.USB.Safe


package-hashes:
    MD5:c48c79c206ae1a348db1ea79d780e3bc
    SHA1:21478ddf86d6fbaf2dffa39d4cb0bf04f9d5a40d
    SHA256:8f954b169e535fd8228ad466a3f4220ac3efff7946449cf2046b7bbe4b0dbc6a
    SHA512:d4bad41c260b40856c0e738ad01853bd5db6304a1141bf16ef431e1ccd9e97eededa54caf7cdaa6802b9a7922701a021eb7a3df2f482b0ad3797f3c43621428d
    Skein512_512:72b4855db4b0a6a6a0580d7a9e83da41ccb9be5bb622c9350c6dfeb7bd3357757dde645f331a54216d3a50ae4d4f22dfe830886ff1dbffcfd5aa5e1886c9e1cf

package-locations:
    https://hackage.haskell.org/package/usb-safe-0.5.1.1/usb-safe-0.5.1.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/usb-safe-0.5.1.1.tar.gz

