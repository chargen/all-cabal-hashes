Name:                   TernaryTrees
Version:                0.1.1.1
Category:               Data Structures
Synopsis:               Efficient pure ternary tree Sets and Maps
Description:            Ternary trees are an efficient structure often used for storing
			strings for fast lookups. This package implements a generic tree
			for storing lists of Ord instances, and a specialised String
			implementation which is about 30% faster than the generic version.
			.
			An example program is provided what shows how to use the package
			as a dictionary program for spell checking, and how it can be 
			used to serialise data with Don Stewart's Data.Binary package.
			.
			From my testing, using the \/usr\/share\/dict\/words file on my system
			(over 230,000 words), inserting all words, checking they all exist
			in the tree, writing them to a binary file, reading them back in
			and checking the read in result is the same as the original takes
			slightly over 3 seconds using the StringSet. The written file is 
			also slightly smaller than the input (by over 40% in some cases).
			.
			New in this version:
			.
			* Refactored a lot of the datatypes for the Sets (much of their code is
			  exactly the same now)
			.
			* Made the get implementation shorter and clearer (thanks to olsner on IRC)
			.
			* There is now a darcs repo: <http://random.axman6.com/darcs/TernaryTrees/>
			.
			&#169; 2009 by Alex Mason (<http://random.axman6.com/blog/>). BSD3 license.
			
License:                BSD3
License-file:           LICENSE.txt
Author:                 Alex Mason
Maintainer:             Alex Mason (irc: Axman6) <axman6@gmail.com>
build-type:             Simple
Cabal-Version:          >= 1.2
Extra-Source-Files:
        Data/Map/TernaryMap.hs
        Data/Set/TernarySet.hs
        Data/Set/StringSet.hs

Library
        Build-Depends:
                base >= 4.0.0.0, base < 5.0.0.0, binary >= 0.5.0.0
        Exposed-modules:
                Data.Set.TernarySet, Data.Set.StringSet, Data.Map.TernaryMap

Executable tdict
  Main-Is:        Main.hs
  Build-Depends:  base

package-hashes:
    MD5:51b804894e2bbb6c3d98b560990fa0a3
    SHA1:7852a09473ef4729e16c42ec811eff6caa73f30c
    SHA256:2d68c33e68405a35a12dd2c3ef6a8d6ae29ae23ffac78c4acffc5d79c07e41c3
    SHA512:67f29272239b35bad62f4e787414dbc437df6543a11cca5327042decee593ad87ff8a9517ea9777618249c58e68fa59c5d508170ba0d125d5c5b8d9749d53e19
    Skein512_512:7280c2e7baf701af11c0de9fd760c8779d269b3b96f8b8223f6544f32374337dc11f6fad172fb5f29deccc5dbb3fd3b1be5586b84ff8d5543d77967a3ddc8c6a

package-locations:
    https://hackage.haskell.org/package/TernaryTrees-0.1.1.1/TernaryTrees-0.1.1.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/TernaryTrees-0.1.1.1.tar.gz

