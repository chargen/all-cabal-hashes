Name:                   TernaryTrees
Version:                0.1.1.0
Category:               Data Structures
Synopsis:               Efficient pure ternary tree Sets and Maps
Description:            Ternary trees are an efficient structure often used for storing
			strings for fast lookups. This package implements a generic tree
			for storing lists of Ord instances, and a specialised String
			implementation which is about 30% faster than the generic version.
			.
			An example program is provided what shows how to use the package
			as a dictionary program for spell checking, and how it can be 
			used to serialise data with Don Stewart's Data.Binary package.
			.
			From my testing, using the \/usr\/share\/dict\/words file on my system
			(over 230,000 words), inserting all words, checking they all exist
			in the tree, writing them to a binary file, reading them back in
			and checking the read in result is the same as the original takes
			slightly over 3 seconds using the StringSet. The written file is 
			also slightly smaller than the input (by over 40% in some cases).
			.
			New in this version:
			.
			* Refactored a lot of the datatypes for the Sets (much of their code is
			  exactly the same now)
			.
			* Made the get implementation shorter and clearer (thanks to olsner on IRC)
			.
			* There is now a darcs repo: <http://random.axman6.com/darcs/TernaryTrees/>
			.
			&#169; 2009 by Alex Mason (<http://random.axman6.com/blog/>). BSD3 license.
			
License:                BSD3
License-file:           LICENSE.txt
Author:                 Alex Mason
Maintainer:             Alex Mason (irc: Axman6) <axman6@gmail.com>
build-type:             Simple
Cabal-Version:          >= 1.2
Extra-Source-Files:
        Data/Map/TernaryMap.hs
        Data/Set/TernarySet.hs
        Data/Set/StringSet.hs

Library
        Build-Depends:
                base >= 4.0.0.0, base < 5.0.0.0, binary >= 0.5.0.0
        Exposed-modules:
                Data.Set.TernarySet, Data.Set.StringSet, Data.Map.TernaryMap

Executable tdict
  Main-Is:        Main.hs
  Build-Depends:  base

package-hashes:
    MD5:3af45c7d234415ec2bdee7e595843201
    SHA1:f115ad3423f0afd74af8cb0166aff2f5061ab811
    SHA256:1dc689ee8fb51b82912920eabbb6311ffe732104fa644e0a4ca600e85b8f6a97
    SHA512:0f45f5a420a4083c039e1a826cd295a10ca7dd8d6c5c8b6f00aa1ab6ad84e23bf5aab1eac0e4bc68ce114acb6b1a4489b8dd58ff3d25079f2e8b2e2ca466eef8
    Skein512_512:4e1cb602d650fae2aa59bd8d43aaeeeb44a790ef77c3874301066877e5f79e1f42c15f9c9bff002a502db3712782dd3d1937c3d9a852b962bf1d448969413487

package-locations:
    https://hackage.haskell.org/package/TernaryTrees-0.1.1.0/TernaryTrees-0.1.1.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/TernaryTrees-0.1.1.0.tar.gz

