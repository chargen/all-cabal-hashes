-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:a2ec3f67b44fb8707e38a8072378f2ea
    SHA1:e19c48d200f6b60ec0a525030b72c8f19e077fa6
    SHA256:557ed13514e8e9344b94cd5be5df3d1a98e9de882ecd4fa48a11aeeb16c66ac2
    SHA512:c27f6c055f19f05b5f37ed5da50d6fd3474b564dff3d84b86207fe0bd17247b8713a790727ee5d9b2a3e8d28c1e3068a5e447bcf582dad08573fc595f7605423
    Skein512_512:64dd109814579229aba36fcbee0c7ec5f1d654f91d17601bd077c51148b63834cf81f3ffd2920201d1565349734896f4f33405fa70df2724f255b8a57ec3659b

x-package-locations:
    https://hackage.haskell.org/package/TernaryTrees-0.1.3.3/TernaryTrees-0.1.3.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/TernaryTrees-0.1.3.3.tar.gz

x-package-size: 6010
-- END Added by all-cabal-hashes-tool

Name:                   TernaryTrees
Version:                0.1.3.3
Category:               Data Structures
Synopsis:               Efficient pure ternary tree Sets and Maps
Description:            Ternary trees are an efficient structure often used for storing
                        strings for fast lookups. This package implements a generic tree
                        for storing lists of Ord instances, and a specialised String
                        implementation which is about 30% faster than the generic version.
                        .
                        An example program is provided what shows how to use the package
                        as a dictionary program for spell checking, and how it can be 
                        used to serialise data with Don Stewart's Data.Binary package.
                        .
                        From my testing, using the \/usr\/share\/dict\/words file on my system
                        (over 230,000 words), inserting all words, checking they all exist
                        in the tree, writing them to a binary file, reading them back in
                        and checking the read in result is the same as the original takes
                        slightly over 3 seconds using the StringSet. The written file is 
                        also slightly smaller than the input (by over 40% in some cases).
                        .
                        New in this version:
                        .
                        * (Added the empty function to TernaryMap's export list)
                        .
                        * Moved datatype definitions into .Internal modules so that
                          testing can be performed, without needing to export their definitions in the
                          main modules.
                        .
                        * Checked a lot of the source with HLint 1.6 and made some minor changes based on that ((mostly redundant brackets)).
                        .
                        &#169; 2009 by Alex Mason (<http://random.axman6.com/blog/>). BSD3 license.
                        
License:                BSD3
License-file:           LICENSE.txt
Author:                 Alex Mason
Maintainer:             Alex Mason (irc: Axman6) <axman6@gmail.com>
build-type:             Simple
Cabal-Version:          >= 1.2
Extra-Source-Files:
        Data/Map/TernaryMap.hs
        Data/Set/TernarySet.hs
        Data/Set/StringSet.hs
        Data/Set/StringSet/Internal.hs
        Data/Set/TernarySet/Internal.hs
        Data/Map/TernaryMap/Internal.hs

Library
        Build-Depends:
                base >= 4.0.0.0, base < 5.0.0.0, binary >= 0.4.4
        Exposed-modules:
                Data.Set.TernarySet,
                Data.Set.StringSet,
                Data.Map.TernaryMap,
                Data.Set.TernarySet.Internal,
                Data.Set.StringSet.Internal,
                Data.Map.TernaryMap.Internal

Executable tdict
  Main-Is:        Main.hs
  Build-Depends:  base