-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:86bcf1592bb72ba7a025fe793892f2d0
    SHA1:2fb476369566848f9ab65b058a3613b8b66f7f09
    SHA256:2c9e57f19192ea52bfd07eed4217646b0657f84e39e5d9b2e55c6a8e2fbfd28e
    SHA512:037378c203c3e34f42885d01ef31b1f0b45c43f7fb57515814759812950fa22d2e8eb052a5854c44a564f5666eed20650c95ca0a565b297bd8851a7557043776
    Skein512_512:ea35de275cecade0c40c9352af1ffd86e97bf717b23d2f3ac94a12507d3e5afbd23b744201f4627981c08e9318b134b1a58952ac99831a4a8b5f1439cd5bef27

x-package-locations:
    https://hackage.haskell.org/package/TernaryTrees-0.1.3.2/TernaryTrees-0.1.3.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/TernaryTrees-0.1.3.2.tar.gz

x-package-size: 6008
-- END Added by all-cabal-hashes-tool

Name:                   TernaryTrees
Version:                0.1.3.2
Category:               Data Structures
Synopsis:               Efficient pure ternary tree Sets and Maps
Description:            Ternary trees are an efficient structure often used for storing
                        strings for fast lookups. This package implements a generic tree
                        for storing lists of Ord instances, and a specialised String
                        implementation which is about 30% faster than the generic version.
                        .
                        An example program is provided what shows how to use the package
                        as a dictionary program for spell checking, and how it can be 
                        used to serialise data with Don Stewart's Data.Binary package.
                        .
                        From my testing, using the \/usr\/share\/dict\/words file on my system
                        (over 230,000 words), inserting all words, checking they all exist
                        in the tree, writing them to a binary file, reading them back in
                        and checking the read in result is the same as the original takes
                        slightly over 3 seconds using the StringSet. The written file is 
                        also slightly smaller than the input (by over 40% in some cases).
                        .
                        New in this version:
                        .
                        * (Exported the Internal modules because apparently you need to)
                        .
                        * Moved datatype definitions into .Internal modules so that
                          testing can be performed, without needing to export their definitions in the
                          main modules.
                        .
                        * Checked a lot of the source with HLint 1.6 and made some minor changes based on that ((mostly redundant brackets)).
                        .
                        &#169; 2009 by Alex Mason (<http://random.axman6.com/blog/>). BSD3 license.
                        
License:                BSD3
License-file:           LICENSE.txt
Author:                 Alex Mason
Maintainer:             Alex Mason (irc: Axman6) <axman6@gmail.com>
build-type:             Simple
Cabal-Version:          >= 1.2
Extra-Source-Files:
        Data/Map/TernaryMap.hs
        Data/Set/TernarySet.hs
        Data/Set/StringSet.hs
        Data/Set/StringSet/Internal.hs
        Data/Set/TernarySet/Internal.hs
        Data/Map/TernaryMap/Internal.hs

Library
        Build-Depends:
                base >= 4.0.0.0, base < 5.0.0.0, binary >= 0.4.4
        Exposed-modules:
                Data.Set.TernarySet,
                Data.Set.StringSet,
                Data.Map.TernaryMap,
                Data.Set.TernarySet.Internal,
                Data.Set.StringSet.Internal,
                Data.Map.TernaryMap.Internal

Executable tdict
  Main-Is:        Main.hs
  Build-Depends:  base