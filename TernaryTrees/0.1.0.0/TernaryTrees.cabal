Name:                   TernaryTrees
Version:                0.1.0.0
Category:               Data Structures
Synopsis:               Efficient pure ternary tree Sets and Maps
Description:            Ternary trees are an efficient structure often used for storing
			strings for fast lookups. This package implements a generic tree
			for storing lists of Ord instances, and a specialised String
			implementation which is about 30% faster than the generic version.
			.
			An example program is provided what shows how to use the package
			as a dictionary program for spell checking, and how it can be 
			used to serialise data with Don Stewart's Data.Binary package.
			.
			From my testing, using the \/usr\/share\/dict\/words file on my system
			(over 230,000 words), inserting all words, checking they all exist
			in the tree, writing them to a binary file, reading them back in
			and checking the read in result is the same as the original takes
			slightly over 3 seconds using the StringSet. The written file is 
			also slightly smaller than the input (by over 40% in some cases).
			.
			New in this version:
			.
			* First major interface change since the first release... (less than
			  24 hours ago).
			.
			* Changed many function names to match those in Data.[Map,Set] to
			  provide a more familiar interface.
			.
			* Added a Functor instance for TernaryMap.
			.
			* Added `empty` and `null` functions to all types, and `elems`
			  to TernaryMap.
			.
			&#169; 2009 by Alex Mason (<http://axman6.homeip.net/blog/>). BSD3 license.
			
License:                BSD3
License-file:           LICENSE.txt
Author:                 Alex Mason
Maintainer:             Alex Mason (irc: Axman6) <axman6@gmail.com>
build-type:             Simple
Cabal-Version:          >= 1.2
Extra-Source-Files:
        Data/Map/TernaryMap.hs
        Data/Set/TernarySet.hs
        Data/Set/StringSet.hs

Library
        Build-Depends:
                base >= 4.0.0.0, base < 5.0.0.0, binary >= 0.5.0.0
        Exposed-modules:
                Data.Set.TernarySet, Data.Set.StringSet, Data.Map.TernaryMap

Executable tdict
  Main-Is:        Main.hs
  Build-Depends:  base

package-hashes:
    MD5:a541018dae0b1c441f853c40d4eee79f
    SHA1:e73c640d0bedac0e5bf8f175f7f6b4a2d4c0acaf
    SHA256:b2732af409bb153010b6494f6bf5fee65dae8cb5c9036b0a9daac5ea1245d94e
    SHA512:683aa45c6abb3aea6faefdace37a2e03a4fb618028059382340ed7664b06f5fc3a6a3785ba4c30f3ad7a3657b8b1df4b3545066016cf8077834293df9e229ff9
    Skein512_512:8fab9a9e98f11577fd0201649edc4b2e9094efae909fedbe19f38ed633d4451b12f2f163b0fbba897a5f56152fa72d45838b6979c3dfd2119f4ab8b03010d3fe

package-locations:
    https://hackage.haskell.org/package/TernaryTrees-0.1.0.0/TernaryTrees-0.1.0.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/TernaryTrees-0.1.0.0.tar.gz

