Name:                   TernaryTrees
Version:                0.2.0.2
Category:               Data Structures
Synopsis:               Efficient pure ternary tree Sets and Maps
Description:            Ternary trees are an efficient structure often used for storing
			strings for fast lookups. This package implements a generic tree
			for storing lists of Ord instances, and a specialised String
			implementation which is about 30% faster than the generic version.
			.
			An example program is provided what shows how to use the package
			as a dictionary program for spell checking, and how it can be 
			used to serialise data with Don Stewart's Data.Binary package.
			.
			From my testing, using the \/usr\/share\/dict\/words file on my system
			(over 230,000 words), inserting all words, checking they all exist
			in the tree, writing them to a binary file, reading them back in
			and checking the read in result is the same as the original takes
			slightly over 3 seconds using the StringSet. The written file is 
			also slightly smaller than the input (by over 40% in some cases).
			.
			New in this version:
			.
			* Fixed Other-Modules cabal entry so Internal files were added.
			.
			&#169; 2009 by Alex Mason (<http://random.axman6.com/blog/>). BSD3 license.
			
License:                BSD3
License-file:           LICENSE.txt
Author:                 Alex Mason
Maintainer:             Alex Mason (irc: Axman6) <axman6@gmail.com>
build-type:             Simple
Cabal-Version:          >= 1.2
Extra-Source-Files:
        Data/Map/TernaryMap.hs
        Data/Map/StringMap.hs
        Data/Set/TernarySet.hs
        Data/Set/StringSet.hs
        Data/Map/StringMap/Internal.hs
        Data/Set/StringSet/Internal.hs
        Data/Set/TernarySet/Internal.hs
        Data/Map/TernaryMap/Internal.hs


Library
        Build-Depends:
                base >= 4.0.0.0, base < 5.0.0.0, binary >= 0.5.0.0
        Exposed-modules:
                Data.Set.TernarySet,
                Data.Set.StringSet,
                Data.Map.TernaryMap,
                Data.Map.StringMap
        Other-Modules:
                Data.Map.TernaryMap.Internal,
                Data.Set.TernarySet.Internal,
                Data.Set.StringSet.Internal,
                Data.Map.StringMap.Internal

Executable tdict
  Main-Is:        Main.hs
  Build-Depends:  base

package-hashes:
    MD5:13af5f4613765879c54c3feb980e62bc
    SHA1:e1af328bec3e8ad442fb0f3e6d6ecb23fea278b1
    SHA256:9937a648eeb4c1a1530158361540710f6e31e0056b459eac77da04ca52aca41a
    SHA512:c5a2eda5960376b13bc7e4acc9bb28b558fb91ac9d2097e466dd1ec1f32ad3c5fb5f58ab2a9cbfa91b720780c356b0e3333438516a20ebb5acb09198c8afea05
    Skein512_512:4837eea15581dca6a106b1426a9d2cb9c164a19675c354a487af6f12b3f9c1f81ba48a40d50e097d5250edfecb908e09be6896ef9d8cb737bc8398026658af14

package-locations:
    https://hackage.haskell.org/package/TernaryTrees-0.2.0.2/TernaryTrees-0.2.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/TernaryTrees-0.2.0.2.tar.gz

