Name:                   TernaryTrees
Version:                0.1.2.0
Category:               Data Structures
Synopsis:               Efficient pure ternary tree Sets and Maps
Description:            Ternary trees are an efficient structure often used for storing
			strings for fast lookups. This package implements a generic tree
			for storing lists of Ord instances, and a specialised String
			implementation which is about 30% faster than the generic version.
			.
			An example program is provided what shows how to use the package
			as a dictionary program for spell checking, and how it can be 
			used to serialise data with Don Stewart's Data.Binary package.
			.
			From my testing, using the \/usr\/share\/dict\/words file on my system
			(over 230,000 words), inserting all words, checking they all exist
			in the tree, writing them to a binary file, reading them back in
			and checking the read in result is the same as the original takes
			slightly over 3 seconds using the StringSet. The written file is 
			also slightly smaller than the input (by over 40% in some cases).
			.
			New in this version:
			.
			* Changed TernaryMap to match the Set implementations more.
			.
			* Changed the Data.Binary instance again, hopefully it'll remain more stable from here on.
			.
			* Changed the tdict source to actually do what i said it would, by actually asking the user for input.
			.
			&#169; 2009 by Alex Mason (<http://random.axman6.com/blog/>). BSD3 license.
			
License:                BSD3
License-file:           LICENSE.txt
Author:                 Alex Mason
Maintainer:             Alex Mason (irc: Axman6) <axman6@gmail.com>
build-type:             Simple
Cabal-Version:          >= 1.2
Extra-Source-Files:
        Data/Map/TernaryMap.hs
        Data/Set/TernarySet.hs
        Data/Set/StringSet.hs

Library
        Build-Depends:
                base >= 4.0.0.0, base < 5.0.0.0, binary >= 0.5.0.0
        Exposed-modules:
                Data.Set.TernarySet, Data.Set.StringSet, Data.Map.TernaryMap

Executable tdict
  Main-Is:        Main.hs
  Build-Depends:  base

package-hashes:
    MD5:57eb5a72f113c8e93fa4b4afbd932117
    SHA1:8cae236c23a7a034c7552a52c9220251fa1fe9fe
    SHA256:ef803c2c74f7adc8d063c7a47094e48d6715f392014222d8dd52325ee224229f
    SHA512:bca125d03a5b678eacb5b170e20cf34564c973063e6f4ea3908601b3e2b18a59f355ce9d5e8fdac87808a4ae9f6920628c87a22472ee4c8c377ef96f0e22eaf8
    Skein512_512:1d49b364731dd20ddf76ad07c37b2c858ed3182b560a2fea47a1eee319439bd564c8a4bbe82116d54696a846f9e2f608c5830933bd21c9cb817f5dab9f02e301

package-locations:
    https://hackage.haskell.org/package/TernaryTrees-0.1.2.0/TernaryTrees-0.1.2.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/TernaryTrees-0.1.2.0.tar.gz

package-size: 5227
