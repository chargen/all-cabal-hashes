Name:                   regex-tdfa
Version:                0.97.3
-- 0.97.1: Bug Fix: Use PGroup Nothing when expanding PBound
-- 0.97.2: Bug Fix: Use more complex null view in PStar when mayFirstBeNull, fix (()*)* and ((.?)*)*
-- 0.97.3: Bug Fix: RunMutState.updateWinning was borking the input state (.*)*...?()|. on 123456
Cabal-Version:          >=1.2.3
License:                BSD3
License-File:           LICENSE
Copyright:              Copyright (c) 2007-2009, Christopher Kuklewicz
Author:                 Christopher Kuklewicz
Maintainer:             TextRegexLazy@personal.mightyreason.com
Stability:              Seems to work, but not POSIX yet
Homepage:               http://sourceforge.net/projects/lazy-regex
Package-URL:            http://darcs.haskell.org/packages/regex-unstable/regex-tdfa/
Synopsis:               Accurate POSIX extended regular expression library
Description:            A new all Haskell "tagged" DFA regex engine, inspired by libtre
Category:               Text
Tested-With:            GHC
Build-Type:             Simple

flag base4

library 
  Build-Depends:        regex-base >= 0.80, parsec, mtl, containers, array, bytestring
  if flag(base4)
    Build-Depends:      base >= 4.0, ghc-prim
  else
    Build-Depends:      base < 4.0
  other-modules:        Paths_regex_tdfa
  Exposed-Modules:      Text.Regex.TDFA.Common
                        Text.Regex.TDFA.IntArrTrieSet
                        Text.Regex.TDFA.TNFA
                        Text.Regex.TDFA.TDFA
                        Text.Regex.TDFA.Pattern
                        Text.Regex.TDFA.ReadRegex
                        Text.Regex.TDFA.CorePattern
                        Text.Regex.TDFA.RunMutState
                        Text.Regex.TDFA.String
                        Text.Regex.TDFA.MutRun
                        Text.Regex.TDFA.ByteString
                        Text.Regex.TDFA.MutRunBS
                        Text.Regex.TDFA.ByteString.Lazy
                        Text.Regex.TDFA.MutRunLBS
                        Text.Regex.TDFA.Sequence
                        Text.Regex.TDFA.MutRunSeq
                        Text.Regex.TDFA.Wrap
                        Text.Regex.TDFA
                        Data.IntSet.EnumSet
                        Data.IntMap.EnumMap
                        Data.IntMap.CharMap
  Buildable:            True
  Extensions:           MultiParamTypeClasses, FunctionalDependencies, BangPatterns, MagicHash, RecursiveDo, NoMonoPatBinds, ForeignFunctionInterface, UnboxedTuples, TypeOperators, FlexibleContexts, ExistentialQuantification, UnliftedFFITypes, TypeSynonymInstances
  GHC-Options:          -Wall -O2 -funbox-strict-fields
  -- GHC-Options:            -Wall -O2
  -- GHC-Options:            -Wall -ddump-minimal-imports
  -- GHC-Prof-Options:       -auto-all


package-hashes:
    MD5:29bb22acc1c9c4684940aeb53483ee71
    SHA1:4a4d6d99663ec520bd5be93341e9208561f6020a
    SHA256:244224c17628c7e325e3e479a71866df71265034b13af89763bc41912bd9ff77
    SHA512:7dbaa0b00b8b78ca9f792c10756025d99af403755ef239fda80855e5e517e9e501eee8e8414d7cc6e129539278d6a495b2eb48f4412dce70206a4a7a7c90cb4e
    Skein512_512:01c3f417b0a454db660c3d9ee8ddba2f6fbae1117a2437c31d93009c91dd00681ba758f949f664458bc07258ee09bb95e043bc1e39f5799e7f4d4931a747ddaa

package-locations:
    https://hackage.haskell.org/package/regex-tdfa-0.97.3/regex-tdfa-0.97.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/regex-tdfa-0.97.3.tar.gz

