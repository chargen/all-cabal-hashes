Name:                game-probability
Version:             1.0
Synopsis:            Simple probability library for dice rolls and similar simple games of chance
-- A longer description of the package.
Description:         A library designed to aid in easily calculating the
                     probability of various outcomes of dice rolls.  The
		     central types are held in the
		     "Numeric.Probability.Game.Event" module, the dice are
		     defined in the "Numeric.Probability.Game.Dice" module,
		     and the functions for calculating probabilities are in
		     the "Numeric.Probability.Game.Query" module.  Various
		     examples are scattered throughout the library, but here
		     are some more:
                     .
                     Evalulates the chance of a coin toss turning up heads:
                     .
                     > chanceTrue coinToss
                     .
                     Shows the chances of each outcome of rolling two six-sided dice, as a textual bar chart:
                     .
                     > show (2*d6)
                     .
                     The chance of getting an 18 when rolling 3 six-sided dice and rerolling on any total less than 8:
                     .
                     > chancePred (== 18) ((3*d6) `rerollOn` [3..7])
                     .
                     As a more complex example, this implements my memory/understanding of the original
		     World of Darkness dice system
		     (<http://en.wikipedia.org/wiki/Storytelling_System>).
		     You roll a given number of 10-sided dice, rolling one
		     extra for every 10 you score if you are specialised.  The number of 1s on the
		     original roll are subtracted from the total number of
		     dice that equal or exceed the difficulty target:
                     .
                     > successes :: Int -> Int -> Bool -> EventM Int
                     > successes target dice specialised
                     >   = do initial <- replicateM dice d10
                     >        extra <- if specialised
                     >                   then replicateM (count (== 10) initial) d10
                     >                   else return []
                     >        return (count (>= target) (initial ++ extra) - count (== 1) initial)
                     >   where
                     >     count f xs = length (filter f xs)
                     .
                     If only all RPGs specified their rules in Haskell!
                     .
                     See also the blog post on the design of the library: <http://chplib.wordpress.com/2010/08/13/nice-dice-in-haskell/>
License:             BSD3
License-file:        LICENSE
Author:              Neil Brown
Maintainer:          neil@twistedsquare.com
-- Copyright:           

Category:            Math
Build-type:          Simple

Cabal-version:       >=1.6


Library
  -- Modules exported by the library.
  Exposed-modules:     Numeric.Probability.Game.Event
                       Numeric.Probability.Game.Dice
                       Numeric.Probability.Game.Query
  
  -- Packages needed in order to build this package.
  Build-depends:       base >= 4 && < 5, probability == 0.2.*, random == 1.0.*

  Extensions:          GeneralizedNewtypeDeriving FlexibleInstances

  GHC-Options:         -Wall



package-hashes:
    MD5:437be40faeda0273ab37ab47f9e714d0
    SHA1:e13c1b301d8b5f58a8e9debf9d14946bf46eea65
    SHA256:33c399d2e42637f286b4e3d29a498fe073472cda26e3947bac79669353984b24
    SHA512:e654e0c6ec350720f8336897af3a0f2c36949a63fe08e0460a3f7b9dc23655d5b83f0e1c2bf26d9c07085bdbfa92c496fa2fb2788317b1e1e1ca5f01ddbba112
    Skein512_512:ebb80112733bf81415420040133e2404f5d9a6c34e8252d82cff6e7a3ebc9c9dc315ad013a27b85cad8e379021d217fa302f3fd812e6b7ff5804cb8154813636

package-locations:
    https://hackage.haskell.org/package/game-probability-1.0/game-probability-1.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/game-probability-1.0.tar.gz

