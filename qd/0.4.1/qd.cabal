-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:05ba5850629e8df1937008dba4aaa367
    SHA1:1310f90946b9e11f23a95fc08a00929259d7ec66
    SHA256:f78f69f02b7b08f5ecf868d19f68059215f25c06b484df747f4e26741bafafb6
    SHA512:d3ae026dee660527f85d5cdbc4bdfebd0067d2d9f8582307d22635fa3ce20b3e78e430aaaa5d550f9625f5fd8c5da5c88b11c597ca56f45e994d80f18269d44e
    Skein512_512:5ed3d4db593aeabb61cfb64120033cfa14f65103aabf1c46ff5ee24b85c832386242f5b2bfe6362a26f297ab1af405d610c5e6cb09655b5d45b30e4c724b7d55

package-locations:
    https://hackage.haskell.org/package/qd-0.4.1/qd-0.4.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/qd-0.4.1.tar.gz

package-size: 6493
-- END Added by all-cabal-hashes-tool

Name:                 qd
Version:              0.4.1
Synopsis:             double-double and quad-double number type via libqd
Description:
                      This package supports both a double-double datatype (approx. 32 decimal digits)
                      and a quad-double datatype (approx. 64 decimal digits), using libqd (which is
                      implemented in C++ with C and Fortran wrappers).  To compile this package you
                      need libqd to be installed.
                      .
                      @'Numeric.QD.DoubleDouble.DoubleDouble'@ and @'Numeric.QD.QuadDouble.QuadDouble'@
                      are strict tuples of @CDouble@s, with instances of:
                      @'Eq'@, @'Floating'@, @'Fractional'@, @'Num'@, @'Ord'@, @'Read'@, @'Real'@,
                      @'RealFloat'@, @'RealFrac'@, @'Show'@, @'Storable'@, @'Typeable'@.
                      .
                      Additional note: libqd depends on 64bit doubles, while some FPU architectures
                      use 80bit.  It is highly recommended to compile with -fno-excess-precision and
                      set the FPU control words to avoid erroneous behaviour, perhaps by doing
                      something like this at the start of your program:
                      .
                      > import Foreign (nullPtr)
                      > import GHC.Conc (forkOnIO, numCapabilities)
                      > import Numeric.QD.FPU.Raw (fpu_fix_start)
                      > main :: IO ()
                      > main = do
                      >   mapM_ (flip forkOnIO $ fpu_fix_start nullPtr) [ 0 .. numCapabilities - 1 ]
                      >   -- ...

License:              BSD3
License-file:         LICENSE
Author:               Claude Heiland-Allen
Maintainer:           claudiusmaximus@goto10.org
Category:             Math
Build-type:           Simple
Cabal-version:        >=1.2

Library
  Build-depends:      base >= 4 && < 5
  Extra-Libraries:    qd
  if os(linux)
    Extra-libraries:  stdc++
  Exposed-modules:    Numeric.QD
                      Numeric.QD.DoubleDouble
                      Numeric.QD.DoubleDouble.Raw
                      Numeric.QD.FPU
                      Numeric.QD.FPU.Raw
                      Numeric.QD.QuadDouble
                      Numeric.QD.QuadDouble.Raw
                      Numeric.QD.Raw
  GHC-options:        -O2 -Wall -fno-excess-precision
  GHC-prof-options:   -O2 -Wall -fno-excess-precision -prof -auto-all -caf-all
