name: Workflow
version: 0.8.0.4
cabal-version: >= 1.6
build-type: Simple
license: BSD3
license-file: LICENSE
maintainer: agocorona@gmail.com
stability: experimental
bug-reports: agocorona@gmail.com
synopsis:    Workflow patterns and a monad for thread state logging & recovery
description: Transparent support  for interruptible computations. A workflow can be seen as a persistent thread that executes a
             monadic computation. Therefore, it can be used in very time consuming computations such are CPU intensive calculations
             or procedures that are most of the time waiting for the action of a process or an user, that are prone to comunication
             failures, timeouts or shutdowns. It also can be used if you like to restart your
             program at the point where the user left it last time
             .             .
             The computation can be restarted at the interrupted point thanks to its logged state in permanent storage.
             The thread state is located in files by default. It can be moved and continued in another computer.
             Besides that, the package also provides other higher level services associated to workflows: Workflow patters and
             and a general configuarion utility.
             .
             See "Control.Workflow" for details
             .
             In this release:
             * added getWFRef

category: Control, Workflow

author: Alberto GÃ³mez Corona

data-dir: ""

extra-source-files: Demos/Fact.hs Demos/Inspect.hs
                    Demos/docAprobal.hs  Demos/sequence.hs



library
    build-depends: MonadCatchIO-mtl -any, RefSerialize ==0.3.1.* ,
                   TCache -any && <1.0, base >=4 && <5, binary -any, bytestring -any,
                   containers -any, directory -any, extensible-exceptions -any,
                    mtl -any, old-time -any, stm >2, vector -any

    exposed-modules: Control.Workflow
                     Control.Workflow.Configuration
                     Control.Workflow.Patterns
    exposed: True
    buildable: True
    extensions: OverlappingInstances UndecidableInstances
                MultiParamTypeClasses ExistentialQuantification
                TypeSynonymInstances RecordWildCards DeriveDataTypeable
    hs-source-dirs: .
    other-modules: Control.Workflow.Stat


source-repository head
  type : git
  location: https://github.com/agocorona/Workflow


package-hashes:
    MD5:5bab1961aabec59c1de91e2c0b72dc49
    SHA1:de3fce10247f3333c17d042551c92b6f3180a419
    SHA256:0017847defd8095dd960e26438a8e5e5896cd278c6773ab2e0a98d5d6782888e
    SHA512:2c504f6275021b6df20e97c0162f418c97dcf7ac47f5227aba7c7ec68b8be60ae3c2974182fad986db64798f2fbd49505e6da39e3394c33f4aae98805be95878
    Skein512_512:7bc69940389c0e33d58fb463e7121227c8e20ffd7d0eaca84bdc145375bfb8c384b7cf239d95fe7f667ea8f1faa5bfdceef54c7d4e08d18e79ab14db23b16907

package-locations:
    https://hackage.haskell.org/package/Workflow-0.8.0.4/Workflow-0.8.0.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Workflow-0.8.0.4.tar.gz

package-size: 26943
