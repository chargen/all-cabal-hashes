-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:b71fb0550cc4ffc1b83876a9bf41525e
    SHA1:dca662dfd96def49b54e1dc1d704ce43e62e8c17
    SHA256:55132ce421a69d347fddfa29f57a42a6383a797b2489850952c387fb3601a74d
    SHA512:3ce613d974fd2fa4e97304b376f029d76a6d17334bc265f6cf12d4a755b3b2fd3974feb1ddadb3a9af869d17c8f770c1ef502aa2f5494344af609e4cab4d26ab
    Skein512_512:0c244af81cfc8b13426c21acd5f3d38c38d6c6ddb7fc9ae8c611d88be96c6eb938364c4fd7d8f9c34fef9c69e83d37bd248b5722b4f0da688d4d902ea34628b6

x-package-locations:
    https://hackage.haskell.org/package/Workflow-0.8.0.2/Workflow-0.8.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Workflow-0.8.0.2.tar.gz

x-package-size: 26424
-- END Added by all-cabal-hashes-tool

name: Workflow
version: 0.8.0.2
cabal-version: >= 1.6
build-type: Simple
license: BSD3
license-file: LICENSE
maintainer: agocorona@gmail.com
stability: experimental
bug-reports: agocorona@gmail.com
synopsis:    Workflow patterns and a monad for thread state logging & recovery
description: Transparent support  for interruptible computations. A workflow can be seen as a persistent thread that executes a
             monadic computation. Therefore, it can be used in very time consuming computations such are CPU intensive calculations
             or procedures that are most of the time waiting for the action of a process or an user, that are prone to comunication
             failures, timeouts or shutdowns. It also can be used if you like to restart your
             program at the point where the user left it last time
             .             .
             The computation can be restarted at the interrupted point thanks to its logged state in permanent storage.
             The thread state is located in files by default. It can be moved and continued in another computer.
             Besides that, the package also provides other higher level services associated to workflows: Workflow patters and
             and a general configuarion utility.
             .
             See "Control.Workflow" for details

category: Control, Workflow

author: Alberto GÃ³mez Corona

data-dir: ""

extra-source-files: Demos/Fact.hs Demos/Inspect.hs
                    Demos/docAprobal.hs  Demos/sequence.hs



library
    build-depends: MonadCatchIO-mtl -any, RefSerialize ==0.3.1.* ,
                   TCache -any && <1.0, base >=4 && <5, binary -any, bytestring -any,
                   containers -any, directory -any, extensible-exceptions -any,
                    mtl -any, old-time -any, stm >2, vector -any

    exposed-modules: Control.Workflow
                     Control.Workflow.Configuration
                     Control.Workflow.Patterns
    exposed: True
    buildable: True
    extensions: OverlappingInstances UndecidableInstances
                MultiParamTypeClasses ExistentialQuantification
                TypeSynonymInstances RecordWildCards DeriveDataTypeable
    hs-source-dirs: .
    other-modules: Control.Workflow.Stat


source-repository head
  type : git
  location: https://github.com/agocorona/Workflow
