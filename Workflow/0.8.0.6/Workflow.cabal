-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:43e09d0d88af5cc686c2a31c9db198d8
    SHA1:a45919a36170215ed6cb455a03ae4397c6324d9a
    SHA256:3644cc8aeff3bbfc41e743019e179f712660cb3acb002cfdb4003954b9857bab
    SHA512:9b451d1f0e3caed8128f9b1bd2e97c17e7783e375eb217f801c5edc7319bf981929dfb89984b87253c295ee3703891e3d3917f52e9b3ffed479b957c781297a3
    Skein512_512:46fd92550be131793568294dd87deef7c89bc21d82ea2e1fbc13679a6eff9b8d689709a612ab914d97835ab0ed9dc7a991f3247e1281f16b620ef54dbcf3fd71

x-package-locations:
    https://hackage.haskell.org/package/Workflow-0.8.0.6/Workflow-0.8.0.6.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Workflow-0.8.0.6.tar.gz

x-package-size: 27178
-- END Added by all-cabal-hashes-tool

name: Workflow
version: 0.8.0.6
cabal-version: >= 1.6
build-type: Simple
license: BSD3
license-file: LICENSE
maintainer: agocorona@gmail.com
stability: experimental
bug-reports: agocorona@gmail.com
synopsis:    Workflow patterns over a monad for thread state logging & recovery
description: Transparent support  for interruptible computations. A workflow can be seen as a persistent thread that executes a
             monadic computation. Therefore, it can be used in very time consuming computations such are CPU intensive calculations
             or procedures that are most of the time waiting for the action of a process or an user, that are prone to comunication
             failures, timeouts or shutdowns. It also can be used if you like to restart your
             program at the point where the user left it last time
             .             .
             The computation can be restarted at the interrupted point thanks to its logged state in permanent storage.
             The thread state is located in files by default. It can be moved and continued in another computer.
             Besides that, the package also provides other higher level services associated to workflows: Workflow patterns,
             and a general configuarion utility, workflow observation events and references to the internal state.
             The state can be stored maintaining memory references (using the "RefSerialize" package), so that it is possible to track the modifications
             of a big structure (for example a document) along the workflow execution.
             .
             See "Control.Workflow" for details
             .
             In this release:
             * start and startWF exception control fixed

category: Control, Workflow

author: Alberto GÃ³mez Corona

data-dir: ""

extra-source-files: Demos/Fact.hs Demos/Inspect.hs
                    Demos/docAprobal.hs  Demos/sequence.hs



library
    build-depends: MonadCatchIO-mtl -any, RefSerialize ==0.3.1.* ,
                   TCache -any && <1.0, base >=4 && <5, binary -any, bytestring -any,
                   containers -any, directory -any, extensible-exceptions -any,
                    mtl -any, old-time -any, stm >2, vector -any

    exposed-modules: Control.Workflow
                     Control.Workflow.Configuration
                     Control.Workflow.Patterns
    exposed: True
    buildable: True
    extensions: OverlappingInstances UndecidableInstances
                MultiParamTypeClasses ExistentialQuantification
                TypeSynonymInstances RecordWildCards DeriveDataTypeable
    hs-source-dirs: .
    other-modules: Control.Workflow.Stat


source-repository head
  type : git
  location: https://github.com/agocorona/Workflow
