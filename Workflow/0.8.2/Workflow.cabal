
name: Workflow
version: 0.8.2
cabal-version: >= 1.6
build-type: Simple
license: BSD3
license-file: LICENSE
maintainer: agocorona@gmail.com
stability: experimental
bug-reports: agocorona@gmail.com
synopsis:    Workflow patterns over a monad for thread state logging & recovery
description: Transparent support  for interruptible computations. A workflow can be seen as a persistent thread that executes a
             monadic computation. Therefore, it can be used in very time consuming computations such are CPU intensive calculations
             or procedures that are most of the time waiting for the action of a process or an user, that are prone to comunication
             failures, timeouts or shutdowns. It also can be used if you like to restart your
             program at the point where the user left it last time
             .             .
             The computation can be restarted at the interrupted point thanks to its logged state in permanent storage.
             The thread state is located in files by default. It can be moved and continued in another computer.
             Besides that, the package also provides other higher level services associated to workflows: Workflow patterns,
             and a general configuarion utility, workflow observation events and references to the internal state.
             The state can be stored maintaining memory references (using the "RefSerialize" package), so that it is possible to track the modifications
             of a big structure (for example a document) along the workflow execution.
             .
             See "Control.Workflow" for details
             .
             In this release:
             * Adaptation for MonadMask instance introduced in the package exceptions-0.6

category: Control, Workflow

author: Alberto GÃ³mez Corona

data-dir: ""

extra-source-files: Demos/Fact.hs Demos/Inspect.hs
                    Demos/docAprobal.hs  Demos/sequence.hs



library
    build-depends: exceptions >= 0.6, RefSerialize  ,
                   TCache , base >=4 && <5, binary , bytestring ,
                   containers , directory -any, extensible-exceptions ,
                    mtl , old-time , stm >2, vector

    exposed-modules: Control.Workflow
                     Control.Workflow.Configuration
                     Control.Workflow.Patterns
                     Control.Workflow.Stat
    exposed: True
    buildable: True
    extensions: OverlappingInstances UndecidableInstances
                MultiParamTypeClasses ExistentialQuantification
                TypeSynonymInstances RecordWildCards DeriveDataTypeable
    hs-source-dirs: .
    other-modules:


source-repository head
  type : git
  location: https://github.com/agocorona/Workflow


package-hashes:
    MD5:0b1efa2ef919994c4814bd71abc5ac37
    SHA1:a873400007cd7f067797b55101ba3be21dd1fb92
    SHA256:ab49c013d54797dcefd1961a0dbceffbf10fe9a7d78f9ebe44cde5fa3838e3f7
    SHA512:28d2c04164b289244d9265d8ae0983b22d4e85ac5ab6310ed9a6dbab09360fdc0269e1c2eaf01119c87b20d8a4b06f15676e637cb779a308689170cbcd96b349
    Skein512_512:984486f5601e202fe716d291a6964ead407b0580b06bf28c37f1d7bbbfce86a70929ab6bdb6093d4a6853862f7ee9694d8397f187a489ade22c2fa907e360e74

package-locations:
    https://hackage.haskell.org/package/Workflow-0.8.2/Workflow-0.8.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Workflow-0.8.2.tar.gz

