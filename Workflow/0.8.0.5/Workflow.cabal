name: Workflow
version: 0.8.0.5
cabal-version: >= 1.6
build-type: Simple
license: BSD3
license-file: LICENSE
maintainer: agocorona@gmail.com
stability: experimental
bug-reports: agocorona@gmail.com
synopsis:    Workflow patterns and a monad for thread state logging & recovery
description: Transparent support  for interruptible computations. A workflow can be seen as a persistent thread that executes a
             monadic computation. Therefore, it can be used in very time consuming computations such are CPU intensive calculations
             or procedures that are most of the time waiting for the action of a process or an user, that are prone to comunication
             failures, timeouts or shutdowns. It also can be used if you like to restart your
             program at the point where the user left it last time
             .             .
             The computation can be restarted at the interrupted point thanks to its logged state in permanent storage.
             The thread state is located in files by default. It can be moved and continued in another computer.
             Besides that, the package also provides other higher level services associated to workflows: Workflow patters and
             and a general configuarion utility.
             .
             See "Control.Workflow" for details
             .
             In this release:
             * added getWFRef bug fixed

category: Control, Workflow

author: Alberto GÃ³mez Corona

data-dir: ""

extra-source-files: Demos/Fact.hs Demos/Inspect.hs
                    Demos/docAprobal.hs  Demos/sequence.hs



library
    build-depends: MonadCatchIO-mtl -any, RefSerialize ==0.3.1.* ,
                   TCache -any && <1.0, base >=4 && <5, binary -any, bytestring -any,
                   containers -any, directory -any, extensible-exceptions -any,
                    mtl -any, old-time -any, stm >2, vector -any

    exposed-modules: Control.Workflow
                     Control.Workflow.Configuration
                     Control.Workflow.Patterns
    exposed: True
    buildable: True
    extensions: OverlappingInstances UndecidableInstances
                MultiParamTypeClasses ExistentialQuantification
                TypeSynonymInstances RecordWildCards DeriveDataTypeable
    hs-source-dirs: .
    other-modules: Control.Workflow.Stat


source-repository head
  type : git
  location: https://github.com/agocorona/Workflow


package-hashes:
    MD5:7cc50c719929c5fe5e19f07eda9213e9
    SHA1:3e30cccc3050eef7888af57866355acc83ea429f
    SHA256:0a837bed9d10bcd0dda5f183e53ae52dafb9cd471218efaeff9ba6aa289c312a
    SHA512:9446aad633ed5b9489de56ece011cbaa37cdb2bc6b8b33306f06143ac8db723821d9f4ddd0b63a116c6975dc3ed276e0e78f6ef32543681461418991527d4187
    Skein512_512:31a09699e5762569630eff0a8a6193455b7da71595c5294be636b2c2157607c9fa4c50c0c20126c066225a6dd50b119b99755460b0538e368ef7cd60b374494c

package-locations:
    https://hackage.haskell.org/package/Workflow-0.8.0.5/Workflow-0.8.0.5.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Workflow-0.8.0.5.tar.gz

