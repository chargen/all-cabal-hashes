name: Workflow
version: 0.5.8.1

build-type: Simple
license: BSD3
license-file: LICENSE
copyright:
maintainer: agocorona@gmail.com
build-depends: vector -any,  transformers,
               extensible-exceptions -any, MonadCatchIO-mtl -any,
               monadIO -any,
               base >=4 && < 5,
               binary -any,
               bytestring -any,
               containers -any,
               RefSerialize >=0.2.8 && < 0.3,
               TCache >=0.9 && <1.0,
               stm >2, old-time,
               mtl -any



stability: experimental
homepage:
package-url:
bug-reports: agocorona@gmail.com
synopsis: library for transparent execution  of interruptible  computations
description: Transparent support  for interruptible computations. A workflow can be seen as a persistent thread that executes any
             monadic computation. Therefore, it can be used in very time consuming computations such are CPU intensive calculations
             or procedures that are most of the time waiting for the action of a process or an user, that are prone to comunication
             failures, timeouts or shutdowns.
             .
             The computantion can be restarted at the interrupted point thanks to its logged state in permanent storage.
             Besides that, the package also provides other services associated to workflows
             .
             New in this release,
                  .
                  * 0.5.8.1 solved a bug that caused a "casting failure"
                  .
                  * 0.5.8:
                  .
                  *registerType is no longer needed
                  .
                  * Configurable state persistence (for example, in databases) . Default in files
                  .
                  * Added Data.Binary  serialization (Use `Control.Workflow.Binary`) besides Text serialization  (`Control.Wokflow.Text`)
                  .
                  * New simpler and more intuitive workflow  primitives with excepion handling
                  .
                  * Instances of classes in Control.Concurrent.MonadIO, MonadCatchIO
                  .
                  * An EDSL of workflow patterns. To express  bifurcations, confluences, timeouts etc
                  .
                  * References to  workflow objects, that can be accessed externally: WFRef's
                 .
                 Previous versions:
                 .
                 * Persisten communications facilities trough persistent data objects, inspection of workflow states ,  persistent  queues, persistent timeouts and, new in this release, References to internal workflow objects WFRef's
                 .
                 * workflow management and monitoring, view workflow history and intermediate results.



category: Control, Workflow, Concurrent
author: Alberto GÃ³mez Corona
data-files:
data-dir: ""

extra-tmp-files:
exposed-modules:
                 Control.Workflow.Binary
                 Control.Workflow.Binary.Patterns
                 Control.Workflow.Text
                 Control.Workflow.Text.Patterns

                 Data.Persistent.Queue.Text
                 Data.Persistent.Queue.Binary

other-modules:
                Control.Workflow.Text.TextDefs
                Control.Workflow.Binary.BinDefs
                Control.Workflow.IDynamic
                Control.Workflow.Stat
                Control.Workflow.GenSerializer

extra-source-files:
                Control/Workflow/Workflow.inc.hs
                Control/Workflow/Patterns.inc.hs
                Data/Persistent/Queue/Queue.inc.hs
                Demos/docAprobal.hs
                Demos/sequence.hs
                Demos/Fact.hs
                Demos/Inspect.hs

exposed: True
buildable: True
build-tools:
cpp-options:
cc-options:
ld-options:
pkgconfig-depends:
frameworks:
c-sources:

extensions:
extra-libraries:
extra-lib-dirs:
includes:
install-includes:
include-dirs:
hs-source-dirs: .

ghc-prof-options:
ghc-shared-options:
ghc-options:
hugs-options:
nhc98-options:
jhc-options:


package-hashes:
    MD5:822b95f1e6bfa9e504a2dcacaf00a6d7
    SHA1:2a6c00374d86ab6accf587670b31f6fc15bf91d4
    SHA256:b9b9e3e502893be2d61dc9870b7c967dcb77c30c442500bceb7eb016738a6236
    SHA512:f0232ee5eb28dc2a5f03ad5bc7ceb8de2b35c60c9de5964d26f7c905835912889b914cee4031f7cda59f7d9f14af31dbe83b046edf84a266b69d3139c7ece469
    Skein512_512:6746ecb4ceb7df7e30b26af2e36da7487e3e712540043bf8d2695caea1c918fcba53ed7df55035ede5914b48f323cb953d861fc83c37d5c54f5bed1df1213b0c

package-locations:
    https://hackage.haskell.org/package/Workflow-0.5.8.1/Workflow-0.5.8.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Workflow-0.5.8.1.tar.gz

