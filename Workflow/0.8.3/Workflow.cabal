name: Workflow
version: 0.8.3
x-revision: 1
cabal-version: >= 1.6
build-type: Simple
license: BSD3
license-file: LICENSE
maintainer: agocorona@gmail.com
stability:  experimental
bug-reports:  agocorona@gmail.com
synopsis: Workflow patterns over a monad for thread state logging & recovery
description: Transparent support for interruptible computations. A workflow can be seen as a persistent thread that executes a
             monadic computation. Therefore, it can be used in very time consuming computations such are CPU intensive calculations
             or procedures that are most of the time waiting for the action of a process or an user, that are prone to communication
             failures, timeouts or shutdowns. It also can be used if you like to restart your
             program at the point where the user left it last time
             .             .
             The computation can be restarted at the interrupted point thanks to its logged state in permanent storage.
             The thread state is located in files by default. It can be moved and continued in another computer.
             Besides that, the package also provides other higher level services associated to workflows: Workflow patterns,
             and a general configuration utility, workflow observation events and references to the internal state.
             The state can be stored maintaining memory references (using the "RefSerialize" package), so that it is possible to track the modifications
             of a big structure (for example a document) along the workflow execution.
             .
             See "Control.Workflow" for details
             .
             In this release:
             * Adaptation for MonadMask instance introduced in the package exceptions-0.6

category: Control, Workflow

author: Alberto GÃ³mez Corona

data-dir: ""

extra-source-files: Demos/Fact.hs Demos/Inspect.hs
                    Demos/docAprobal.hs  Demos/sequence.hs



library
    build-depends: exceptions >= 0.6, RefSerialize  ,
                   TCache , base >=4 && <5, binary , bytestring ,
                   containers , directory -any, extensible-exceptions ,
                    mtl , old-time , stm >2, vector

    exposed-modules: Control.Workflow
                     Control.Workflow.Configuration
                     Control.Workflow.Patterns
                     Control.Workflow.Stat
    exposed: True
    buildable: True
    extensions: OverlappingInstances UndecidableInstances
                MultiParamTypeClasses ExistentialQuantification
                TypeSynonymInstances RecordWildCards DeriveDataTypeable
    hs-source-dirs: .
    other-modules:


source-repository head
  type : git
  location: https://github.com/agocorona/Workflow


package-hashes:
    MD5:d36f6d40dbfd78aab376b85e5c5eeeb6
    SHA1:97a1703f3fd8d52f8a9c8f712b9bb0fbfe0f3753
    SHA256:c89b4b3a4a29fe576f8972ffa1e698eff8ac0ceb433642fc0b3f9c0308d22123
    SHA512:68f97cf753265baae17d5cab6ebd29ba118f7b821ecc6149d89d175b94ac692e69da1fe753de9eaa8631dc347b8bbd8671df7a4362616957ac83377f3c03a079
    Skein512_512:297792accefd85749581fd462bd6f17b9331b6d2ceb2ec3ac293ec49455461477eb5aa3505cdf6086016aae57e94fb399ed3eca8e21c0a0b75786c6e43e8ec9b

package-locations:
    https://hackage.haskell.org/package/Workflow-0.8.3/Workflow-0.8.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Workflow-0.8.3.tar.gz

package-size: 27296
