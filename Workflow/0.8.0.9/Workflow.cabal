name: Workflow
version: 0.8.0.9
cabal-version: >= 1.6
build-type: Simple
license: BSD3
license-file: LICENSE
maintainer: agocorona@gmail.com
stability: experimental
bug-reports: agocorona@gmail.com
synopsis:    Workflow patterns over a monad for thread state logging & recovery
description: Transparent support  for interruptible computations. A workflow can be seen as a persistent thread that executes a
             monadic computation. Therefore, it can be used in very time consuming computations such are CPU intensive calculations
             or procedures that are most of the time waiting for the action of a process or an user, that are prone to comunication
             failures, timeouts or shutdowns. It also can be used if you like to restart your
             program at the point where the user left it last time
             .             .
             The computation can be restarted at the interrupted point thanks to its logged state in permanent storage.
             The thread state is located in files by default. It can be moved and continued in another computer.
             Besides that, the package also provides other higher level services associated to workflows: Workflow patterns,
             and a general configuarion utility, workflow observation events and references to the internal state.
             The state can be stored maintaining memory references (using the "RefSerialize" package), so that it is possible to track the modifications
             of a big structure (for example a document) along the workflow execution.
             .
             See "Control.Workflow" for details
             .
             In this release:
             * minor changes

category: Control, Workflow

author: Alberto GÃ³mez Corona

data-dir: ""

extra-source-files: Demos/Fact.hs Demos/Inspect.hs
                    Demos/docAprobal.hs  Demos/sequence.hs



library
    build-depends: exceptions -any, RefSerialize ==0.3.1.* ,
                   TCache -any && <1.0, base >=4 && <5, binary -any, bytestring -any,
                   containers -any, directory -any, extensible-exceptions -any,
                    mtl -any, old-time -any, stm >2, vector -any

    exposed-modules: Control.Workflow
                     Control.Workflow.Configuration
                     Control.Workflow.Patterns
                     Control.Workflow.Stat
    exposed: True
    buildable: True
    extensions: OverlappingInstances UndecidableInstances
                MultiParamTypeClasses ExistentialQuantification
                TypeSynonymInstances RecordWildCards DeriveDataTypeable
    hs-source-dirs: .
    other-modules:


source-repository head
  type : git
  location: https://github.com/agocorona/Workflow


package-hashes:
    MD5:36e9f8bea429cde6bf3513afb89613ac
    SHA1:61a0922faf83897af99a305dfa1e801a07594746
    SHA256:d2815a6473caf5d7b9381408e4d38801d4c238159ce6a77ab5360e66bf9d07a7
    SHA512:d3faa191f7d8b5dd08b36bf1fab52d0f9c6e2b1dd22e4575d5afd83c21c2e2c100b25ebd9242e11dcd084cd60138b70940bb30f4da5523478f1dac25413612cf
    Skein512_512:a8e0eb4597c8eec3de2a1bfc3054142e80ed6b61bbff2a34a683e2a6a439d9ca3370d63ec831ca4ffffc6c9a853f9a147f67266894746a12953478714c7375eb

package-locations:
    https://hackage.haskell.org/package/Workflow-0.8.0.9/Workflow-0.8.0.9.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Workflow-0.8.0.9.tar.gz

