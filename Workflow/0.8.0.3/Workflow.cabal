name: Workflow
version: 0.8.0.3
cabal-version: >= 1.6
build-type: Simple
license: BSD3
license-file: LICENSE
maintainer: agocorona@gmail.com
stability: experimental
bug-reports: agocorona@gmail.com
synopsis:    Workflow patterns and a monad for thread state logging & recovery
description: Transparent support  for interruptible computations. A workflow can be seen as a persistent thread that executes a
             monadic computation. Therefore, it can be used in very time consuming computations such are CPU intensive calculations
             or procedures that are most of the time waiting for the action of a process or an user, that are prone to comunication
             failures, timeouts or shutdowns. It also can be used if you like to restart your
             program at the point where the user left it last time
             .             .
             The computation can be restarted at the interrupted point thanks to its logged state in permanent storage.
             The thread state is located in files by default. It can be moved and continued in another computer.
             Besides that, the package also provides other higher level services associated to workflows: Workflow patters and
             and a general configuarion utility.
             .
             See "Control.Workflow" for details
             .
             In this release:
             * timeout miscalculated in time-related primitives fixed

category: Control, Workflow

author: Alberto GÃ³mez Corona

data-dir: ""

extra-source-files: Demos/Fact.hs Demos/Inspect.hs
                    Demos/docAprobal.hs  Demos/sequence.hs



library
    build-depends: MonadCatchIO-mtl -any, RefSerialize ==0.3.1.* ,
                   TCache -any && <1.0, base >=4 && <5, binary -any, bytestring -any,
                   containers -any, directory -any, extensible-exceptions -any,
                    mtl -any, old-time -any, stm >2, vector -any

    exposed-modules: Control.Workflow
                     Control.Workflow.Configuration
                     Control.Workflow.Patterns
    exposed: True
    buildable: True
    extensions: OverlappingInstances UndecidableInstances
                MultiParamTypeClasses ExistentialQuantification
                TypeSynonymInstances RecordWildCards DeriveDataTypeable
    hs-source-dirs: .
    other-modules: Control.Workflow.Stat


source-repository head
  type : git
  location: https://github.com/agocorona/Workflow


package-hashes:
    MD5:f50c99a016c17843e156a4ba2411e724
    SHA1:4fad9294fd3a857d1a4ff1d002419c86a728d9ea
    SHA256:145fbc3aaffb246fe69dc4f5f044b210253cc36306d5f9ce0f5391939ea1cee5
    SHA512:c1ab37ab4be544ee9ad53a7c3cdd31f1b9d2216a6825c0fbe70444a738b20727810bf5ef34dd781e6eff1ab45e273fbc779a3c6dff9460f1c17a07586c3c1c93
    Skein512_512:979fd8be191ee2eeaec45232ce2dc4e2e6b415cdd8e34334d4ef4153e55e66dfecce808f2273092323a88e814bf97b752d4f7cd23de9dcc1ac08b79bfe77911c

package-locations:
    https://hackage.haskell.org/package/Workflow-0.8.0.3/Workflow-0.8.0.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Workflow-0.8.0.3.tar.gz

