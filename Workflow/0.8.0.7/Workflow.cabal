-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:1250abb06ec18bc4757d33a9185c653e
    SHA1:e48ed514ed9dbd43a2dff5c86c125ed6f2694148
    SHA256:886d6b8abf9203ab82fbcd5f0ce5e155219fd3248cdc99a4da24094b71f042a5
    SHA512:ff2f3738461bc78ceb8f8bb0dd3c75130cfedf3d35e96e5cc90e3ffb3d1809129592b65b7d39437dc2d354c27391db150e560d7e21a930d9c65447d9d5487ccb
    Skein512_512:2c140b40049eb918cd2daa5ffc245a5f0e6fefc0ba2a6d8911bc9e54a86dde1951e79cd8d0b973e85026f2afcefd4de8780a9ac74107046cd65f688a01b13270

package-locations:
    https://hackage.haskell.org/package/Workflow-0.8.0.7/Workflow-0.8.0.7.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Workflow-0.8.0.7.tar.gz

package-size: 27321
-- END Added by all-cabal-hashes-tool

name: Workflow
version: 0.8.0.7
cabal-version: >= 1.6
build-type: Simple
license: BSD3
license-file: LICENSE
maintainer: agocorona@gmail.com
stability: experimental
bug-reports: agocorona@gmail.com
synopsis:    Workflow patterns over a monad for thread state logging & recovery
description: Transparent support  for interruptible computations. A workflow can be seen as a persistent thread that executes a
             monadic computation. Therefore, it can be used in very time consuming computations such are CPU intensive calculations
             or procedures that are most of the time waiting for the action of a process or an user, that are prone to comunication
             failures, timeouts or shutdowns. It also can be used if you like to restart your
             program at the point where the user left it last time
             .             .
             The computation can be restarted at the interrupted point thanks to its logged state in permanent storage.
             The thread state is located in files by default. It can be moved and continued in another computer.
             Besides that, the package also provides other higher level services associated to workflows: Workflow patterns,
             and a general configuarion utility, workflow observation events and references to the internal state.
             The state can be stored maintaining memory references (using the "RefSerialize" package), so that it is possible to track the modifications
             of a big structure (for example a document) along the workflow execution.
             .
             See "Control.Workflow" for details
             .
             In this release:
             * adapted to the changes in default persistence in TCache

category: Control, Workflow

author: Alberto GÃ³mez Corona

data-dir: ""

extra-source-files: Demos/Fact.hs Demos/Inspect.hs
                    Demos/docAprobal.hs  Demos/sequence.hs



library
    build-depends: MonadCatchIO-transformers -any, RefSerialize ==0.3.1.* ,
                   TCache -any && <1.0, base >=4 && <5, binary -any, bytestring -any,
                   containers -any, directory -any, extensible-exceptions -any,
                    mtl -any, old-time -any, stm >2, vector -any

    exposed-modules: Control.Workflow
                     Control.Workflow.Configuration
                     Control.Workflow.Patterns
                     Control.Workflow.Stat
    exposed: True
    buildable: True
    extensions: OverlappingInstances UndecidableInstances
                MultiParamTypeClasses ExistentialQuantification
                TypeSynonymInstances RecordWildCards DeriveDataTypeable
    hs-source-dirs: .
    other-modules:


source-repository head
  type : git
  location: https://github.com/agocorona/Workflow
