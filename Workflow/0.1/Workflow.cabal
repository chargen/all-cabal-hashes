-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:fa70b26af89cbf04fed2134c69a32035
    SHA1:2f07349442a8fc91cf28a6013233e9e1e306da13
    SHA256:723e59fbd966310072e57b94c504a258b734a50f626557ba88c32b37f1e0d5f9
    SHA512:d6f8e5e9a2216d6a57597c93d3d6ecdfc88ed64c07ea10a90f8313f56e326db481470e81755d16f46a5f7faacb36853bd1893f367329283a9021522ec117b5d0
    Skein512_512:c94f48a74de35ffa8db53abc6a0bcf4844537bb4d99b1a79a67d6a723494911977e02a2ef6a6c77dd397e6cc2b556905997e852eee08d7e2792387e525adaf0c

package-locations:
    https://hackage.haskell.org/package/Workflow-0.1/Workflow-0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Workflow-0.1.tar.gz

package-size: 8573
-- END Added by all-cabal-hashes-tool

name:                Workflow
version:             0.1
synopsis:            library for transparent execution of computations across shutdowns and restarts
description:  
                   transparent low level support (state logging, resume of the computation state, wait for data condition) for very long time 
                   long living event driven processes. Workflow give the two first services to any monadic computation of type  (a-> m a)   
                    
                         f x >>=\x'-> g x' >>= \x''->... z by 
                    
                    prefixing the user with the method "step": 
                    
                         step f  x >>= \x'-> step g  x' >>= \x''->...  
                   
                   This means that a workflow can be described with the familiar "do" notation. In principle, there is no other limitation
                   on the syntax but the restriction (a -> m a): All computations consume and produce the same type of data.
                                             
                   for a monadic computation, Workflow provides:
                   - transparent checkpointing for each step in permanent storage (using TCache)
                   - resume of the monadic computation at the last checkpoint after soft or hard interruption
                   - use of versioning techniques for storing object changes (using RefSerialize)
                   - retrieval of the object at any previous step
                   - suspend the computation until the input object meet certain conditions. useful for inter-workflow 
                     comunications.
                   
                   For various reasons, this package force the use of TCache for storage and refSerialize for writing to/from strings 
                   at the end of the workflow all the intermediate data is erased.
                   see demo.hs and the header of Control.TCache for documentation.



category:            Control
license:             BSD3
license-file:        LICENSE
author:              Alberto GÃ³mez Corona
maintainer:          agocorona@gmail.com
Tested-With:         GHC == 6.8.2
Build-Type:          Simple
build-Depends:       base, RefSerialize>=0.2.3, TCache>=0.5.4,  stm > 2
Cabal-Version:       >= 1.2

exposed-modules:     Control.Workflow
ghc-options:       
