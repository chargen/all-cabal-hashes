name: Workflow
version: 0.8.0.8
cabal-version: >= 1.6
build-type: Simple
license: BSD3
license-file: LICENSE
maintainer: agocorona@gmail.com
stability: experimental
bug-reports: agocorona@gmail.com
synopsis:    Workflow patterns over a monad for thread state logging & recovery
description: Transparent support  for interruptible computations. A workflow can be seen as a persistent thread that executes a
             monadic computation. Therefore, it can be used in very time consuming computations such are CPU intensive calculations
             or procedures that are most of the time waiting for the action of a process or an user, that are prone to comunication
             failures, timeouts or shutdowns. It also can be used if you like to restart your
             program at the point where the user left it last time
             .             .
             The computation can be restarted at the interrupted point thanks to its logged state in permanent storage.
             The thread state is located in files by default. It can be moved and continued in another computer.
             Besides that, the package also provides other higher level services associated to workflows: Workflow patterns,
             and a general configuarion utility, workflow observation events and references to the internal state.
             The state can be stored maintaining memory references (using the "RefSerialize" package), so that it is possible to track the modifications
             of a big structure (for example a document) along the workflow execution.
             .
             See "Control.Workflow" for details
             .
             In this release:
             * minor changes

category: Control, Workflow

author: Alberto GÃ³mez Corona

data-dir: ""

extra-source-files: Demos/Fact.hs Demos/Inspect.hs
                    Demos/docAprobal.hs  Demos/sequence.hs



library
    build-depends: MonadCatchIO-transformers -any, RefSerialize ==0.3.1.* ,
                   TCache -any && <1.0, base >=4 && <5, binary -any, bytestring -any,
                   containers -any, directory -any, extensible-exceptions -any,
                    mtl -any, old-time -any, stm >2, vector -any

    exposed-modules: Control.Workflow
                     Control.Workflow.Configuration
                     Control.Workflow.Patterns
                     Control.Workflow.Stat
    exposed: True
    buildable: True
    extensions: OverlappingInstances UndecidableInstances
                MultiParamTypeClasses ExistentialQuantification
                TypeSynonymInstances RecordWildCards DeriveDataTypeable
    hs-source-dirs: .
    other-modules:


source-repository head
  type : git
  location: https://github.com/agocorona/Workflow


package-hashes:
    MD5:a954b319a05cfeebe23370efd40189a8
    SHA1:24ecd9ecdfcd6880cb757a70ac0434ce048c16d8
    SHA256:0dee859f017be458df66cc5c255136f78d049cee886a8dc70c79d2dc27b2f06b
    SHA512:8d37ee5391859b98bfaca5703a268f903fb5312927101d68d0a62ba8ac38fc5e59c869982106515f48b3dbe077b43772fb72eb1736294a4a2c944a4e8eb7efad
    Skein512_512:fdee7907bf311b3e8733d27be996c44c34209906960c6967639b81a301c39c5d46c2f3ef278abf059ea33edcee7b2de04006c9d290559d910fc6c7636cb5fb7a

package-locations:
    https://hackage.haskell.org/package/Workflow-0.8.0.8/Workflow-0.8.0.8.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Workflow-0.8.0.8.tar.gz

