-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:25f0c927f53bc068da8a261d78b771fd
    SHA1:f66c84ee27a5810b6ec1c1b82c35eb038d5c4235
    SHA256:47997d8b36d3103d024ed572255abf51707984743514f619e2fb17796b422e56
    SHA512:b4c79c960e93030cf5d475fd6b1c0fc5a7db5e2db7b70c7b92fcb2cf60127fbacedc3b7a531297cde833b5a7ad6a4117220ae345b330773c1e89278ec37c1ccb
    Skein512_512:70f6482feab275b4de964bd1f3e6cc5920a3a165a0f4f30c5320c9b2df2bb76fbffb3262a8d2d66c8706b524a6705b34de3e2cbf5cc5e3be019945ec97931c8c

package-locations:
    https://hackage.haskell.org/package/data-reify-0.6/data-reify-0.6.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/data-reify-0.6.tar.gz

package-size: 6955
-- END Added by all-cabal-hashes-tool

Name:               data-reify
Version:            0.6
x-revision: 1
Synopsis:           Reify a recursive data structure into an explicit graph.
Description:	    'data-reify' provided the ability to turn recursive structures into explicit graphs. 
		    Many (implicitly or explicitly) recursive data structure can be given this ability, via
		    a type class instance. This gives an alternative to using 'Ref' for observable sharing.
		    .
		    Observable sharing in general is unsafe, so we use the IO monad to bound this effect,
		    but can be used safely even with 'unsafePerformIO' if some simple conditions are met.
		    Typically this package will be used to tie the knot with DSL's that depend of
		    observable sharing, like Lava.
 		    .
		    Providing an instance for 'MuRef' is the mechanism for allowing a structure to be 
		    reified into a graph, and several examples of this are provided.
		    .
		    History: 
		    Version 0.1 used unsafe pointer compares.
		    Version 0.2 of 'data-reify' used 'StableName's, and was much faster.
		    Version 0.3 provided two versions of 'MuRef', the mono-typed version,
		    for trees of a single type,
		    and the dynamic-typed version, for trees of different types.
		    Version 0.4 used 'Int' as a synonym for 'Unique' rather than 'Data.Unique'
		    for node ids, by popular demand.
		    Version 0.5 merged the mono-typed and dynamic version again, by using 
		    'DynStableName', an unphantomized version of StableName.
		    .
		    &#169; 2009 Andy Gill; BSD3 license.

Category:            Language, Data, Parsing, Reflection 
License:             BSD3
License-file:        LICENSE
Author:              Andy Gill
Maintainer:          Andy Gill <andygill@ku.edu>
Copyright:           (c) 2009 Andy Gill
Homepage:            http://www.ittc.ku.edu/csdl/fpg/Tools/IOReification
Stability:	     alpha
build-type: 	     Simple
Cabal-Version:       >= 1.6

source-repository head
  type:     git
  location: git://github.com/ku-fpg/data-reify.git

Flag tests
  Description: Enable full development tree
  Default:     False


Library
  Build-Depends: base >= 4 && < 5, containers
  Exposed-modules:
       Data.Reify,
       Data.Reify.Graph
  Ghc-Options:  -Wall

Executable data-reify-test1
  Build-Depends:  base
  Main-Is:        Test1.hs
  Hs-Source-Dirs: ., test
  if !flag(tests)
    buildable: False


Executable data-reify-test2
  Build-Depends:  base
  Main-Is:        Test2.hs
  Hs-Source-Dirs: ., test
  if !flag(tests)
    buildable: False

Executable data-reify-test3
  Build-Depends:  base
  Main-Is:        Test3.hs
  Hs-Source-Dirs: ., test
  if !flag(tests)
    buildable: False

Executable data-reify-test4
  Build-Depends:  base
  Main-Is:        Test4.hs
  Hs-Source-Dirs: ., test
  if !flag(tests)
    buildable: False

Executable data-reify-test5
  Build-Depends:  base
  Main-Is:        Test5.hs
  Hs-Source-Dirs: ., test
  if !flag(tests)
    buildable: False

Executable data-reify-test6
  Build-Depends:  base
  Main-Is:        Test6.hs
  Hs-Source-Dirs: ., test
  if !flag(tests)
    buildable: False

Executable data-reify-test7
  Build-Depends:  base
  Main-Is:        Test7.hs
  Hs-Source-Dirs: ., test
  if !flag(tests)
    buildable: False
