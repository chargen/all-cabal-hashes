-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:c8d1c1d5de38ec3f76ca94987e2adfb7
    SHA1:9084baa201569d0c1a217926aafd6b3ef1758dfd
    SHA256:61f4feb7e5fc44e624d63e0524932584bc9e0cbb6d7496da1229410d9170337b
    SHA512:ed1156c4bffc21c55723f9b716d737a4ce024e368b4f0162a3ae69f201e2fbc861852722734ca76c5c1e499e2a98df55305c955500e349ac2b503f7cd59b10de
    Skein512_512:58c7ab57a3eb8ef6b8bba4890a6fc5c66e508076560a6f850ef07317284c8025401098fbcad09e41c62ecd588f6554e3119d5994ea7bb9a5b2efa3a888ea8b61

package-locations:
    https://hackage.haskell.org/package/dynamic-plot-0.1.0.1/dynamic-plot-0.1.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/dynamic-plot-0.1.0.1.tar.gz

package-size: 4388637
-- END Added by all-cabal-hashes-tool

Name:                dynamic-plot
Version:             0.1.0.1
x-revision: 1
Category:            graphics
Synopsis:            Interactive diagram windows
Description:         Haskell excels at handling data like continuous functions
                     in a nice way, i.e. without discretising anything to finite arrays as
                     is typically done in languages like Matlab. Instead, you can simply pass
                     around functions or infinite data structures (or /very/ high-resolution data
                     that would be infeasible to handle in a strict language).
                     .
                     However when you want to /view/ the data, it will eventually need to be exported out of Haskell
                     in some finite form. The purpose of this library is to delay this discretisation
                     as long as possible: it implements an interactive plotting window that accepts continuous/recursive
                     data and only &#x201c;flattens&#x201d; it according to the specific view configuration.
                     You can then zoom in to a shown diagram and it will automatically calculate
                     the features more detailedly, or zoom out and discover previosly unexpected
                     features. You don't need to worry about specifying the range and/or resolution beforehand:
                     the program will try to find a suitable default view based on /all/ data your displaying,
                     and you can always still zoom, resize or move later.
                     .
                     <http://projects.haskell.org/diagrams> are used as the &#x201c;pre-rendered&#x201d; type. This
                     makes the output usable in a very wide range of applications, though at the moment only the GTK
                     window view is implemented.
License:             GPL-3
License-file:        COPYING
Author:              Justus SagemÃ¼ller
Maintainer:          (@) sagemuej $ smail.uni-koeln.de
Homepage:            https://github.com/leftaroundabout/dynamic-plot
Build-Type:          Simple
Cabal-Version:       >=1.10
Extra-Doc-Files:     images/examples/*.png
                     , images/examples/*.gif

Source-Repository head
    type: git
    location: git://github.com/leftaroundabout/dynamic-plot.git

Library
  Build-Depends:     base>=4.5 && <6
                     , transformers
                     , mtl
                     , vector-space>=0.8
                     , MemoTrie
                     , vector
                     , containers
                     , semigroups
                     , random
                     , MonadRandom
                     , time
                     , async
                     , deepseq
                     , process
                     , constrained-categories >= 0.2 && < 0.3
                     , diagrams-core == 1.2.0.2
                     , diagrams-lib >= 1 && < 1.4
                     , diagrams-cairo == 1.2.0.2
                     , diagrams-gtk
                     , gtk > 0.10 && < 0.15
                     , glib
                     , colour >= 2 && < 3
                     , manifolds >= 0.1.0.1 && < 0.1.1
                     , lens
  Other-Extensions:  FlexibleInstances
                     , TypeFamilies
                     , FlexibleContexts
                     , GADTs
                     , RankNTypes
                     , ConstraintKinds
                     , PatternGuards
                     , ScopedTypeVariables
                     , RecordWildCards
                     , TupleSections
  ghc-options:       -O2
  default-language:  Haskell2010
  Exposed-modules:   Graphics.Dynamic.Plot.R2
  Other-modules:     Graphics.Dynamic.Plot.Colour
