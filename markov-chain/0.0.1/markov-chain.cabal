-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:a62b86dd8a1ece61eca018fd1ca94dcf
    SHA1:2f3a02ac9dcd7bab0118d1789a58264bf19c59a5
    SHA256:235435e19c6d20f2fa404887b587bb27a6e4425a4218122ab79918e04f3418a1
    SHA512:ce372a477ab72137dfd4deaee13af90a4e798a587ac8f0875180ea8449c0246ee01ec1997858a73920a2065909fcba94d17af25c6f4736037b647fbf2907673f
    Skein512_512:2797ef6f056f30c93dd7b459a96cf939748d3d02df6262d5ee18ffb16388d11766f54fcfde3265e158c43f180ebd745a8677a1874b016c26c4c73ff4c873dda4

package-locations:
    https://hackage.haskell.org/package/markov-chain-0.0.1/markov-chain-0.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/markov-chain-0.0.1.tar.gz

package-size: 14770
-- END Added by all-cabal-hashes-tool

Name:             markov-chain
Version:          0.0.1
License:          GPL
License-File:     LICENSE
Author:           Henning Thielemann <haskell@henning-thielemann.de>
Maintainer:       Henning Thielemann <haskell@henning-thielemann.de>
Homepage:         http://darcs.haskell.org/markov-chain/
Category:         Algorithms
Build-Depends:    base>=1.0, mtl
-- From the Monad Template Library we only need the State monad.
-- If your compiler does not support functional dependencies,
-- it would be easy to replace that by mapAccumL
-- or by the MTL-split package which is on the way.
Synopsis:         Markov Chains for generating random sequences with a user definable behaviour.
Description:
   This library can be used to generate random sequences of anything
   with a behaviour that is adapted to some training data.
   Input a marketing text or a speech and
   recompose it to another arbitrary text of this sort.
   Input a dictionary of person names and create new names.
   Input a sequence of notes and get out a new melody.
   Input a set of Haskell modules and generate ...
   nice idea but the result will certainly have neither correct syntax nor types.
   I think, it's a good thing about Haskell, that you cannot fool it so easily.
   The idea is very simple:
   The algorithm analyses your input\/training data
   with respect to how likely an @a@ or @e@ follows the letters @r@ and @e@.
   Then on recomposition it chooses subsequent letters randomly
   according to the frequencies found in the training data.
   This library is well suited for /bull-shit generators/.
GHC-Options:      -Wall -O
Tested-With:      GHC==6.4.1
Hs-Source-Dirs:   src
Exposed-Modules:
  Data.MarkovChain
