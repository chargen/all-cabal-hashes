-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:36a1253a55e207fc85b02fb92386c793
    SHA1:a85c004259ac4d49e094823436e7ef3ded3e2d8d
    SHA256:d349e23c76bea1c9f5688af29bdfbc9cc86fc6bc8d50790e6d05b2ee55537a0b
    SHA512:9fc0ebe4e48762d76baae5c80c0432c85d253149eecb291bb032182a7147d3249e716e249e9290bcd57e47f41417cd4f20747aec3037e5afd331446ce43b850d
    Skein512_512:7d795ecd2172d5430f60883deefb47ae5e8a9ce2754bf8e0d0ed75ccad46082caad0d62c46cf014566e6d23d7936067d37a5e12331283015a3d8f3dc2b5b337c

x-package-locations:
    https://hackage.haskell.org/package/constrained-categories-0.1.0.0/constrained-categories-0.1.0.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/constrained-categories-0.1.0.0.tar.gz

x-package-size: 29845
-- END Added by all-cabal-hashes-tool

Name:                constrained-categories
Version:             0.1.0.0
Category:            control
Synopsis:            Constrained clones of the category-theory type classes, using ConstraintKinds.
Description:         Haskell has, and makes great use of, powerful facilities from category
                     theory – basically various variants of functors.
                     .
                     However, all those are just endofunctors in Hask, the category of
                     all Haskell types with functions as morphisms. Which is sufficient
                     for container / control structures that you want to be able to handle 
                     any type of data, but otherwise it's a bit limiting, seeing as 
                     there are (in maths, science etc.) many categories that cannot properly
                     be represented this way. Commonly used libraries such as 
                     <http://hackage.haskell.org/package/vector-space> thus make 
                     little notion of the fact that the objects they deal with actually
                     form a category, instead defining just specialised versions of
                     the operations.
                     .
                     This library generalises functors etc. to a much wider class of
                     categories, by allowing for constraints on objects (so these can have
                     extra properties required). At the same time, we try to keep as close
                     as possible to the well-known Haskell type class hierarchies rather
                     than exactly adopting the mathematicians' notions.
                     .
                     Consider the README file, the examples, and/or the documentation to
                     "Control.Category.Constrained" for how to make use of this.
License:             GPL-3
License-file:        COPYING
Author:              Justus Sagemüller
Maintainer:          (@) sagemuej $ smail.uni-koeln.de
Homepage:            https://github.com/leftaroundabout/constrained-categories
Build-Type:          Simple
Cabal-Version:       >=1.10

source-repository head
  type: git
  location: git://github.com/leftaroundabout/constrained-categories.git

Library
  Default-Language:   Haskell2010
  Build-Depends:      base>=4.6 && <5
                      , tagged
                      , void
  Default-Extensions: ConstraintKinds
                      TypeFamilies
                      FlexibleInstances
                      UndecidableInstances
                      Trustworthy
  Exposed-modules:    Control.Category.Constrained
                      Control.Functor.Constrained
                      Control.Applicative.Constrained
                      Control.Arrow.Constrained
                      Control.Monad.Constrained
                      Control.Category.Hask
                      Control.Category.Constrained.Prelude
                      Data.Foldable.Constrained
                      Data.Traversable.Constrained
                     
