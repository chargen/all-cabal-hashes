-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:8286b24348da2751f4c75609471e5820
    SHA1:04599c55f168f3d8adc02afadce66adcb163b840
    SHA256:c95fa71a7182eeaa0262f35db59cfed94e4e04e40f4ea909119fee36acdc3e66
    SHA512:a687c3a47b6d9fcd76bf6ecd56ae30c136b4439a573cc302e3587926fa14c2052febb3fbb04b25ca1934815f2bc43a2e58dfe46927447c306d0c99364ee77051
    Skein512_512:a2aa57fb58d626b62d0373f8eac7835b859a0b03a3f4d1557061677a11aff573f94efd5380b3d79c8164bd9ce599665061d2da307adbecb54176c11827b79966

x-package-locations:
    https://hackage.haskell.org/package/Etage-0.1/Etage-0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Etage-0.1.tar.gz

x-package-size: 20460
-- END Added by all-cabal-hashes-tool

Name:                Etage
Version:             0.1
Synopsis:            A general data-flow framework
Description:         A general data-flow framework featuring nondeterminism and neurological pseudo-terminology. It can be used for
                     example for data-flow computations or event propagation networks. It tries hard to aide type checking and to
                     allow proper initialization and cleanup so that interfaces to input and output devices (data or events producers or
                     consumers) can be made (so that created models\/systems\/networks can be used directly in real world applications, for
                     example robots).
                     .
                     Its main goal is to model complex neural networks with more biological realism. Namely that impulses do
                     take time to travel and neuron responses are also not instantaneous. And of course that neural systems are in
                     its base nondeterministic and that some level of determinism is build upon that. All this of course makes reasoning
                     about such networks even harder (impossible?).
                     .
                     This framework is in fact just a simple abstraction of Haskell threads and data passing between them through
                     channels with threads' initialization and cleanup wrapped into a Haskell type class.
                     .
                     Feel free to contribute or suggest additional features or (example) programs or to create interfaces to other modules.
License:             LGPL-3
License-file:        LICENSE
Author:              Mitar Milutinovic
Maintainer:          mitar.haskell@tnode.com
Copyright:           (c) 2010 Mitar Milutinovic
Category:            Control
Build-type:          Simple
Cabal-version:       >= 1.8
Stability:           experimental
Homepage:            http://mitar.tnode.com

Library
  Exposed-modules:     Control.Etage,
                       Control.Etage.Dump,
                       Control.Etage.Sequence,
                       Control.Etage.Worker,
                       Control.Etage.Timeout,
                       Control.Etage.Function,
                       Control.Etage.Fail
  Build-depends:       base >= 4.3 && < 5,
                       mtl >= 1.1 && < 3,
                       random > 1.0 && < 2,
                       unix >= 2.4 && < 3,
                       time >= 1.1 && < 2,
                       operational >= 0.2 && < 1,
                       ghc >= 7.0.2
  Other-modules:       Control.Etage.Internals,
                       Control.Etage.Externals,
                       Control.Etage.Propagate,
                       Control.Etage.Incubator,
                       Control.Etage.Chan
  HS-source-dirs:      lib
  GHC-options:         -Wall
