-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:24e710285194b312fe97670454a5bc94
    SHA1:ff5470cb6a98c0cc891926e9b31eaf337e6545d7
    SHA256:d3c61560a05e7a5c0916dc8876b3b2e66165260e3ae530b61b8b93aab4ee388b
    SHA512:17dc7600e527dcf78197e13230f79c194d5d1a3ff2ef65d5809704c5ab91b48ed2b23453a44735810672faf698da0510042f4a1dc36f527654fccfb16df3620e
    Skein512_512:cc02bbb57b18688a45a80f7ed6f2e42dfbbd961707c4b5771f11af8612d967c85ea790bbc9029bb5c6c57d25131191f92324c290179e3a51edd330e050e18740

package-locations:
    https://hackage.haskell.org/package/Etage-0.1.2/Etage-0.1.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Etage-0.1.2.tar.gz

package-size: 20429
-- END Added by all-cabal-hashes-tool

Name:                Etage
Version:             0.1.2
Synopsis:            A general data-flow framework
Description:         A general data-flow framework featuring nondeterminism, laziness and neurological pseudo-terminology. It can be
                     used for example for data-flow computations or event propagation networks. It tries hard to aide type checking and to
                     allow proper initialization and cleanup so that interfaces to input and output devices (data or events producers or
                     consumers) can be made (so that created models\/systems\/networks can be used directly in real world applications, for
                     example robots).
                     .
                     Its main goal is to model complex neural networks with more biological realism. Namely that impulses do
                     take time to travel and neuron responses are also not instantaneous. And of course that neural systems are in
                     its base nondeterministic and that some level of determinism is build upon that. All this of course makes reasoning
                     about such networks even harder (impossible?).
                     .
                     This framework is in fact just a simple abstraction of Haskell threads and data passing between them through
                     channels with threads' initialization and cleanup wrapped into a Haskell type class.
                     .
                     Feel free to contribute or suggest additional features or (example) programs or to create interfaces to other modules.
License:             LGPL-3
License-file:        LICENSE
Author:              Mitar Milutinovic
Maintainer:          mitar.haskell@tnode.com
Copyright:           (c) 2010 Mitar Milutinovic
Category:            Control
Build-type:          Simple
Cabal-version:       >= 1.8
Stability:           experimental
Homepage:            http://mitar.tnode.com

Library
  Exposed-modules:     Control.Etage,
                       Control.Etage.Dump,
                       Control.Etage.Sequence,
                       Control.Etage.Worker,
                       Control.Etage.Timeout,
                       Control.Etage.Function,
                       Control.Etage.Fail
  Build-depends:       base >= 4.3 && < 5,
                       mtl >= 1.1 && < 3,
                       random > 1.0 && < 2,
                       unix >= 2.4 && < 3,
                       time >= 1.1 && < 2,
                       operational >= 0.2 && < 1,
                       ghc >= 7.0.1
  Other-modules:       Control.Etage.Internals,
                       Control.Etage.Externals,
                       Control.Etage.Propagate,
                       Control.Etage.Incubator,
                       Control.Etage.Chan
  HS-source-dirs:      lib
  GHC-options:         -Wall
