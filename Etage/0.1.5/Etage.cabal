-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:67504307c8635fbee0c92c1157a3c775
    SHA1:da6faa86efef4a8097c1b6eb4058294d9f396bd9
    SHA256:9cff5abc44fafffb2a5645d16d54e716a67ac2629fe67ba4938f9550e3502595
    SHA512:df818f64af8fa4b46b898e2c4a62b9f2b9f9a7780832ad13b4d3f7f7fd25573b0b4af0012471c1ad0c9afbe650e16a2a044a5adc75d9cef6d969ffefceb85815
    Skein512_512:3c32eb637fac4c0c7b828ca3ce2b2f508c5dc622c06c9582aa8a758fef99b267c4c0c1e27597399d0e4c9038f339a3ee5dd1da32658164b94d1b11ee5e6e9ba3

package-locations:
    https://hackage.haskell.org/package/Etage-0.1.5/Etage-0.1.5.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Etage-0.1.5.tar.gz

package-size: 24101
-- END Added by all-cabal-hashes-tool

Name:                Etage
Version:             0.1.5
Synopsis:            A general data-flow framework
Description:         A general data-flow framework featuring nondeterminism, laziness and neurological pseudo-terminology. It can be
                     used for example for data-flow computations or event propagation networks. It tries hard to aide type checking and to
                     allow proper initialization and cleanup so that interfaces to input and output devices (data or events producers or
                     consumers) can be made (so that created models\/systems\/networks can be used directly in real world applications, for
                     example robots).
                     .
                     Its main goal is to model complex neural networks with more biological realism. Namely that impulses do
                     take time to travel and neuron responses are also not instantaneous. And of course that neural systems are in
                     its base nondeterministic and that some level of determinism is build upon that. All this of course makes reasoning
                     about such networks even harder (impossible?).
                     .
                     This framework is in fact just a simple abstraction of Haskell threads and data passing between them through
                     channels with threads' initialization and cleanup wrapped into a Haskell type class.
                     .
                     Feel free to contribute or suggest additional features or (example) programs or to create interfaces to other modules.
License:             LGPL-3
License-file:        LICENSE
Author:              Mitar Milutinovic
Maintainer:          mitar.haskell@tnode.com
Copyright:           (c) 2010 Mitar Milutinovic
Category:            Control, AI
Build-type:          Simple
Cabal-version:       >= 1.8
Stability:           experimental
Homepage:            http://mitar.tnode.com

Library
  Exposed-modules:     Control.Etage,
                       Control.Etage.Dump,
                       Control.Etage.Sequence,
                       Control.Etage.Worker,
                       Control.Etage.Timeout,
                       Control.Etage.Function,
                       Control.Etage.Fail,
                       Control.Etage.Delay
  Build-depends:       base >= 4.3 && < 5,
                       mtl >= 1.1 && < 3,
                       random > 1.0 && < 2,
                       unix >= 2.4 && < 3,
                       time >= 1.1 && < 2,
                       operational >= 0.2 && < 1,
                       ghc >= 7
  Other-modules:       Control.Etage.Internals,
                       Control.Etage.Externals,
                       Control.Etage.Propagate,
                       Control.Etage.Fuse,
                       Control.Etage.Incubator,
                       Control.Etage.Chan
  HS-source-dirs:      lib
  GHC-options:         -Wall
