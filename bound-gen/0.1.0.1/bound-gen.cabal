-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:b4965cd4e64c2d50297cae96e0e0e310
    SHA1:7018c1ea24e014bd6048a5932a436602ef8dcc55
    SHA256:09ea6ad5fe2e37273b8c3308f0f05e1c174544a7a814892959f3627afa47458a
    SHA512:5a986e1305e540883f9db30ef09072d8eabe53755c9b667770c0bd48126208ad581813e86632ee7d36200a73041dc6f19b36775b4024b7ff485f15d0a4a9a4fd
    Skein512_512:efb5165754329058f5725e6d1720e5740a58a0dc72791cc8bac0f87158cd1509ba6648d2f99486a59c8276f3a77dc8ef3aa2209eb5caa9be4ad7a14c9a15772f

x-package-locations:
    https://hackage.haskell.org/package/bound-gen-0.1.0.1/bound-gen-0.1.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/bound-gen-0.1.0.1.tar.gz

x-package-size: 2680
-- END Added by all-cabal-hashes-tool

name:                bound-gen
version:             0.1.0.1
synopsis:            Unwrap Scope's with globally fresh values
description:
            It's quite common when working with bound to need to unwrap a @Scope@.
            In order to ensure that this can be done safely, without shadowing
            any existing free variables, @bound-gen@ glues @monad-gen@'s fresh
            value monad into @bound@.
license:             MIT
license-file:        LICENSE
author:              Danny Gratzer
maintainer:          jozefg@cmu.edu
category:            Compilers/Interpreters
build-type:          Simple
extra-source-files:  README.md
cabal-version:       >=1.10
source-repository head
  type: git
  location: http://github.com/jozefg/bound-gen
library
  exposed-modules:     Bound.Unwrap
  build-depends:       base >=4.0 && < 5
                     , bound
                     , monad-gen >= 0.3
                     , mtl >= 2
  hs-source-dirs:      src
  default-language:    Haskell2010
