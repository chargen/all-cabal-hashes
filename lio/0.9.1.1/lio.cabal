-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:4da8eab8f0657c8a012da6c18f4aff8b
    SHA1:fb353dd6039266ba722ea862ed5a1a9f45c10b6a
    SHA256:07862976f8b022d8b6e93062aac80bd782680606367adfbce43a1921c3190e84
    SHA512:3f11ec8cc93a0fb818bcee658b9c9e73595b2b21d42bd3f52ee972dd7559a65a1c1584ac64f249176d1b999f13f570e32c1e287d85f25fceb3a258bae74802e2
    Skein512_512:d0934610f0a87d48a9379db19e294e83d3c5f02930395e0897f13f78bb219270edf518a41b0731fbab48355c252e4285b18318320350bbe19726d06a522ccbe6

x-package-locations:
    https://hackage.haskell.org/package/lio-0.9.1.1/lio-0.9.1.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/lio-0.9.1.1.tar.gz

x-package-size: 52211
-- END Added by all-cabal-hashes-tool

Name:           lio
Version:        0.9.1.1
Cabal-Version:  >= 1.8
Build-type:     Simple
License:        GPL
License-File:   LICENSE
Author:         Hails team
Maintainer:	Hails team <hails at scs dot stanford dot edu>
Synopsis:       Labeled IO Information Flow Control Library
Category:       Security
Description:
  The /Labeled IO/ (LIO) library is an information flow control (IFC)
  library. IFC is a mechanism that enforces security policies by
  tracking and controlling the flow of information within a system.
  Different from discretionary access control (think UNIX file
  permissions), with IFC you can execute an untrusted computation on
  your secret data and be sure that it does not leak it or overwrite
  it.

  .
  LIO is an IFC library that can be used to implement such untrusted
  computations. LIO provides combinators similar to those of 'IO' for
  performing side-effecting computations (e.g., accessing the
  filesystem, modifying mutable references, throwing exceptions, etc.)
  To track and control the flow of information, LIO associates a
  security policy, usually called a /label/, with every piece of data.
  A label may, for example, impose a restriction on who can observe,
  propagate, or modify the data labeled as such.  Different from
  standard IO operations, the LIO counterparts usually take an
  additional parameter for the label which they inspect before
  actually performing the (underlying IO) side-effecting computation.
  So, before writing to a file LIO asserts that the write will not
  violate any security policies associated with the file or the data
  to be written.

  .

  Most code should import module "LIO" and whichever label format the
  application is using (e.g., "LIO.DCLabel"). All untrusted code
  should have type 'LIO', which trusted code can safely execute with
  'evalLIO'. See "LIO" for a description of the core library API.

  .

  The paper that describes the core of LIO, including motivation and
  formal modeling/proofs, is available here:
  <http://arxiv.org/abs/1207.1457>


Extra-source-files:
  examples/dclabel.hs
  examples/gate.hs
  examples/waitAndCatch.hs
  examples/bracket.hs
  examples/fsExample.hs
  examples/LambdaChair/LambdaChair.hs
  examples/LambdaChair/LambdaChair/TCB.hs
  examples/LambdaChair/AliceCode.hs
  examples/LambdaChair/BobCode.hs
  examples/LambdaChair/Main.hs


Source-repository head
  Type:     git
  Location: ssh://anonymous@gitstar.com/scs/lio.git

Flag toLabeled
  Description:
    Enable toLabeled primitive. This is NOT
    termination-sensitive non-interferant so use with care.
  Default: False

Library
  Build-Depends:
    base         >= 4.5     && < 5.0
   ,transformers >= 0.2.2
   ,containers   >= 0.4.2
   ,bytestring   >= 0.9
   ,cereal       >= 0.3.5.1
   ,filepath     >= 1.3.0.0
   ,directory    >= 1.1.0.2
   ,xattr        >= 0.6.1
   ,zlib         >= 0.5.3.1
   ,SHA          >= 1.5.0.0
   ,time         >= 1.2.0.5

  GHC-options: -Wall -fno-warn-orphans

  if flag(toLabeled)
    CPP-options: -DTO_LABELED

  Exposed-modules:
    -- * Top-level exporter
    LIO
    -- * Label definition
    LIO.Label
    -- * Core library
    LIO.Core
    LIO.TCB
    -- * Labeled values
    LIO.Labeled
    LIO.Labeled.TCB
    -- * Labeled IORefs
    LIO.LIORef
    LIO.LIORef.TCB
    -- * Gates
    LIO.Gate
    -- * LIO privileges
    LIO.Privs
    LIO.Privs.TCB
    -- * Concurrency
    LIO.Concurrent
    LIO.Concurrent.TCB
    LIO.Concurrent.LMVar
    LIO.Concurrent.LMVar.TCB
    -- * Time library
    LIO.Data.Time
    -- * DCLabels
    LIO.DCLabel
    LIO.DCLabel.Core
    LIO.DCLabel.Privs
    LIO.DCLabel.Privs.TCB
    LIO.DCLabel.Serialize
    LIO.DCLabel.DSL
    -- * File system
    LIO.Handle
    LIO.FS.TCB
