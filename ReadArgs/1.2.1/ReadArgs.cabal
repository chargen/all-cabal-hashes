-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:4d92a05dd0bff804620f0520c56975a9
    SHA1:59a7423ea698670c8ca196be65f7824a0ff4952b
    SHA256:dbae7a2b77bc4d2acb159e946d99cda5234e07020e295fe815ce8383ad792f25
    SHA512:80202f0df2c2bf820bf78f8692e71434982524b26e3c5ad346f287cdf3158081e3a35a7f9fa61e14a1442dbe2e655c2a03b09eb5f6a19d62f64169fe1b6e1e3a
    Skein512_512:ade79e8cbd82550a954bc2d38f92bcd96bc7b5fb6f5f0dd79a66799f9e01c67005a1504fe3512bebfc47150ca7d314af09655f666dbe0a28914a23b1d03a2c89

package-locations:
    https://hackage.haskell.org/package/ReadArgs-1.2.1/ReadArgs-1.2.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/ReadArgs-1.2.1.tar.gz

package-size: 5102
-- END Added by all-cabal-hashes-tool

Name:                ReadArgs
Version:             1.2.1
Synopsis:            Simple command line argument parsing

Description:         

  ReadArgs provides the @readArgs@ IO action, which lets you tell the compiler 
  to parse the command line arguments to fit the type signature you give.
  .
  For example @(a :: Int, b :: String, c :: Float) <- readArgs@ would
  parse the first runtime argument as an @Int@, the second as a @String@ (no
  quotes required) and the third as a @Float@.
  .
  If the runtime arguments are incompatible with the type signature,
  then a simple usage statement is given of the types needed.
  .
  Continuing the previous example, if it was used in a
  program named @Example@, the error message for the above
  action would be: 
  .
  @
    usage: Example Int String Float
  @
  .
  Any type that has both @Typeable@ and @Read@ instances
  can be used. @Char@, @String@, and @Text@ are handled specially so that
  command line arguments for both do not require quotes (as their 
  @Read@ instances do). A special instance is provided for @FilePath@ so 
  that no constructor or quotes are required.
  .
  @readArgs@ also supports optional arguments and variadic arguments.
  Optional arguments are specified using @Maybe@, and variadic arguments 
  using a list.  @(a :: Int, b :: Maybe String, c :: [Float]) <- readArgs@ 
  would successfully parse any of the following sets of command line arguments:
  .
  @
    Example 1
    Example 1 2 3 4
    Example 1 foo
    Example 1 foo 2 3 4
  @
  .
  But not
  .
  @
    Example
    Example foo
    Example 1.0
  @
  .
  Usage statements for optional and variadic arguments use command-line
  parlance:
  .
  @
    usage: Example Int [String] [Float..]
  @
  .
  Note that both optional and variadic parsers are greedy by default 
  (so @Example 1 2 3 4@ was parsed as @(1, "2", [3.0,4.0])@.  They
  may both be made non-greedy through use of the @NonGreedy@ constructor:
  .
  @
    ( a :: Int
    , NonGreedy b :: NonGreedy Maybe String
    , NonGreedy c :: NonGreedy [] Float
    ) <- readArgs
  @

Homepage:            http://github.com/rampion/ReadArgs
License:             BSD3
License-file:        LICENSE
Author:              Noah Luck Easterly
Maintainer:          noah.easterly@gmail.com
Category:            Command Line
Build-type:          Simple
Cabal-version:       >=1.8

Source-repository head
  type: git 
  location: git://github.com/rampion/ReadArgs.git

Library
  Exposed-modules:     ReadArgs

  Build-depends: 
    base >= 4.3.1.0 && < 5,
    system-filepath >= 0.4.7 && < 0.5,
    text >= 0.11.1.13 && < 12
  
Test-Suite ReadArgsSpec
  type:
    exitcode-stdio-1.0

  Main-Is:
    ReadArgsSpec.hs

  Build-depends:       
    hspec >= 1.3 && < 2,
    base >= 4.3.1.0 && < 5,
    system-filepath >= 0.4.7 && < 0.5,
    text >= 0.11.1.13 && < 12
  
Executable ReadArgsEx
  Main-Is:
    ReadArgsEx.hs

  Build-depends: 
    base >= 4.3.1.0 && < 5,
    system-filepath >= 0.4.7 && < 0.5,
    text >= 0.11.1.13 && < 12
