-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:c5be68a15650ff0227a4ffaabd4ec417
    SHA1:31781e8e9212063a18f9013d19624a00cca8b81c
    SHA256:292c9735552a5656586a6764b5fa74625bc606ea7ad521980b1f12012124b443
    SHA512:cd418a19d3dd13fbd8dea7a06a66031c969918af68122abf12db3b35bd4dff79d2aef24eb2e22369f3b2cbc4e51a5482579fcce944243e775de3304320142fbe
    Skein512_512:70bfb1747aa6074ba571b27d3ce7e94836e1fe308b4196122eddee594c7fd84f9ad51fa8f8dc4f0f3adfe221cd0ad7fd5d94add985843459f1662d75e59d7ecb

package-locations:
    https://hackage.haskell.org/package/optparse-applicative-0.4.2/optparse-applicative-0.4.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/optparse-applicative-0.4.2.tar.gz

package-size: 21536
-- END Added by all-cabal-hashes-tool

name:                optparse-applicative
version:             0.4.2
x-revision: 1
synopsis:            Utilities and combinators for parsing command line options
description:
    Here is a simple example of an applicative option parser:
    .
    @
    data Sample = Sample
    &#x20; &#x7b; hello :: String
    &#x20; , quiet :: Bool &#x7d;
    .
    sample :: Parser Sample
    sample = Sample
    &#x20; \<$\> strOption
    &#x20;     ( long \"hello\"
    &#x20;     & metavar \"TARGET\"
    &#x20;     & help \"Target for the greeting\" )
    &#x20; \<*\> switch
    &#x20;     ( long \"quiet\"
    &#x20;     & help \"Whether to be quiet\" )
    @
    .
    The parser is built using applicative style starting from a set of basic
    combinators. In this example, @hello@ is defined as an 'option' with a
    @String@ argument, while @quiet@ is a boolean 'flag' (called 'switch').
    .
    A parser can be used like this:
    .
    @
    greet :: Sample -> IO ()
    greet (Sample h False) = putStrLn $ \"Hello, \" ++ h
    greet _ = return ()
    .
    main :: IO ()
    main = execParser opts \>\>= greet
    &#x20; where
    &#x20;   opts = info (helper \<*\> sample)
    &#x20;     ( fullDesc
    &#x20;     & progDesc \"Print a greeting for TARGET\"
    &#x20;     & header \"hello - a test for optparse-applicative\" )
    @
    .
    The @greet@ function is the entry point of the program, while @opts@ is a
    complete description of the program, used when generating a help text. The
    'helper' combinator takes any parser, and adds a @help@ option to it (which
    always fails).
    .
    The @hello@ option in this example is mandatory (since it doesn't have a
    default value), so running the program without any argument will display a
    help text:
    .
 >hello - a test for optparse-applicative
 >
 >Usage: hello --hello TARGET [--quiet]
 >  Print a greeting for TARGET
 >
 >Available options:
 >  -h,--help                Show this help text
 >  --hello TARGET           Target for the greeting
 >  --quiet                  Whether to be quiet
    .
    containing a short usage summary, and a detailed list of options with
    descriptions.
license:             BSD3
license-file:        LICENSE
author:              Paolo Capriotti
maintainer:          p.capriotti@gmail.com
copyright:           (c) 2012  Paolo Capriotti <p.capriotti@gmail.com>
category:            System
build-type:          Simple
cabal-version:       >= 1.8
extra-source-files:  README.md
                     tests/Examples/Alternatives.hs
                     tests/Examples/Cabal.hs
                     tests/Examples/Commands.hs
                     tests/Examples/Hello.hs
                     tests/alt.err.txt
                     tests/cabal.err.txt
                     tests/commands.err.txt
                     tests/hello.err.txt
                     tests/nested.err.txt
homepage:            https://github.com/pcapriotti/optparse-applicative
bug-reports:         https://github.com/pcapriotti/optparse-applicative/issues

library
  exposed-modules:     Options.Applicative,
                       Options.Applicative.Arrows,
                       Options.Applicative.BashCompletion,
                       Options.Applicative.Builder,
                       Options.Applicative.Builder.Completer,
                       Options.Applicative.Common,
                       Options.Applicative.Extra,
                       Options.Applicative.Help,
                       Options.Applicative.Types,
                       Options.Applicative.Utils
  other-modules:       Options.Applicative.Internal
  build-depends:       base >= 4.5 && < 5,
                       transformers >= 0.2 && < 0.4,
                       process == 1.1.*
test-suite tests
  type:                exitcode-stdio-1.0
  hs-source-dirs:      tests
  main-is:             Tests.hs
  build-depends:       base == 4.*,
                       HUnit == 1.2.*,
                       optparse-applicative,
                       test-framework == 0.6.*,
                       test-framework-hunit == 0.2.*,
                       test-framework-th-prime == 0.0.*
