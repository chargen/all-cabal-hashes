name:                optparse-applicative
version:             0.11.0
synopsis:            Utilities and combinators for parsing command line options
description:
    Here is a simple example of an applicative option parser:
    .
    @
    data Sample = Sample
    &#x20; &#x7b; hello :: String
    &#x20; , quiet :: Bool &#x7d;
    .
    sample :: Parser Sample
    sample = Sample
    &#x20; \<$\> strOption
    &#x20;     ( long \"hello\"
    &#x20;    \<\> metavar \"TARGET\"
    &#x20;    \<\> help \"Target for the greeting\" )
    &#x20; \<*\> switch
    &#x20;     ( long \"quiet\"
    &#x20;    \<\> help \"Whether to be quiet\" )
    @
    .
    The parser is built using applicative style starting from a set of basic
    combinators. In this example, @hello@ is defined as an 'option' with a
    @String@ argument, while @quiet@ is a boolean 'flag' (called 'switch').
    .
    A parser can be used like this:
    .
    @
    greet :: Sample -> IO ()
    greet (Sample h False) = putStrLn $ \"Hello, \" ++ h
    greet _ = return ()
    .
    main :: IO ()
    main = execParser opts \>\>= greet
    &#x20; where
    &#x20;   opts = info (helper \<*\> sample)
    &#x20;     ( fullDesc
    &#x20;    \<\> progDesc \"Print a greeting for TARGET\"
    &#x20;    \<\> header \"hello - a test for optparse-applicative\" )
    @
    .
    The @greet@ function is the entry point of the program, while @opts@ is a
    complete description of the program, used when generating a help text. The
    'helper' combinator takes any parser, and adds a @help@ option to it (which
    always fails).
    .
    The @hello@ option in this example is mandatory (since it doesn't have a
    default value), so running the program without any argument will display a
    help text:
    .
 >hello - a test for optparse-applicative
 >
 >Usage: hello --hello TARGET [--quiet]
 >  Print a greeting for TARGET
 >
 >Available options:
 >  -h,--help                Show this help text
 >  --hello TARGET           Target for the greeting
 >  --quiet                  Whether to be quiet
    .
    containing a short usage summary, and a detailed list of options with
    descriptions.
license:             BSD3
license-file:        LICENSE
author:              Paolo Capriotti
maintainer:          paolo@capriotti.io
copyright:           (c) 2012-2014 Paolo Capriotti <paolo@capriotti.io>
category:            System
build-type:          Simple
cabal-version:       >= 1.8
extra-source-files:  CHANGELOG.md
                     README.md
                     tests/Examples/Alternatives.hs
                     tests/Examples/Cabal.hs
                     tests/Examples/Commands.hs
                     tests/Examples/Hello.hs
                     tests/Examples/Formatting.hs
                     tests/alt.err.txt
                     tests/cabal.err.txt
                     tests/commands.err.txt
                     tests/commands_header.err.txt
                     tests/commands_header_full.err.txt
                     tests/hello.err.txt
                     tests/formatting.err.txt
                     tests/nested.err.txt
                     tests/subparsers.err.txt
homepage:            https://github.com/pcapriotti/optparse-applicative
bug-reports:         https://github.com/pcapriotti/optparse-applicative/issues

source-repository head
  type:     git
  location: https://github.com/pcapriotti/optparse-applicative.git

library
  exposed-modules:     Options.Applicative,
                       Options.Applicative.Arrows,
                       Options.Applicative.BashCompletion,
                       Options.Applicative.Builder,
                       Options.Applicative.Builder.Completer,
                       Options.Applicative.Builder.Internal,
                       Options.Applicative.Common,
                       Options.Applicative.Extra,
                       Options.Applicative.Help,
                       Options.Applicative.Help.Pretty,
                       Options.Applicative.Help.Chunk,
                       Options.Applicative.Help.Core,
                       Options.Applicative.Help.Types,
                       Options.Applicative.Types,
                       Options.Applicative.Internal
  ghc-options:         -Wall
  build-depends:       base == 4.*,
                       transformers >= 0.2 && < 0.5,
                       transformers-compat == 0.3.*,
                       process >= 1.0 && < 1.3,
                       ansi-wl-pprint >= 0.6 && < 0.7


package-hashes:
    MD5:22cc74a30eab6ad7d635c43f759c55e8
    SHA1:a1e536284d2b51cf25c0e864314deb1d627d4e7b
    SHA256:95a05ee481f239f28a1f11e4297c6e23b839d3f07d59ce59e0fae2723aca751f
    SHA512:cefb170569bcd7de003ad06a2d4831484163bec92219401a118dbad6df106cd391cb48735851c55f84f8e8aa0fd13655aaea3398de2d49b44a45006d9989962f
    Skein512_512:24aa9d1f06a3abdadb678f2f8395a891edcb8445fe3e33b98b82a9a839a8cae4af68ea3cc4d72376520828ff9dac1c177f37f471c34f9bbb5d8aa1f36d2e8dad

package-locations:
    https://hackage.haskell.org/package/optparse-applicative-0.11.0/optparse-applicative-0.11.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/optparse-applicative-0.11.0.tar.gz

