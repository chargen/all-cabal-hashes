-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:9c36bc59d28980c58671d36326b4e06d
    SHA1:fb2bca62f6620ebab3ac51477a27be33e5bf55d4
    SHA256:5e1151ba2fbf9f90b53598b24c1b885ccda6ee714a15fef81f137d4ececbbcda
    SHA512:a1ff4a6cb372245f462498ea3efe9298dfd2438d317f9024ee2b74ece9edab42a606ae62b2b50365b242bdf8694d281fe8fa86a9820a4512a17a152543efce9d
    Skein512_512:40e3fe2442ec0a84b8f307c4da9d799098e9540a09698287a974504c719277584af0b25bec5615958a6284a0ab8bce3db249416490921946a54baee5e2054088

package-locations:
    https://hackage.haskell.org/package/optparse-applicative-0.9.0/optparse-applicative-0.9.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/optparse-applicative-0.9.0.tar.gz

package-size: 32133
-- END Added by all-cabal-hashes-tool

name:                optparse-applicative
version:             0.9.0
x-revision: 1
synopsis:            Utilities and combinators for parsing command line options
description:
    Here is a simple example of an applicative option parser:
    .
    @
    data Sample = Sample
    &#x20; &#x7b; hello :: String
    &#x20; , quiet :: Bool &#x7d;
    .
    sample :: Parser Sample
    sample = Sample
    &#x20; \<$\> strOption
    &#x20;     ( long \"hello\"
    &#x20;    \<\> metavar \"TARGET\"
    &#x20;    \<\> help \"Target for the greeting\" )
    &#x20; \<*\> switch
    &#x20;     ( long \"quiet\"
    &#x20;    \<\> help \"Whether to be quiet\" )
    @
    .
    The parser is built using applicative style starting from a set of basic
    combinators. In this example, @hello@ is defined as an 'option' with a
    @String@ argument, while @quiet@ is a boolean 'flag' (called 'switch').
    .
    A parser can be used like this:
    .
    @
    greet :: Sample -> IO ()
    greet (Sample h False) = putStrLn $ \"Hello, \" ++ h
    greet _ = return ()
    .
    main :: IO ()
    main = execParser opts \>\>= greet
    &#x20; where
    &#x20;   opts = info (helper \<*\> sample)
    &#x20;     ( fullDesc
    &#x20;    \<\> progDesc \"Print a greeting for TARGET\"
    &#x20;    \<\> header \"hello - a test for optparse-applicative\" )
    @
    .
    The @greet@ function is the entry point of the program, while @opts@ is a
    complete description of the program, used when generating a help text. The
    'helper' combinator takes any parser, and adds a @help@ option to it (which
    always fails).
    .
    The @hello@ option in this example is mandatory (since it doesn't have a
    default value), so running the program without any argument will display a
    help text:
    .
 >hello - a test for optparse-applicative
 >
 >Usage: hello --hello TARGET [--quiet]
 >  Print a greeting for TARGET
 >
 >Available options:
 >  -h,--help                Show this help text
 >  --hello TARGET           Target for the greeting
 >  --quiet                  Whether to be quiet
    .
    containing a short usage summary, and a detailed list of options with
    descriptions.
license:             BSD3
license-file:        LICENSE
author:              Paolo Capriotti
maintainer:          p.capriotti@gmail.com
copyright:           (c) 2012  Paolo Capriotti <p.capriotti@gmail.com>
category:            System
build-type:          Simple
cabal-version:       >= 1.8
extra-source-files:  CHANGELOG.md
                     README.md
                     tests/Examples/Alternatives.hs
                     tests/Examples/Cabal.hs
                     tests/Examples/Commands.hs
                     tests/Examples/Hello.hs
                     tests/Examples/Formatting.hs
                     tests/alt.err.txt
                     tests/cabal.err.txt
                     tests/commands.err.txt
                     tests/commands_header.err.txt
                     tests/commands_header_full.err.txt
                     tests/hello.err.txt
                     tests/formatting.err.txt
                     tests/nested.err.txt
homepage:            https://github.com/pcapriotti/optparse-applicative
bug-reports:         https://github.com/pcapriotti/optparse-applicative/issues

source-repository head
  type:     git
  location: https://github.com/pcapriotti/optparse-applicative.git

library
  exposed-modules:     Options.Applicative,
                       Options.Applicative.Arrows,
                       Options.Applicative.BashCompletion,
                       Options.Applicative.Builder,
                       Options.Applicative.Builder.Completer,
                       Options.Applicative.Builder.Internal,
                       Options.Applicative.Common,
                       Options.Applicative.Extra,
                       Options.Applicative.Help,
                       Options.Applicative.Help.Pretty,
                       Options.Applicative.Help.Chunk,
                       Options.Applicative.Help.Core,
                       Options.Applicative.Types,
                       Options.Applicative.Internal
  ghc-options:         -Wall
  build-depends:       base >= 4 && < 4.8,
                       transformers >= 0.2 && < 0.5,
                       transformers-compat == 0.3.*,
                       process >= 1.0 && < 1.3,
                       ansi-wl-pprint >= 0.6 && < 0.7
test-suite tests
  type:                exitcode-stdio-1.0
  hs-source-dirs:      tests
  main-is:             Tests.hs
  ghc-options:         -Wall -fno-warn-orphans
  build-depends:       base == 4.*,
                       HUnit == 1.2.*,
                       optparse-applicative,
                       QuickCheck >= 2.6 && < 2.8,
                       test-framework >= 0.6 && < 0.9,
                       test-framework-hunit >= 0.2 && < 0.4,
                       test-framework-quickcheck2 == 0.3.*,
                       test-framework-th-prime == 0.0.*
