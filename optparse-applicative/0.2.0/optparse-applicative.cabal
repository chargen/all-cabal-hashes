-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:c3e0b4aa7bd47d05ef8d4eb9ac9edd9a
    SHA1:a40cf3d49afdb697d0b8598e0a2a8c7fad3678a1
    SHA256:74169a47c8a1b9d27df1aa08c80e1e62aded77b1d09928ccfaeb45ac40a6aa43
    SHA512:685830d752b723a7617d537ea70dc72bcb03d1f46f7c3a9b40fffcd71888d9aacc22f8430c40bb86e617d8b1abd4dbe6ed19f1a4297690524f83339b68cff28d
    Skein512_512:f960df53480209d0afbed5642b2e6e475e1cb951c4cd81fae0350530a3451249f1ece2b5a6078a3fc9a41a22138e668c8d23328adfa38bd348700ad9c16ef417

package-locations:
    https://hackage.haskell.org/package/optparse-applicative-0.2.0/optparse-applicative-0.2.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/optparse-applicative-0.2.0.tar.gz

package-size: 16001
-- END Added by all-cabal-hashes-tool

name:                optparse-applicative
version:             0.2.0
synopsis:            Utilities and combinators for parsing command line options
description:
    Here is a simple example of an applicative option parser:
    .
    @
    data Sample = Sample
    &#x20; &#x7b; hello :: String
    &#x20; , quiet :: Bool &#x7d;
    .
    sample :: Parser Sample
    sample = Sample
    &#x20; \<$\> strOption
    &#x20;     ( long \"hello\"
    &#x20;     & metavar \"TARGET\"
    &#x20;     & help \"Target for the greeting\" )
    &#x20; \<*\> switch
    &#x20;     ( long \"quiet\"
    &#x20;     & help \"Whether to be quiet\" )
    @
    .
    The parser is built using applicative style starting from a set of basic
    combinators. In this example, @hello@ is defined as an 'option' with a
    @String@ argument, while @quiet@ is a boolean 'flag' (called 'switch').
    .
    A parser can be used like this:
    .
    @
    greet :: Sample -> IO ()
    greet (Sample h False) = putStrLn $ \"Hello, \" ++ h
    greet _ = return ()
    .
    main :: IO ()
    main = execParser opts \>\>= greet
    &#x20; where
    &#x20;   opts = info (helper \<*\> sample)
    &#x20;     ( fullDesc
    &#x20;     & progDesc \"Print a greeting for TARGET\"
    &#x20;     & header \"hello - a test for optparse-applicative\" )
    @
    .
    The @greet@ function is the entry point of the program, while @opts@ is a
    complete description of the program, used when generating a help text. The
    'helper' combinator takes any parser, and adds a @help@ option to it (which
    always fails).
    .
    The @hello@ option in this example is mandatory (since it doesn't have a
    default value), so running the program without any argument will display a
    help text:
    .
 >hello - a test for optparse-applicative
 >
 >Usage: hello --hello TARGET [--quiet]
 >  Print a greeting for TARGET
 >
 >Common options:
 >  -h,--help                Show this help text
 >  --hello TARGET           Target for the greeting
 >  --quiet                  Whether to be quiet
    .
    containing a short usage summary, and a detailed list of options with
    descriptions.
license:             BSD3
license-file:        LICENSE
author:              Paolo Capriotti
maintainer:          p.capriotti@gmail.com
copyright:           (c) 2012  Paolo Capriotti <p.capriotti@gmail.com>
category:            System
build-type:          Simple
cabal-version:       >= 1.8
extra-source-files:  README.md

library
  exposed-modules:     Options.Applicative,
                       Options.Applicative.Arrows,
                       Options.Applicative.Common,
                       Options.Applicative.Types,
                       Options.Applicative.Builder,
                       Options.Applicative.Utils,
                       Options.Applicative.Extra,
                       Options.Applicative.Help
  build-depends:       base == 4.*,
                       data-lens == 2.10.*,
                       data-default == 0.4.*,
                       transformers >= 0.2 && < 0.4
test-suite tests
  type:                exitcode-stdio-1.0
  hs-source-dirs:      tests
  main-is:             Tests.hs
  build-depends:       base == 4.*,
                       HUnit == 1.2.*,
                       optparse-applicative == 0.2.*,
                       test-framework == 0.6.*,
                       test-framework-hunit == 0.2.*,
                       test-framework-th-prime == 0.0.*
