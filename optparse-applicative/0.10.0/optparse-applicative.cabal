name:                optparse-applicative
version:             0.10.0
x-revision: 1
synopsis:            Utilities and combinators for parsing command line options
description:
    Here is a simple example of an applicative option parser:
    .
    @
    data Sample = Sample
    &#x20; &#x7b; hello :: String
    &#x20; , quiet :: Bool &#x7d;
    .
    sample :: Parser Sample
    sample = Sample
    &#x20; \<$\> strOption
    &#x20;     ( long \"hello\"
    &#x20;    \<\> metavar \"TARGET\"
    &#x20;    \<\> help \"Target for the greeting\" )
    &#x20; \<*\> switch
    &#x20;     ( long \"quiet\"
    &#x20;    \<\> help \"Whether to be quiet\" )
    @
    .
    The parser is built using applicative style starting from a set of basic
    combinators. In this example, @hello@ is defined as an 'option' with a
    @String@ argument, while @quiet@ is a boolean 'flag' (called 'switch').
    .
    A parser can be used like this:
    .
    @
    greet :: Sample -> IO ()
    greet (Sample h False) = putStrLn $ \"Hello, \" ++ h
    greet _ = return ()
    .
    main :: IO ()
    main = execParser opts \>\>= greet
    &#x20; where
    &#x20;   opts = info (helper \<*\> sample)
    &#x20;     ( fullDesc
    &#x20;    \<\> progDesc \"Print a greeting for TARGET\"
    &#x20;    \<\> header \"hello - a test for optparse-applicative\" )
    @
    .
    The @greet@ function is the entry point of the program, while @opts@ is a
    complete description of the program, used when generating a help text. The
    'helper' combinator takes any parser, and adds a @help@ option to it (which
    always fails).
    .
    The @hello@ option in this example is mandatory (since it doesn't have a
    default value), so running the program without any argument will display a
    help text:
    .
 >hello - a test for optparse-applicative
 >
 >Usage: hello --hello TARGET [--quiet]
 >  Print a greeting for TARGET
 >
 >Available options:
 >  -h,--help                Show this help text
 >  --hello TARGET           Target for the greeting
 >  --quiet                  Whether to be quiet
    .
    containing a short usage summary, and a detailed list of options with
    descriptions.
license:             BSD3
license-file:        LICENSE
author:              Paolo Capriotti
maintainer:          paolo@capriotti.io
copyright:           (c) 2012-2014 Paolo Capriotti <paolo@capriotti.io>
category:            System
build-type:          Simple
cabal-version:       >= 1.8
extra-source-files:  CHANGELOG.md
                     README.md
                     tests/Examples/Alternatives.hs
                     tests/Examples/Cabal.hs
                     tests/Examples/Commands.hs
                     tests/Examples/Hello.hs
                     tests/Examples/Formatting.hs
                     tests/alt.err.txt
                     tests/cabal.err.txt
                     tests/commands.err.txt
                     tests/commands_header.err.txt
                     tests/commands_header_full.err.txt
                     tests/hello.err.txt
                     tests/formatting.err.txt
                     tests/nested.err.txt
                     tests/subparsers.err.txt
homepage:            https://github.com/pcapriotti/optparse-applicative
bug-reports:         https://github.com/pcapriotti/optparse-applicative/issues

source-repository head
  type:     git
  location: https://github.com/pcapriotti/optparse-applicative.git

library
  exposed-modules:     Options.Applicative,
                       Options.Applicative.Arrows,
                       Options.Applicative.BashCompletion,
                       Options.Applicative.Builder,
                       Options.Applicative.Builder.Completer,
                       Options.Applicative.Builder.Internal,
                       Options.Applicative.Common,
                       Options.Applicative.Extra,
                       Options.Applicative.Help,
                       Options.Applicative.Help.Pretty,
                       Options.Applicative.Help.Chunk,
                       Options.Applicative.Help.Core,
                       Options.Applicative.Help.Types,
                       Options.Applicative.Types,
                       Options.Applicative.Internal
  ghc-options:         -Wall
  build-depends:       base >= 4 && < 4.8,
                       transformers >= 0.2 && < 0.5,
                       transformers-compat == 0.3.*,
                       process >= 1.0 && < 1.3,
                       ansi-wl-pprint >= 0.6 && < 0.7


package-hashes:
    MD5:042f883017e152f486329d4dd30f6908
    SHA1:50d4a82e30a431419bf5ab1f7abe62f15c1dcda1
    SHA256:8b75b521fa0518d91ee119ccfd48aa1b317df0d00a91e31d620022f67e361912
    SHA512:3660c797e113b52ceb71cfaf9c5c596f1fb529a3efe1429b162c3a5df20fa5de21b475093d2dd4f3ee60b145028c1c46c84de10eadd3a86448c0d0253117f007
    Skein512_512:1c48477f876b900a5a7d25b4c47d6ca630f9acac09b2b013ad487d03b0849fa6c06b210ce5d8de96172ca1e79fe1456eb53b80ff6d4cfe54e692243dd25cb756

package-locations:
    https://hackage.haskell.org/package/optparse-applicative-0.10.0/optparse-applicative-0.10.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/optparse-applicative-0.10.0.tar.gz

package-size: 29997
