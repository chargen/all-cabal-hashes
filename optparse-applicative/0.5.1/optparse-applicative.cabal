-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:47d0df1fb0f15e4d98fd8096116e3bc2
    SHA1:ef9841073b0d1fffb0af8be3dd6b2beb79292f55
    SHA256:e847d0e7414079fb8537b70fc1a3266e290c619723799e2eec731fda38d333fc
    SHA512:704b3d19fbeb9e1a08b84938c12d3e41e1368cff51a2d7d32bd3951ac2324f7b69e74fde92d73e0233ac0fce3c7ae7f0df46fb17779c42a524343a88b934ec44
    Skein512_512:27f1eea37f3be878e16eb28b51868b2f3fb3940492b23d802648e357b2beaa9d829fb3366749b49f1b9d275ec70d6b32e65b50ec1a588cabe12e3dfa54cad108

x-package-locations:
    https://hackage.haskell.org/package/optparse-applicative-0.5.1/optparse-applicative-0.5.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/optparse-applicative-0.5.1.tar.gz

x-package-size: 24055
-- END Added by all-cabal-hashes-tool

name:                optparse-applicative
version:             0.5.1
x-revision: 1
synopsis:            Utilities and combinators for parsing command line options
description:
    Here is a simple example of an applicative option parser:
    .
    @
    data Sample = Sample
    &#x20; &#x7b; hello :: String
    &#x20; , quiet :: Bool &#x7d;
    .
    sample :: Parser Sample
    sample = Sample
    &#x20; \<$\> strOption
    &#x20;     ( long \"hello\"
    &#x20;     & metavar \"TARGET\"
    &#x20;     & help \"Target for the greeting\" )
    &#x20; \<*\> switch
    &#x20;     ( long \"quiet\"
    &#x20;     & help \"Whether to be quiet\" )
    @
    .
    The parser is built using applicative style starting from a set of basic
    combinators. In this example, @hello@ is defined as an 'option' with a
    @String@ argument, while @quiet@ is a boolean 'flag' (called 'switch').
    .
    A parser can be used like this:
    .
    @
    greet :: Sample -> IO ()
    greet (Sample h False) = putStrLn $ \"Hello, \" ++ h
    greet _ = return ()
    .
    main :: IO ()
    main = execParser opts \>\>= greet
    &#x20; where
    &#x20;   opts = info (helper \<*\> sample)
    &#x20;     ( fullDesc
    &#x20;     & progDesc \"Print a greeting for TARGET\"
    &#x20;     & header \"hello - a test for optparse-applicative\" )
    @
    .
    The @greet@ function is the entry point of the program, while @opts@ is a
    complete description of the program, used when generating a help text. The
    'helper' combinator takes any parser, and adds a @help@ option to it (which
    always fails).
    .
    The @hello@ option in this example is mandatory (since it doesn't have a
    default value), so running the program without any argument will display a
    help text:
    .
 >hello - a test for optparse-applicative
 >
 >Usage: hello --hello TARGET [--quiet]
 >  Print a greeting for TARGET
 >
 >Available options:
 >  -h,--help                Show this help text
 >  --hello TARGET           Target for the greeting
 >  --quiet                  Whether to be quiet
    .
    containing a short usage summary, and a detailed list of options with
    descriptions.
license:             BSD3
license-file:        LICENSE
author:              Paolo Capriotti
maintainer:          p.capriotti@gmail.com
copyright:           (c) 2012  Paolo Capriotti <p.capriotti@gmail.com>
category:            System
build-type:          Simple
cabal-version:       >= 1.8
extra-source-files:  README.md
                     tests/Examples/Alternatives.hs
                     tests/Examples/Cabal.hs
                     tests/Examples/Commands.hs
                     tests/Examples/Hello.hs
                     tests/alt.err.txt
                     tests/cabal.err.txt
                     tests/commands.err.txt
                     tests/hello.err.txt
                     tests/nested.err.txt
homepage:            https://github.com/pcapriotti/optparse-applicative
bug-reports:         https://github.com/pcapriotti/optparse-applicative/issues

source-repository head
  type:     git
  location: https://github.com/pcapriotti/optparse-applicative.git

library
  exposed-modules:     Options.Applicative,
                       Options.Applicative.Arrows,
                       Options.Applicative.BashCompletion,
                       Options.Applicative.Builder,
                       Options.Applicative.Builder.Arguments,
                       Options.Applicative.Builder.Completer,
                       Options.Applicative.Builder.Internal,
                       Options.Applicative.Common,
                       Options.Applicative.Extra,
                       Options.Applicative.Help,
                       Options.Applicative.Types,
                       Options.Applicative.Utils
  other-modules:       Options.Applicative.Internal
  ghc-options:         -Wall
  build-depends:       base >= 4.5 && < 5,
                       transformers >= 0.2 && < 0.4,
                       process == 1.1.*
test-suite tests
  type:                exitcode-stdio-1.0
  hs-source-dirs:      tests
  main-is:             Tests.hs
  ghc-options:         -Wall
  build-depends:       base == 4.*,
                       HUnit == 1.2.*,
                       optparse-applicative,
                       test-framework >= 0.6 && < 0.9,
                       test-framework-hunit >= 0.2 && < 0.4,
                       test-framework-th-prime == 0.0.*
