-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:bde94fa687aaea3e1b2d2a18d6122e6f
    SHA1:8b10cdcb0e8e18350ce9c740a115a372c1769c13
    SHA256:66b0f32c45a0d69e8d95718d636849e6037d6ab5e50e52754b083c595dde13c1
    SHA512:5ceaaa535bfe27f3cdbb4b7c055eceef3da4a81480b2d730ab1f630490ea1ca99560a86750c130092bb22f4ab85f1392a6f5f300e07d308a906a2281d0db834e
    Skein512_512:4259dd9d43e765a840b057fd4e48f0652c0bcd3c974237920fadd56fa13bf0fac0fc8b8417d2f1e5619a1d7e362c166ffd4c36ef3cd8d3fda05a2ff8b5bfa307

package-locations:
    https://hackage.haskell.org/package/tfp-0.7/tfp-0.7.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/tfp-0.7.tar.gz

package-size: 14051
-- END Added by all-cabal-hashes-tool

name:           tfp
version:        0.7
build-type:     Simple
license:        BSD3
license-file:   LICENSE
copyright:      Copyright (c) 2013 Henning Thielemann, 2008 Peter Gavin
author:         Peter Gavin, Henning Thielemann
maintainer:     haskell@henning-thielemann.de
homepage:       http://www.haskell.org/haskellwiki/Type_arithmetic
stability:      alpha
synopsis:       Type-level integers, booleans, lists using type families
description:
  TFP is an abbreviation for Type Family Programming.
  It provides implementations of type-level integers and booleans,
  and (eventually) simple type-level data structures.
  It uses type families as functions to produce new types,
  which provides an intuitive way to parameterize data types
  and functions on numerical values at compile time.
category:       Type System
tested-with:    GHC == 7.4.2
cabal-version:  >= 1.6

source-repository head
  type:         darcs
  location:     http://code.haskell.org/~thielema/tfp/

source-repository this
  tag:          0.7
  type:         darcs
  location:     http://code.haskell.org/~thielema/tfp/


flag build-test
  description: Build the tfp-test test program
  default: False

library {
  extensions:     TypeFamilies, UndecidableInstances, TypeOperators,
                  EmptyDataDecls, DeriveDataTypeable, ScopedTypeVariables,
                  FlexibleInstances, TemplateHaskell, TypeSynonymInstances,
                  MultiParamTypeClasses, GeneralizedNewtypeDeriving,
                  Rank2Types, FlexibleContexts
  build-depends:  base >= 3.0 && < 5, template-haskell >= 2.0
  exposed-modules:
    Data.SizedInt
    Data.SizedWord
    Types
    Types.Base
    Types.Data.Bool
    Types.Data.Num
    Types.Data.Num.Ops
    Types.Data.Num.Decimal
    Types.Data.Num.Decimal.Literals
    Types.Data.Num.Decimal.Literals.TH
    Types.Data.Num.Decimal.Digits
    Types.Data.List
    Types.Data.Ord
  other-modules:
    Types.Data.Num.Decimal.Ops
}


executable tfp-test {
  if flag(build-test) {
    buildable: True
    build-depends:  base >= 3.0 && < 5, template-haskell >= 2.0, QuickCheck >= 1.2.0.0
  } else {
    buildable: False
  }
  extensions:     TypeFamilies, UndecidableInstances, TypeOperators,
                  EmptyDataDecls, DeriveDataTypeable, ScopedTypeVariables,
                  FlexibleInstances, TemplateHaskell, TypeSynonymInstances,
                  MultiParamTypeClasses, GeneralizedNewtypeDeriving,
                  FunctionalDependencies, Rank2Types, FlexibleContexts
  main-is: Test.hs
}
