-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:804bb8b7475d54233b8d22080c313e91
    SHA1:65f70f22b0a2b99f3d303bbca64f061e135add1b
    SHA256:6bde54a641076c3cc6adfdcf093e52bef27c66c03a073bab8ff444ef09fef7bb
    SHA512:00f59c3421fbea21a7b06216497d9dd5761dd747b48904b3efe48ae0fc01f732760ad6c219cf0d50f18d0e10c3d40882328685b8c407d446bb9bc831c9ececcf
    Skein512_512:73c555b4ad0e50ec360f222ba02fa6c3b16776f860597913e140425b63c27c99a3ac449063cac245636c2a33d4c5ad5b9ec4463c799442c340d35e2bd1ea9b7b

package-locations:
    https://hackage.haskell.org/package/tfp-0.3/tfp-0.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/tfp-0.3.tar.gz

package-size: 13111
-- END Added by all-cabal-hashes-tool

name:           tfp
version:        0.3
cabal-version:  >= 1.6
build-type:     Simple
license:        BSD3
license-file:   LICENSE
copyright:      Copyright (c) 2008 Peter Gavin
author:         Peter Gavin
maintainer:     pgavin@gmail.com
homepage:       http://abt12monk.org/git/tfp.git/
stability:      alpha
package-url:    http://abt12monk.org/git/tfp.git/
synopsis:       Type-level programming library using type families
description:	TFP (short for Type Family Programming) provides implementations of type-level integers and booleans,
		and (eventually) simple type-level data structures. It uses type families as functions to produce new types,
		which provides an intuitive way to parameterize data types and functions on numerical values at compile time.
category:       Data
tested-with:    GHC == 6.9.0

source-repository head {
  type:         git
  location:     http://abt12monk.org/git/tfp.git/
}

flag build-test
  description: Build the tfp-test test program
  default: False

library {
  extensions:     TypeFamilies, UndecidableInstances, TypeOperators,
                  EmptyDataDecls, DeriveDataTypeable, ScopedTypeVariables,
                  FlexibleInstances, TemplateHaskell, TypeSynonymInstances,
                  MultiParamTypeClasses, GeneralizedNewtypeDeriving,
                  Rank2Types, FlexibleContexts
  build-depends:  base >= 3.0 && < 5, template-haskell >= 2.0
  exposed-modules:
    Data.SizedInt,
    Data.SizedWord,
    Types,
    Types.Base,
    Types.Data.Bool,
    Types.Data.Num
    Types.Data.Num.Ops
    Types.Data.Num.Decimal,
    Types.Data.Num.Decimal.Literals
    Types.Data.Num.Decimal.Literals.TH
    Types.Data.Num.Decimal.Digits
    Types.Data.List,
    Types.Data.Ord
  other-modules:
    Types.Data.Num.Decimal.Ops
}


executable tfp-test {
  if flag(build-test) {
    buildable: True
  } else {
    buildable: False
  }
  extensions:     TypeFamilies, UndecidableInstances, TypeOperators,
                  EmptyDataDecls, DeriveDataTypeable, ScopedTypeVariables,
                  FlexibleInstances, TemplateHaskell, TypeSynonymInstances,
                  MultiParamTypeClasses, GeneralizedNewtypeDeriving,
                  FunctionalDependencies, Rank2Types, FlexibleContexts
  main-is: Test.hs
  build-depends:  base >= 3.0 && < 5, template-haskell >= 2.0, QuickCheck >= 1.2.0.0
}
