-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:f776bd26761fe273506b854a0f5e411a
    SHA1:ca29b698466eb03d372c650dbfa50b6c077bce85
    SHA256:c27aa982cee9d76a1f1b6cd35cfb31e07f78425206439a0b6da34dd15d0f0108
    SHA512:e6eeff1d17d0eb1fec8f0837bf6029bb84e1a75319b1b679bdf02c4fba7209e2d8a60861088c1f48c9df0a6111312fdb5e1f56f9f80ce966db8bb42af5a1453c
    Skein512_512:16f01b9b38185e518ab6aa5eb4f566ad72c9e5e80aa99cfdf7b5395125642540e524509586617b871ad042479b6063486577d644cc5e34c3d6d0c6cba367c030

x-package-locations:
    https://hackage.haskell.org/package/tfp-0.5/tfp-0.5.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/tfp-0.5.tar.gz

x-package-size: 13151
-- END Added by all-cabal-hashes-tool

name:           tfp
version:        0.5
cabal-version:  >= 1.6
build-type:     Simple
license:        BSD3
license-file:   LICENSE
copyright:      Copyright (c) 2008 Peter Gavin
author:         Peter Gavin
maintainer:     pgavin@gmail.com
homepage:       http://github.com/pgavin/tfp
stability:      alpha
package-url:    http://github.com/pgavin/tfp
synopsis:       Type-level programming library using type families
description:	TFP (short for Type Family Programming) provides implementations of type-level integers and booleans,
		and (eventually) simple type-level data structures. It uses type families as functions to produce new types,
		which provides an intuitive way to parameterize data types and functions on numerical values at compile time.
category:       Data
tested-with:    GHC == 6.9.0

source-repository head {
  type:         git
  location:     git@github.com:pgavin/tfp.git
}

flag build-test
  description: Build the tfp-test test program
  default: False

library {
  extensions:     TypeFamilies, UndecidableInstances, TypeOperators,
                  EmptyDataDecls, DeriveDataTypeable, ScopedTypeVariables,
                  FlexibleInstances, TemplateHaskell, TypeSynonymInstances,
                  MultiParamTypeClasses, GeneralizedNewtypeDeriving,
                  Rank2Types, FlexibleContexts
  build-depends:  base >= 3.0 && < 5, template-haskell >= 2.0
  exposed-modules:
    Data.SizedInt,
    Data.SizedWord,
    Types,
    Types.Base,
    Types.Data.Bool,
    Types.Data.Num
    Types.Data.Num.Ops
    Types.Data.Num.Decimal,
    Types.Data.Num.Decimal.Literals
    Types.Data.Num.Decimal.Literals.TH
    Types.Data.Num.Decimal.Digits
    Types.Data.List,
    Types.Data.Ord
  other-modules:
    Types.Data.Num.Decimal.Ops
}


executable tfp-test {
  if flag(build-test) {
    buildable: True
    build-depends:  base >= 3.0 && < 5, template-haskell >= 2.0, QuickCheck >= 1.2.0.0
  } else {
    buildable: False
  }
  extensions:     TypeFamilies, UndecidableInstances, TypeOperators,
                  EmptyDataDecls, DeriveDataTypeable, ScopedTypeVariables,
                  FlexibleInstances, TemplateHaskell, TypeSynonymInstances,
                  MultiParamTypeClasses, GeneralizedNewtypeDeriving,
                  FunctionalDependencies, Rank2Types, FlexibleContexts
  main-is: Test.hs
}
