-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:77a05f1a8e795d8407f04208bf62c317
    SHA1:82d6c291b323c33502d3fa5651efc1be8ba6dfd9
    SHA256:f73de19629393a636327e88404c53a769c19d562eca46bf1dbd5d6ec7a20b866
    SHA512:66533c07438cfef0966965383e7a5e9b50593ca9150074c312f84ed38fa04ad7c7ec47f0d4626ecf45793324b1afb49bc929cb619bd76ce07d0b290e773180a1
    Skein512_512:e8ec28cc7dc16493a952769286e662abbf0087f907e0c6779001605ad34f823fd47686e101e0ed078238fc33c10156bf9d3fec9366cd7464c127e86ac1198ef2

package-locations:
    https://hackage.haskell.org/package/tfp-0.8/tfp-0.8.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/tfp-0.8.tar.gz

package-size: 21983
-- END Added by all-cabal-hashes-tool

name:           tfp
version:        0.8
build-type:     Simple
license:        BSD3
license-file:   LICENSE
copyright:      Copyright (c) 2013 Henning Thielemann, 2008 Peter Gavin
author:         Peter Gavin, Henning Thielemann
maintainer:     haskell@henning-thielemann.de
homepage:       http://www.haskell.org/haskellwiki/Type_arithmetic
stability:      alpha
synopsis:       Type-level integers, booleans, lists using type families
description:
  TFP is an abbreviation for Type Family Programming.
  It provides implementations of type-level integers and booleans,
  and (eventually) simple type-level data structures.
  It uses type families as functions to produce new types,
  which provides an intuitive way to parameterize data types
  and functions on numerical values at compile time.
category:       Type System
tested-with:    GHC == 7.4.2, GHC == 7.6.3
cabal-version:  >= 1.14

source-repository head
  type:         darcs
  location:     http://code.haskell.org/~thielema/tfp/

source-repository this
  tag:          0.8
  type:         darcs
  location:     http://code.haskell.org/~thielema/tfp/


flag build-test
  description: Build the tfp-test test program
  default: False

library {
  default-language: Haskell2010
  build-depends:  base >= 3.0 && < 5
  ghc-options:    -Wall
  hs-source-dirs: src
  exposed-modules:
    Data.SizedInt
    Data.SizedWord
    Types
    Types.Base
    Types.Data.Bool
    Types.Data.Num
    Types.Data.Num.Ops
    Types.Data.Num.Decimal
    Types.Data.Num.Decimal.Literals
    Types.Data.Num.Decimal.Digits
    Types.Data.List
    Types.Data.Ord
  other-modules:
    Types.Data.Num.Decimal.Ops
}


executable tfp-test {
  if flag(build-test) {
    buildable: True
    build-depends:
      tfp,
      QuickCheck >= 1.2.0.0,
      base >= 3.0 && < 5
  } else {
    buildable: False
  }
  default-language: Haskell2010
  ghc-options:    -Wall
  main-is: Test.hs
  hs-source-dirs: test
}
