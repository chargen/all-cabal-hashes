-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:9ff24e9dbceb7ab1ee5d5098500d5c31
    SHA1:d2f6c998b52cad4589e82405fa311056b900a912
    SHA256:24a59eca48543669a5578dc664efd222320cc794e8fbab6e2559a82230b69794
    SHA512:d2d498f291dc9c448edfd561329dcbfcdc6f1e37e7a3289742c484ccd84abc41a2136ed6bb3be70d270ad6922d8f461a6eea26df75f304bd18c9d051eea95800
    Skein512_512:1023a5633d5acf5019cfdd443304c8aa0680fcdb76b94a13819a81b414c843d1a8b5cd268e56dfbb679667375de122859d3574318416750c436f402b38e7dba6

x-package-locations:
    https://hackage.haskell.org/package/leveldb-haskell-fork-0.3.1/leveldb-haskell-fork-0.3.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/leveldb-haskell-fork-0.3.1.tar.gz

x-package-size: 17423
-- END Added by all-cabal-hashes-tool

name:                leveldb-haskell-fork
version:             0.3.1
synopsis:            Haskell bindings to LevelDB
homepage:            http://github.com/kim/leveldb-haskell
bug-reports:         http://github.com/kim/leveldb-haskell/issues
license:             BSD3
license-file:        LICENSE
author:              Kim Altintop et.al. (see AUTHORS file)
maintainer:          kim.altintop@gmail.com
copyright:           Copyright (c) 2012-2014 The leveldb-haskell Authors
category:            Database, FFI
stability:           Experimental
build-type:          Simple
cabal-version:       >=1.10
tested-with:         GHC == 7.2.2, GHC == 7.4.1
description:
    From <http://leveldb.googlecode.com>:
    .
    LevelDB is a fast key-value storage library written at Google that provides
    an ordered mapping from string keys to string values.
    .
    .
    This library provides a Haskell language binding to LeveldDB. It is in very
    early stage and has seen very limited testing.
    .
    Note: as of v1.3, LevelDB can be built as a shared library. Thus, as of
    v0.1.0 of this library, LevelDB is no longer bundled and must be installed
    on the target system (version 1.7 or greater is required).

extra-source-files:  Readme.md, AUTHORS, CHANGELOG examples/*.hs

source-repository head
  type:     git
  location: git://github.com/kim/leveldb-haskell.git

Flag Examples
  description:      Build examples
  default:          False
  manual:           True

library
  exposed-modules:  Database.LevelDB
                  , Database.LevelDB.Base
                  , Database.LevelDB.C
                  , Database.LevelDB.Internal
                  , Database.LevelDB.Iterator
                  , Database.LevelDB.MonadResource
                  , Database.LevelDB.Types

  default-language: Haskell2010
  other-extensions: CPP
                  , ForeignFunctionInterface
                  , EmptyDataDecls
                  , RecordWildCards

  build-depends:    base >= 3 && < 5
                  , bytestring
                  , data-default
                  , filepath
                  , resourcet > 0.3.2
                  , transformers

  ghc-options:      -Wall -rtsopts -funbox-strict-fields
  ghc-prof-options: -prof -auto-all

  hs-source-dirs:   src

  extra-libraries:  leveldb

executable leveldb-example-comparator
  main-is:          comparator.hs

  default-language: Haskell2010

  build-depends:    base >= 3 && < 5
                  , transformers
                  , data-default
                  , leveldb-haskell

  ghc-options:      -Wall -Werror -O -rtsopts
  ghc-prof-options: -prof -auto-all

  hs-source-dirs:   examples

  if flag(Examples)
    buildable:      True
  else
    buildable:      False

executable leveldb-example-features
  main-is:          features.hs

  default-language: Haskell2010

  build-depends:    base >= 3 && < 5
                  , bytestring
                  , transformers
                  , resourcet > 0.3.2
                  , data-default
                  , leveldb-haskell

  ghc-options:      -Wall -Werror -O -rtsopts
  ghc-prof-options: -prof -auto-all

  hs-source-dirs:   examples

  if flag(Examples)
    buildable:      True
  else
    buildable:      False

executable leveldb-example-filterpolicy
  main-is:          filterpolicy.hs

  default-language: Haskell2010

  build-depends:    base >= 3 && < 5
                  , transformers
                  , data-default
                  , leveldb-haskell

  ghc-options:      -Wall -Werror -O -rtsopts
  ghc-prof-options: -prof -auto-all

  hs-source-dirs:   examples

  if flag(Examples)
    buildable:      True
  else
    buildable:      False

executable leveldb-example-iterforkio
  main-is:          iterforkio.hs

  default-language: Haskell2010

  build-depends:    base >= 3 && < 5
                  , async
                  , bytestring >= 0.10.4.0
                  , data-default
                  , leveldb-haskell

  ghc-options:      -Wall -Werror -O -rtsopts
  ghc-prof-options: -prof -auto-all

  hs-source-dirs:   examples

  if flag(Examples)
    buildable:      True
  else
    buildable:      False


test-suite tests
  ghc-options: -Wall
  main-is: tests.hs
  type: exitcode-stdio-1.0
  hs-source-dirs: tests
  build-depends:       base >= 3 && < 5,
                       leveldb-haskell,
                       hspec                >= 1.8,
                       process >= 1.1.0.2,
                       bytestring >= 0.10.4.0,
                       data-default,
                       transformers,
                       hspec-expectations,
                       QuickCheck,
                       mtl
  default-language:    Haskell2010
