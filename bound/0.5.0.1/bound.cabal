-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:a2ea1e048a1b38bc5dacfccc669086cf
    SHA1:3d4dc653c065ff47d25ba0ea5b447666ccc33ac5
    SHA256:c5ab453be47b31811c4b2c447a486818da945d824508c92cb3c34f6e29e3a1e9
    SHA512:fe23493b8ac9b0f47c85793c715a627dca386b1ac3c868a70e12615ded3f7399948e83db658fe282e8fa75c0b306d76ba1589af885b32f42c7b3061db732304a
    Skein512_512:2b3ca7bc3b7d75f25d20891354260eb08d4bff747ae47fdfe975a48aeb9231c0ca855f0548190be20598de478dda4e500244c2012b3656d11e05abaa4a641b73

package-locations:
    https://hackage.haskell.org/package/bound-0.5.0.1/bound-0.5.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/bound-0.5.0.1.tar.gz

package-size: 16120
-- END Added by all-cabal-hashes-tool

name:          bound
category:      Language, Compilers/Interpreters
version:       0.5.0.1
license:       BSD3
cabal-version: >= 1.9.2
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     experimental
homepage:      http://github.com/ekmett/bound/
bug-reports:   http://github.com/ekmett/bound/issues
copyright:     Copyright (C) 2012 Edward A. Kmett
synopsis:      Making de Bruijn Succ Less
description:
   We represent the target language itself as an ideal monad supplied by the
   user, and provide a 'Scope' monad transformer for introducing bound variables
   in user supplied terms. Users supply a 'Monad' and 'Traversable' instance,
   and we traverse to find free variables, and use the Monad to perform
   substitution that avoids bound variables.
   .
   Slides describing and motivating this approach to name binding are available 
   online at:
   .
   <http://www.slideshare.net/ekmett/bound-making-de-bruijn-succ-less>
   .
   The goal of this package is to make it as easy as possible to deal with name
   binding without forcing an awkward monadic style on the user.
   .
   With generalized de Bruijn term you can 'lift' whole trees instead of just
   applying 'succ' to individual variables, weakening the all variables bound
   by a scope and greatly speeding up instantiation. By giving binders more
   structure we permit easy simultaneous substitution and further speed up 
   instantiation.

build-type:    Simple
extra-source-files:
  .travis.yml
  examples/Simple.hs
  examples/Deriving.hs
  examples/Overkill.hs
  tests/doctests.hs
  README.markdown
  CHANGELOG.markdown

source-repository head
  type: git
  location: git://github.com/ekmett/bound.git

library
  hs-source-dirs: src

  exposed-modules:
    Bound
    Bound.Class
    Bound.Name
    Bound.Scope
    Bound.Term
    Bound.Var

  build-depends:
    base           >= 4   && < 5,
    bifunctors     == 3.0.*,
    comonad        == 3.0.*,
    prelude-extras >= 0.2 && < 0.3,
    transformers   >= 0.2 && < 0.4

  ghc-options: -Wall -O2 -fspec-constr -fdicts-cheap -funbox-strict-fields
  if impl(ghc>=7.4)
    build-depends: ghc-prim

-- Stating these, despite being more correct, causes spurious warnings to
-- end-users of older Cabal versions, so we don't.

--  other-extensions: CPP
--  if impl(ghc)
--    other-extensions: DeriveDataTypeable
--  if impl(ghc>=7.4)
--    other-extensions: DeriveGeneric DefaultSignatures

test-suite Simple
  type: exitcode-stdio-1.0
  main-is: Simple.hs
  hs-source-dirs: examples
  ghc-options -Wall -threaded
  if impl(ghc<7.6.1)
    ghc-options: -Werror
  build-depends:
    base,
    bound,
    prelude-extras,
    transformers

-- Verify the results of the examples
test-suite doctests
  type:    exitcode-stdio-1.0
  main-is: doctests.hs
  hs-source-dirs: tests
  ghc-options: -Wall -threaded
  if impl(ghc<7.6.1)
    ghc-options: -Werror
  build-depends:
    base,
    directory >= 1.0 && < 1.3,
    doctest   >= 0.9 && < 0.10,
    filepath,
    vector    == 0.9.*
