-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:b3b8455fb6368da5c266ac8b2f209fa8
    SHA1:18538082a2fb72d8f07b5a40f9381a77c8f8d2ec
    SHA256:e8f3dc41ab53da8f7005302e212ace96a7b09b9881a8f8d88d429a6eada15c64
    SHA512:be98e237a6d53d3aa944df0c90a38368659364828666b18b3d85ce5b54fcc24ece25adb7976d91aa10eeb72fe6a89956cb30a510d188afe2e0bc830cbf0b6443
    Skein512_512:93ea6819223c99c9b39d8cfc33d6b2ceac36afca6b40848f72ff561c7081ea9514e4ec884666e44f5b922803451ef9dce7c5f8c8018db57cd0ff852ff0fb80c4

package-locations:
    https://hackage.haskell.org/package/bound-0.7/bound-0.7.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/bound-0.7.tar.gz

package-size: 19115
-- END Added by all-cabal-hashes-tool

name:          bound
category:      Language, Compilers/Interpreters
version:       0.7
license:       BSD3
cabal-version: >= 1.9.2
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     experimental
homepage:      http://github.com/ekmett/bound/
bug-reports:   http://github.com/ekmett/bound/issues
copyright:     Copyright (C) 2012 Edward A. Kmett
synopsis:      Making de Bruijn Succ Less
build-type:    Custom
description:
   We represent the target language itself as an ideal monad supplied by the
   user, and provide a 'Scope' monad transformer for introducing bound variables
   in user supplied terms. Users supply a 'Monad' and 'Traversable' instance,
   and we traverse to find free variables, and use the Monad to perform
   substitution that avoids bound variables.
   .
   Slides describing and motivating this approach to name binding are available 
   online at:
   .
   <http://www.slideshare.net/ekmett/bound-making-de-bruijn-succ-less>
   .
   The goal of this package is to make it as easy as possible to deal with name
   binding without forcing an awkward monadic style on the user.
   .
   With generalized de Bruijn term you can 'lift' whole trees instead of just
   applying 'succ' to individual variables, weakening the all variables bound
   by a scope and greatly speeding up instantiation. By giving binders more
   structure we permit easy simultaneous substitution and further speed up 
   instantiation.

extra-source-files:
  .travis.yml
  .ghci
  .gitignore
  .vim.custom
  examples/Simple.hs
  examples/Deriving.hs
  examples/Overkill.hs
  tests/doctests.hs
  travis/cabal-apt-install
  travis/config
  README.markdown
  CHANGELOG.markdown

source-repository head
  type: git
  location: git://github.com/ekmett/bound.git

library
  hs-source-dirs: src

  exposed-modules:
    Bound
    Bound.Class
    Bound.Name
    Bound.Scope
    Bound.Term
    Bound.Var

  build-depends:
    base            >= 4   && < 5,
    bifunctors      >= 3   && < 4,
    comonad         >= 3   && < 4,
    hashable        >= 1.1 && < 1.3,
    hashable-extras >= 0.1 && < 1,
    prelude-extras  >= 0.3 && < 1,
    profunctors     >= 3.3 && < 4,
    transformers    >= 0.2 && < 0.4

  ghc-options: -Wall -O2 -fspec-constr -fdicts-cheap -funbox-strict-fields
  if impl(ghc>=7.4)
    build-depends: ghc-prim

test-suite Simple
  type: exitcode-stdio-1.0
  main-is: Simple.hs
  hs-source-dirs: examples
  ghc-options -Wall -threaded
  if impl(ghc<7.6.1)
    ghc-options: -Werror
  build-depends:
    base,
    bound,
    prelude-extras,
    transformers

test-suite doctests
  type:    exitcode-stdio-1.0
  main-is: doctests.hs
  hs-source-dirs: tests
  ghc-options: -Wall -threaded
  if impl(ghc<7.6.1)
    ghc-options: -Werror
  build-depends:
    base,
    directory >= 1.0 && < 1.3,
    doctest   >= 0.9 && < 0.10,
    filepath,
    vector    >= 0.9 && < 0.11
