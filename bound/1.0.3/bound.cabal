-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:b2c5d00c9dfd35133b368eba78557dc5
    SHA1:576443ec8109e6fec91383058408fbac4405c88f
    SHA256:5801dbde61393002e595627a9b2ccce96562f365c5bcf3f26c9fa67810eecc59
    SHA512:dea2c3880e378128a8bbb5d341fed4b677cee30c95c6cb73fb0e72d8a0831b2b4ad17073ddb9524f0ab6f43acc30de37ba4ec69e3d3f546d3f50ae88a76c2cd1
    Skein512_512:2d37fd847c124c31f67f11254843cb9c0aa60618903722c27db7d04e62094ea11697887849ae47e7948c4a9fdef262fe3ea63fa2bbae2ddcec3ef719c10c837c

x-package-locations:
    https://hackage.haskell.org/package/bound-1.0.3/bound-1.0.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/bound-1.0.3.tar.gz

x-package-size: 22094
-- END Added by all-cabal-hashes-tool

name:          bound
category:      Language, Compilers/Interpreters
version:       1.0.3
license:       BSD3
cabal-version: >= 1.9.2
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     experimental
homepage:      http://github.com/ekmett/bound/
bug-reports:   http://github.com/ekmett/bound/issues
copyright:     Copyright (C) 2012-2013 Edward A. Kmett
synopsis:      Making de Bruijn Succ Less
build-type:    Custom
description:
   We represent the target language itself as an ideal monad supplied by the
   user, and provide a 'Scope' monad transformer for introducing bound variables
   in user supplied terms. Users supply a 'Monad' and 'Traversable' instance,
   and we traverse to find free variables, and use the Monad to perform
   substitution that avoids bound variables.
   .
   Slides describing and motivating this approach to name binding are available 
   online at:
   .
   <http://www.slideshare.net/ekmett/bound-making-de-bruijn-succ-less>
   .
   The goal of this package is to make it as easy as possible to deal with name
   binding without forcing an awkward monadic style on the user.
   .
   With generalized de Bruijn term you can 'lift' whole trees instead of just
   applying 'succ' to individual variables, weakening the all variables bound
   by a scope and greatly speeding up instantiation. By giving binders more
   structure we permit easy simultaneous substitution and further speed up 
   instantiation.

extra-source-files:
  .travis.yml
  .ghci
  .gitignore
  .vim.custom
  examples/Simple.hs
  examples/Deriving.hs
  examples/Overkill.hs
  tests/doctests.hs
  travis/cabal-apt-install
  travis/config
  README.markdown
  CHANGELOG.markdown
  AUTHORS.markdown

source-repository head
  type: git
  location: git://github.com/ekmett/bound.git

library
  hs-source-dirs: src

  exposed-modules:
    Bound
    Bound.Class
    Bound.Name
    Bound.Scope
    Bound.Scope.Simple
    Bound.Term
    Bound.Var

  build-depends:
    base            >= 4       && < 5,
    bifunctors      >= 3       && < 5,
    binary          >= 0.5     && < 0.8,
    bytes           >= 0.4     && < 1,
    cereal          >= 0.3.5.2 && < 0.5,
    comonad         >= 3       && < 5,
    hashable        >= 1.1     && < 1.3,
    hashable-extras >= 0.1     && < 1,
    prelude-extras  >= 0.3     && < 1,
    profunctors     >= 3.3     && < 5,
    transformers    >= 0.2     && < 0.4

  ghc-options: -Wall -O2 -fspec-constr -fdicts-cheap -funbox-strict-fields

  if impl(ghc >=7.4 && < 7.6)
    build-depends: ghc-prim

test-suite Simple
  type: exitcode-stdio-1.0
  main-is: Simple.hs
  hs-source-dirs: examples
  ghc-options -Wall -threaded
  if impl(ghc<7.6.1)
    ghc-options: -Werror
  build-depends:
    base,
    bound,
    prelude-extras,
    transformers

test-suite doctests
  type:    exitcode-stdio-1.0
  main-is: doctests.hs
  hs-source-dirs: tests
  ghc-options: -Wall -threaded
  if impl(ghc<7.6.1)
    ghc-options: -Werror
  build-depends:
    base,
    directory >= 1.0 && < 1.3,
    doctest   >= 0.9 && < 0.10,
    filepath,
    vector    >= 0.9 && < 0.11
