-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:f95e2fcf578fcd8b64c0b1f504e88ae3
    SHA1:a9a0313f0bd93b4c9b8bc3f38518ac22004dc165
    SHA256:ba25c99e56ae4df2edf3d9a1ed2367182180ba6314c40a99ded3a32d9a0d3c07
    SHA512:9d07fb9b4fcbff4051a27e526bb567f8d416b7485b5739c93606d314ca5ee461dcf46511aec93a3d6a3256e4ddbdb5de46d21be3ea01e001e8d6082f6f1c2bd2
    Skein512_512:e33edb76320b94981e29848db371cbf5bb5b9da41f401cfef9dc7028832d1ec52bcf4aa95b90983b7f88cf8dc3f315a512600f3b76bf0fa3f06651c001277e91

package-locations:
    https://hackage.haskell.org/package/memscript-0.0.1.1/memscript-0.0.1.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/memscript-0.0.1.1.tar.gz

package-size: 17292
-- END Added by all-cabal-hashes-tool

Name:                memscript
Synopsis:            Command line utility for memorizing scriptures or any other text
Version:             0.0.1.1
Homepage:            http://hackage.haskell.org/cgi-bin/hackage-scripts/package/memscript
Category:            Education
License:             GPL
License-file:        LICENSE
Author:              Ahn, Ki Yung
Maintainer:          Ahn, Ki Yung <kya@pdx.edu>
Build-Type:          Simple
Cabal-Version:       >=1.2
extra-source-files:  README

Description: "memscript <filename>"

  Run memscript with a UTF-8 (or ASCII since ASCII is a subset of UTF8) 
  plain text file.  Try to exactly guess the text line by line.  If
  your guess is wrong it will show you a diff like output comparing
  your guess and the original verse.  This will repeat until you get
  all the verses right.
  
  For the test data I included four beloved Psalms (1,23,121,127)
  from the Old Testament, each in Revised Korean Version (RKV) and
  New International Version (NIV), which I happened to have had to
  memorize.  You can use it for any other text you'd want to memorize,
  such as your favorite poems, quotes, or whatsoever.
  
  No craft or ticks, really simple and straightforward utility but
  serves well for the purpose.  I used readline because that was
  the only sane way I know of handling multibyte inputs.

  This update of the version is simply because there has been 
  some changes in the System.IO library, fixing the problem of
  handling multibyte characters becaus of the library update
  (no need to use System.IO.UTF8 any more).

Data-files:
  001en.txt
  001ko.txt
  023en.txt
  023ko.txt
  121en.txt
  121ko.txt  
  127en.txt
  127ko.txt

Executable memscript
  main-is: MemScript.hs
  build-depends: base >= 4 && < 6, readline, utf8-string
  ghc-options: -Wall -O2


