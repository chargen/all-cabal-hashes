-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:3e769a892bc6245a738abf5c816b2eb2
    SHA1:3e049a683ec2f65197fc3a728565f171f1aad087
    SHA256:4b56f120da87899fe7c284554ef1bb225f9356b5cae49f4657bd122cdb7e756d
    SHA512:1518e597a49097639eb73d6f51eeda8fe2946bb014156197bd8e7ed83ebe4d5f4c7f294e0478dd4a209ad4037e50907666f7b0068e3d0a5740d26fe67d26e0d2
    Skein512_512:c89c6d2ce829070e84e93bb3d5d52666345cf3b01e11ce44dcd0e2c6748937e76fbc0059e3db0c1b2e95e276854c9f40f84fc6daee85aeafe01d17a41939a15c

package-locations:
    https://hackage.haskell.org/package/memscript-0.0.2.0/memscript-0.0.2.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/memscript-0.0.2.0.tar.gz

package-size: 16711
-- END Added by all-cabal-hashes-tool

Name:                memscript
Synopsis:            Command line utility for memorizing scriptures or any other text
Version:             0.0.2.0
Homepage:            http://hackage.haskell.org/cgi-bin/hackage-scripts/package/memscript
Category:            Education
License:             GPL
License-file:        LICENSE
Author:              Ahn, Ki Yung
Maintainer:          Ahn, Ki Yung <kya@pdx.edu>
Build-Type:          Simple
Cabal-Version:       >=1.2
extra-source-files:  README

Description: "memscript <filename>"

  Run memscript with a UTF-8 (or ASCII since ASCII is a subset of UTF8) 
  plain text file.  Try to exactly guess the text line by line.  If
  your guess is wrong it will show you a diff like output comparing
  your guess and the original verse.  This will repeat until you get
  all the verses right.
  
  For the test data I included four beloved Psalms (1,23,121,127)
  from the Old Testament, each in Revised Korean Version (RKV) and
  New International Version (NIV), which I happened to have had to
  memorize.  You can use it for any other text you'd want to memorize,
  such as your favorite poems, quotes, or whatsoever.
  
  No craft or ticks, really simple and straightforward utility but
  serves well for the purpose.  I used readline because that was
  the only sane way I know of handling multibyte inputs.

  This update of the version is simply because there has been 
  some changes in the System.IO library, fixing the problem of
  handling multibyte characters becaus of the library update
  (no need to use utf8-string any more).

Data-files:
  001en.txt
  001ko.txt
  023en.txt
  023ko.txt
  121en.txt
  121ko.txt  
  127en.txt
  127ko.txt

Executable memscript
  main-is: MemScript.hs
  build-depends: base >= 4 && < 6, readline
  ghc-options: -Wall -O2


