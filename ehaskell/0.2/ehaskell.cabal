-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:3f38bea83f4a9512cda39aaa03409cc1
    SHA1:c39ab0d292d44b57f6ea5cbfdbfaf1917ed8fe65
    SHA256:0953825d42f395341698a3ea65de9d0a81a83bf6f82668df032a700642e62657
    SHA512:7e3807a10be8234c8e58946015732d131e9765c868fa361608cf7033c758fe7c8811c8675467095fe1a28d63b1f3f21f2c088a9f54ab3f76cbc7f5f14f0749d4
    Skein512_512:d1cea21d5b577656dd0c6bce3fb80aab24ddb88e3e7c31e9368777aa6d9ada5bf6fbce54864e493b4e9edac6a417c223e110e5b4619d8f2cdd51d0d088ee9b2f

package-locations:
    https://hackage.haskell.org/package/ehaskell-0.2/ehaskell-0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/ehaskell-0.2.tar.gz

package-size: 14999
-- END Added by all-cabal-hashes-tool

Name:		ehaskell
Version:	0.2
Cabal-Version:	>= 1.2
Build-Type:	Simple
License:	GPL
License-File:	LICENSE
Stability:	experimental
Author:		Yoshikuni Jujo <PAF01143@nifty.ne.jp>
Maintainer:	PAF01143@nifty.ne.jp
Category:	Code Generation
Homepage:	http://homepage3.nifty.com/salamander/second/projects/ehaskell/index.xhtml
Synopsis:	like eruby, ehaskell is embedded haskell.
Description:	You can embed haskell in Text file.
                You can use in html, haskell source, and so on.
		.
		> <%%   ... %%> : <%% import Some.Module %%> <%% h = "hello" %%>
		> <%    ...  %> : <% ln <- getLine %>
		> <%    ... -%> ... <%- ... -%> ... <%- ... %>: <% if b then -%>Yes<%- else -%>No<%-%>
		> <%=   ...  %> : <%= "hello" %>
		> <%==  ...  %> : <%== getLine %>
		> <%=$  ...  %> : <%=$ 123 %>
		> <%==$ ...  %> : <%==$ getClockTime %>
		.
		You can put code at top level by \<%% ... %%\>.
		.
		You can put code in do-notation by \<% ... %\>.
		.
		You can get args by \<% ... -%\> ... \<%- ... -%\> ... \<%- ... %\>.
		.
		If you write \<% func -%\>abc\<%- def -%\>ghi\<% jkl %\>mno\<%- pqr %\>,
		.
		translate in "func (putStr "abc") def (putStr "ghi") jkl (putStr "mno") pqr"
		and execute.
		.
		You can put dinamic String by \<%== .. %\>.
		.
		And rests (\<%= ... %\>, \<%==$ ... %\>, \<%=$ ... %\>) are just syntax sugar.
		.
		\<%= some %\>   == \<%== return some %\>
		.
		\<%==$ some %\> == \<%== some \>\>= return . show %\>
		.
		\<%=$ some %\>  == \<%== return $ show some %\>

Executable ehs
  Main-Is:		Main.hs
  Build-Depends:	base, mtlparse >= 0.0.1, yjtools >= 0.7, directory, regexpr >= 0.3.3, process
  GHC-Options:		-Wall
