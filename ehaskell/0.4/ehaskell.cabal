-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:d3a7aa7fc6c5c277849734ddc91502c2
    SHA1:80f63d28e39c37616a44855059e41ae76f213751
    SHA256:c032ac8773d32d86e0d646e5e167f55fba737cf46cdb35ba477e2175b5b37c59
    SHA512:2d897c1cc60a49d7249178521dffc5ef01f5566df49e51e5d7bf33a0cc2fca97b08a2c0620f10d98626dd987ade0bfa8bc782d351ed47ab64e8e25323faefa01
    Skein512_512:c9eb019df8de86cc228cc5079c8bcfb3ec15b2e0d036d366b000a5f4ed385082c89aad7184e66eb2c501dd023e6d39b90c78033a9ca7c7d19800738528908b05

x-package-locations:
    https://hackage.haskell.org/package/ehaskell-0.4/ehaskell-0.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/ehaskell-0.4.tar.gz

x-package-size: 15282
-- END Added by all-cabal-hashes-tool

Name:		ehaskell
Version:	0.4
Cabal-Version:	>= 1.2
Build-Type:	Simple
License:	GPL
License-File:	LICENSE
Stability:	experimental
Author:		Yoshikuni Jujo <PAF01143@nifty.ne.jp>
Maintainer:	PAF01143@nifty.ne.jp
Category:	Text
Homepage:	http://homepage3.nifty.com/salamander/second/projects/ehaskell/index.xhtml
Synopsis:	like eruby, ehaskell is embedded haskell.
Description:	You can embed haskell in Text file.
                You can use in html, haskell source, and so on.
		.
		> <%%   ... %%> : <%% import Some.Module %%> <%% h = "hello" %%>
		> <%    ...  %> : <% ln <- getLine %>
		> <%    ... -%> ... <%- ... -%> ... <%- ... %>: <% if b then -%>Yes<%- else -%>No<%-%>
		> <%=   ...  %> : <%= "hello" %>
		> <%==  ...  %> : <%== getLine %>
		> <%=$  ...  %> : <%=$ 123 %>
		> <%==$ ...  %> : <%==$ getClockTime %>
		.
		You can put code at top level by \<%% ... %%\>.
		.
		You can put code in do-notation by \<% ... %\>.
		.
		You can get args by \<% ... -%\> ... \<%- ... -%\> ... \<%- ... %\>.
		.
		If you write \<% func -%\>abc\<%- def -%\>ghi\<% jkl %\>mno\<%- pqr %\>,
		.
		translate in "func (putStr "abc") def (putStr "ghi") jkl (putStr "mno") pqr"
		and execute.
		.
		You can put dinamic String by \<%== .. %\>.
		.
		And rests (\<%= ... %\>, \<%==$ ... %\>, \<%=$ ... %\>) are just syntax sugar.
		.
		\<%= some %\>   == \<%== return some %\>
		.
		\<%==$ some %\> == \<%== some \>\>= return . show %\>
		.
		\<%=$ some %\>  == \<%== return $ show some %\>

Executable ehs
  Main-Is:		Main.hs
  Build-Depends:	base, mtlparse >= 0.0.1, yjtools >= 0.8, directory, regexpr >= 0.3.3, process, filepath, utf8-string
  GHC-Options:		-Wall
