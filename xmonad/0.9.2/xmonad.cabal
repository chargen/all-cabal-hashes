-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:5a4117f798664d772d2a834ea6c90f1c
    SHA1:6f05248225f5e6ffd77780ce1c2c2a11300e0b7b
    SHA256:adcda3f5b7a59fb1fa4f7f48e8c4eb0599642e7d215b013fb072f98aef98851f
    SHA512:8ea378fe73d8314992b52ce282c6cdf040b92dd1714ed210c498343a75639d86578f30e4911a6bc435ca2763f9d750b4993e5f9553bef5d85d4915c9eda95b6f
    Skein512_512:7545d298c9f2eac8d5a70cacb3e9f890b40fdb4d53087265b36ac9f991dce8270a2989fd4e4599d1ce51aecf880e166507c79d024d3a2dd16d140df0af4db786

package-locations:
    https://hackage.haskell.org/package/xmonad-0.9.2/xmonad-0.9.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/xmonad-0.9.2.tar.gz

package-size: 56974
-- END Added by all-cabal-hashes-tool

name:               xmonad
version:            0.9.2
homepage:           http://xmonad.org
synopsis:           A tiling window manager
description:
    xmonad is a tiling window manager for X. Windows are arranged
    automatically to tile the screen without gaps or overlap, maximising
    screen use. All features of the window manager are accessible from
    the keyboard: a mouse is strictly optional. xmonad is written and
    extensible in Haskell. Custom layout algorithms, and other
    extensions, may be written by the user in config files. Layouts are
    applied dynamically, and different layouts may be used on each
    workspace. Xinerama is fully supported, allowing windows to be tiled
    on several screens.
category:           System
license:            BSD3
license-file:       LICENSE
author:             Spencer Janssen
maintainer:         xmonad@haskell.org
extra-source-files: README TODO CONFIG STYLE tests/loc.hs tests/Properties.hs
                    man/xmonad.1.markdown man/xmonad.1 man/xmonad.1.html
                    util/GenerateManpage.hs
cabal-version:      >= 1.2
build-type:         Simple
tested-with:        GHC == 6.12.3, GHC == 6.10.4, GHC == 7.0.1

data-files:         man/xmonad.hs

flag small_base
    description: Choose the new smaller, split-up base package.

flag testing
    description: Testing mode, only build minimal components
    default: False

library
    exposed-modules:    XMonad
                        XMonad.Main
                        XMonad.Core
                        XMonad.Config
                        XMonad.Layout
                        XMonad.ManageHook
                        XMonad.Operations
                        XMonad.StackSet

    if flag(small_base)
        build-depends: base < 5 && >=3, containers, directory, process, filepath, extensible-exceptions
    else
        build-depends: base < 3
    build-depends: X11>=1.5.0.0 && < 1.6, mtl, unix

    if true
        ghc-options:        -funbox-strict-fields -Wall

    if impl(ghc >= 6.12.1)
        ghc-options:        -fno-warn-unused-do-bind

    ghc-prof-options:   -prof -auto-all
    extensions:         CPP

    if flag(testing)
        buildable: False

executable xmonad
    main-is:            Main.hs
    other-modules:      XMonad
                        XMonad.Main
                        XMonad.Core
                        XMonad.Config
                        XMonad.Layout
                        XMonad.ManageHook
                        XMonad.Operations
                        XMonad.StackSet

    if true 
        ghc-options:    -funbox-strict-fields -Wall

    if impl(ghc >= 6.12.1)
        ghc-options:    -fno-warn-unused-do-bind

    ghc-prof-options:   -prof -auto-all
    extensions:         CPP

    if flag(testing)
        cpp-options:    -DTESTING
        hs-source-dirs: . tests/
        build-depends:  QuickCheck < 2
        ghc-options:    -Werror
    if flag(testing) && flag(small_base)
        build-depends:  filepath, process, directory, mtl, unix, X11, base, containers, random, extensible-exceptions
