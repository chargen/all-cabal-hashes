-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:4ab3df6176613223631a9af945495072
    SHA1:fa4049b8f93684a9bfccb00e62d278d51d5ac24e
    SHA256:a5470df3e425695e67d71e9d83dae6e4998c4c9e2976853d4b21b951302841cc
    SHA512:faf8c1477e97311b7b39d6cbc5a723fd419abb24cd96fa3ebeca528a980d9d0c51d87a55a060309d34334e8a2a814414301fcc17932105e33d2a0c955295a9d9
    Skein512_512:9cc02b4a1c702d36dceb9e28074e0d82e6fe8b43d8ac46aa91336ef2665e7e35e85d9c388fbcc1eeb62a5b10be1106b4a2991739339b7ae2d7cb349f53fc92da

package-locations:
    https://hackage.haskell.org/package/ghc-vis-0.3.1/ghc-vis-0.3.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/ghc-vis-0.3.1.tar.gz

package-size: 16751
-- END Added by all-cabal-hashes-tool

name:               ghc-vis
version:            0.3.1
license:            BSD3
license-file:       LICENSE
category:           GHC, Debug, Development
cabal-version:      >= 1.10
build-type:         Custom
author:             Dennis Felsing <dennis@felsin9.de>
maintainer:         Dennis Felsing <dennis@felsin9.de>
homepage:           http://felsin9.de/nnis/ghc-vis
copyright:          Dennis Felsing 2012
synopsis:           Live visualization of data structures in GHCi
description:        Visualize live data structures in GHCi. Evaluation is not
                    forced and you can interact with the visualized data
                    structures. This allows seeing Haskell's lazy evaluation
                    and sharing in action.
                    .
                    To use this package add the accompanying @ghci@ file to
                    your @.ghci@ like this:
                    .
                    > echo ":script $HOME/.cabal/share/ghc-vis-0.3.1/ghci" >> ~/.ghci
                    .
                    Now you can run ghci and experiment with @ghc-vis@. Start
                    the visualization:
                    .
                    > $ ghci
                    > GHCi, version 7.4.2: http://www.haskell.org/ghc/  :? for help
                    > > :vis
                    .
                    A blank window should appear now. This is the visualization
                    window. Add an expression to the visualization:
                    .
                    > > let a = [1..3]
                    > > :view a
                    > > let b = cycle a
                    > > :view b
                    > > :view "foo" ++ "bar"
                    .
                    <http://felsin9.de/nnis/ghc-vis/1.png>
                    .
                    Functions are red, named objects are green and links to an
                    already shown object are blue.
                    .
                    Notice how @a@ is referenced by @b@.
                    .
                    Evaluate an object that is shown in the visualization. You
                    can also click on the object to evaluate it.
                    .
                    > > :eval t1
                    .
                    <http://felsin9.de/nnis/ghc-vis/2.png>
                    .
                    The first element of @b@ has been evaluated. We see that
                    it's a reference to the value that's also referenced in a,
                    as they share the same name "t0".
                    .
                    Switch between the list view and the graph view:
                    .
                    > > :switch
                    .
                    <http://felsin9.de/nnis/ghc-vis/3.png>
                    .
                    When an object is updated by accessing it, you have to call
                    @:update@ to refresh the visualization window. You can also
                    click on an object to force an update:
                    .
                    > > a !! 2
                    > 3
                    > > :update
                    .
                    <http://felsin9.de/nnis/ghc-vis/4.png>
                    .
                    Clear the visualization window, this also happens when you
                    @:load@ or @:reload@ a source file:
                    .
                    > > :clear

tested-with: GHC == 7.4.1, GHC == 7.4.2
data-files: ghci
Extra-source-files: nonghci-test.hs

flag graph
  Default: True
  Description: "Enable graph view using Graphviz"

Library
  Exposed-modules: GHC.Vis
  Other-modules: GHC.Vis.Internal GHC.Vis.Types GHC.Vis.View.List GHC.Vis.View.Common
  Default-Language: Haskell2010
  Build-depends: base == 4.*,
                 mtl >= 2.0,
                 fgl,
                 deepseq,
                 text,
                 transformers,
                 gtk == 0.12.*,
                 cairo == 0.12.*,
                 ghc-heap-view >= 0.3
  Hs-source-dirs: src/
  Ghc-options: -Wall -fno-warn-unused-do-bind

  if flag(graph)
      Other-modules: GHC.Vis.View.Graph.Parser GHC.Vis.View.Graph
      Build-depends: graphviz >= 2999.14.1.0,
                     xdot >= 0.2
      Cpp-options: -DGRAPH_VIEW

--source-repository head
--    type:     darcs
--    location: http://
