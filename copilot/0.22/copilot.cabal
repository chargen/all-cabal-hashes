-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:2d1ece3d90262cfa7ed7dd834378d3ef
    SHA1:fd3c258793734d610490ecda79291f7228eda480
    SHA256:ae9995119926fc144003dbe913199cf9702d864849901ce13f7b87a116cee8b1
    SHA512:311d19ecafeb0cb0adfe26b7563970ded343edd7adca10006a277f8d7f560cc488af10adecf14e80ce64a87bc2d167ce436f9a9c5036f810e3428d9b75f8c57e
    Skein512_512:b91e9f5d47f9579fc6560a6296401d9de03c952845b202329b27f1bb4c5c27ad9d659d4bad2d40be4ab5dda1d335a3e235bb57d0ce2ec2dff8f22cf1cbbce63b

package-locations:
    https://hackage.haskell.org/package/copilot-0.22/copilot-0.22.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/copilot-0.22.tar.gz

package-size: 37052
-- END Added by all-cabal-hashes-tool

name:                copilot
version:             0.22
cabal-version:       >= 1.2
license:             BSD3
license-file:        LICENSE
author:              Lee Pike <leepike@gmail.com>, Robin Morisset, Alwyn Goodloe, Sebastian Niller
synopsis:            A stream DSL for writing embedded C.
build-type:          Simple
maintainer:          Lee Pike <leepike@gmail.com>
category:            Language
homepage:            http://leepike.github.com/Copilot/
description:         Can you write a list in Haskell? Then you can write embedded C code using
                     Copilot. Here's a Copilot program that computes the Fibonacci sequence (over
                     Word 64s) and tests for even numbers:
                     .
                     > fib :: Streams
                     > fib = do
                     >  "fib" .= [0,1] ++ var "fib" + (drop 1 $ varW64 "fib")
                     >  "t" .= even (var "fib")
                     >    where even :: Spec Word64 -> Spec Bool
                     >          even w = w `mod` const 2 == const 0    
                     .
                     Copilot contains an interpreter, a compiler, and uses a model-checker to check
                     the correctness of your program. The compiler generates constant time and
                     constant space C code via Tom Hawkin's Atom (thanks Tom!). Copilot was
                     originally developed to write embedded monitors for more complex embedded
                     systems, but it can be used to develop a variety of functional-style embedded
                     code.

extra-source-files:  README

library
    ghc-options:     -Wall
    build-depends:     base > 4 && < 5
                     , atom >= 1.0.5
                     , containers >= 0.2.0.1
                     , process >= 1.0.0.0
                     , random >= 1.0.0.0
                     , directory
                     , mtl >= 1.0.0.0                   
                     , filepath >= 1.0.0.0

    extensions:
    exposed-modules: Language.Copilot
                     Language.Copilot.AdHocC
                     Language.Copilot.Core
                     Language.Copilot.Language
                     Language.Copilot.AtomToC
                     Language.Copilot.Compiler
                     Language.Copilot.Interpreter
                     Language.Copilot.Help
                     Language.Copilot.Analyser
                     Language.Copilot.PrettyPrinter
                     Language.Copilot.Tests.Random
                     Language.Copilot.Dispatch
                     Language.Copilot.Interface
                     Language.Copilot.Variables
                     Language.Copilot.Libs.ErrorChks
                     Language.Copilot.Libs.PTLTL
                     Language.Copilot.Libs.LTL
                     Language.Copilot.Libs.Indexes
                     Language.Copilot.Libs.Statistics
                     Language.Copilot.Examples.Examples
                     Language.Copilot.Examples.LTLExamples
                     Language.Copilot.Examples.PTLTLExamples
                     Language.Copilot.Examples.StatExamples
