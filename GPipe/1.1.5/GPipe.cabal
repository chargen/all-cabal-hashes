-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:a7956e25a0aa3dce99a7ca7f3de6d6e9
    SHA1:339d4b1475937d29cfd35bbc739d3e1eac6b8cbb
    SHA256:b4e8f6d854816a093a4e0a60aa23ec436476f8a4ccb3d14e81fa549f8580ea4f
    SHA512:7de3d9ca518f0839cdabbc038043cb7543fb12ce2f776c532d576e3740c9b2f5c8eb2e587cc2ad9816f92297a7eb5a57a0195285da7b463305c2f5e3b53e95a2
    Skein512_512:583add66fa66cf67b9f6496d15e5e931c8a4c57f06c87dd39790b30112c486ed2203b2f8d28531d342d12a427ef0d086ebf5c32143d7aeb3cea883c698e6afc0

x-package-locations:
    https://hackage.haskell.org/package/GPipe-1.1.5/GPipe-1.1.5.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/GPipe-1.1.5.tar.gz

x-package-size: 29427
-- END Added by all-cabal-hashes-tool

name: GPipe
version: 1.1.5
cabal-version: >= 1.2.3
build-type: Simple
license: BSD3
license-file: ""
copyright: Tobias Bexelius
maintainer: Tobias Bexelius
build-depends: containers >= 0.3, mtl -any, list-tries -any,
               GLUT >=2.2.2.0, OpenGL >=2.4.0.1,
               Boolean == 0.0.1, Vec == 0.9.6, Vec-Boolean >= 1.0.2, base >= 4 && < 5
stability: Experimental
homepage: http://www.haskell.org/haskellwiki/GPipe
package-url: http://hackage.haskell.org/package/GPipe
bug-reports: mailto:tobias_bexelius@hotmail.com
synopsis: A functional graphics API for programmable GPUs
description: GPipe models the entire graphics pipeline in a purely functional, immutable and typesafe way. It is built on top of the programmable pipeline (i.e. non-fixed function) of
             OpenGL 2.1 and uses features such as vertex buffer objects (VBO's), texture objects and GLSL shader code synthetisation to create fast graphics programs. Buffers,
             textures and shaders are cached internally to ensure fast framerate, and GPipe is also capable of managing multiple windows and contexts. By creating your own
             instances of GPipes classes, it's possible to use additional datatypes on the GPU.
             .
             You'll need full OpenGL 2.1 support, including GLSL 1.20 to use GPipe. Thanks to OpenGLRaw, you may still build GPipe programs on machines lacking this support.
category: Graphics
author: Tobias Bexelius
tested-with: GHC ==6.10.3
data-files:
data-dir: ""
extra-source-files:
extra-tmp-files:
exposed-modules: Graphics.GPipe Graphics.GPipe.Format
                 Graphics.GPipe.FrameBuffer Graphics.GPipe.Stream
                 Graphics.GPipe.Texture Graphics.GPipe.Stream.Fragment
                 Graphics.GPipe.Stream.Primitive
exposed: True
buildable: True
build-tools:
cpp-options:
cc-options:
ld-options:
pkgconfig-depends:
frameworks:
c-sources:
extensions: ParallelListComp MultiParamTypeClasses
            NoMonomorphismRestriction ScopedTypeVariables FlexibleContexts
            FlexibleInstances EmptyDataDecls GeneralizedNewtypeDeriving
            TypeFamilies TypeOperators
extra-libraries:
extra-lib-dirs:
includes:
install-includes:
include-dirs:
hs-source-dirs: src
other-modules: Formats GPUStream InputAssembler OutputMerger
               Rasterizer Resources Shader Textures
ghc-prof-options:
ghc-shared-options:
ghc-options:
hugs-options:
nhc98-options:
jhc-options: