-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:511558d34e388b86869fbb6384e16a97
    SHA1:ab07c85be6e450eec513727bb7fd5a8bc9bc693e
    SHA256:1cb85383c15524ee7a0d8f19901abc38fc918f19fbc57326e929871ef16b22b2
    SHA512:6a163993dbd59dce7398224b0dc67d93aedc255e343d9c3e4f93c91ee778435ecb636c4d2697035c29a5cb9457233defde111ddb10a462afe3c5558acbb7fa90
    Skein512_512:e5ae95a7933fbbfff8e2dee7e9234c77c9b9c6ca308484e29aadd10971085173ac3b7bb516aa0ed1cc2532a89ff78c0445c002b79159302d837f0732d7f60a33

package-locations:
    https://hackage.haskell.org/package/tagged-binary-0.1.2.0/tagged-binary-0.1.2.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/tagged-binary-0.1.2.0.tar.gz

package-size: 5236
-- END Added by all-cabal-hashes-tool

name:                tagged-binary
version:             0.1.2.0
synopsis:            Provides tools for serializing data tagged with type
                     information.
description:         Very minimal library providing tools for serializing and
                     decoding data into 'ByteString' tagged with information
                     about its type, inspired by Cloud Haskell and
                     distributed-process.
                     .
                     Intended for use by libraries and frameworks in
                     distributed contexts, such as distributed computation
                     between native servers and communication between native
                     servers and ghcjs/various front-ends, for behavior
                     similar to the polymorphic communication channels of
                     Cloud Haskell and distributed-process; servers can send
                     tagged data, and clients can choose to selectively
                     accept, ignore or queue incoming messages depending on
                     their types.
                     .
                     For basic encoding, decoding and categorization, only
                     'Data.Binary.Tagged' should be necessary.
                     'Data.Binary.Tagged.Internal' is exported in case you
                     need it.
                     .
                     Quick example:
                     .
                     > > let x = encodeTagged (1 :: Int)
                     > > decodeTagged x :: Maybe Bool
                     > Nothing
                     > > decodeTagged x :: Maybe Int
                     > Just 1

license:             MIT
license-file:        LICENSE
author:              Justin Le <justin@jle.im>
maintainer:          Justin Le <justin@jle.im>
copyright:           Copyright (c) Justin Le 2014
category:            Data, Serialization 
build-type:          Simple
extra-source-files:  changelog.md
cabal-version:       >=1.10

source-repository head
  type:     git
  location: https://github.com/mstksg/tagged-binary

library
  exposed-modules:     Data.Binary.Tagged
                     , Data.Binary.Tagged.Internal
  -- other-modules:       
  -- other-extensions:    
  build-depends:       base >=4.6 && <5
                     , binary >=0.7.1.0 && <0.8
                     , bytestring >=0.10.4.0 && <0.11
                     , data-default >=0.5.3 && <0.6
                     , spoon >=0.3.1 && <0.4
                     , pureMD5 >=2.1.2.1 && <3
  -- hs-source-dirs:      
  default-language:    Haskell2010
  ghc-options:         -Wall
