-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:dd9e34e3ac550e99d63bdf77709b18f1
    SHA1:cdb5bc871c897ede318b46163eefdbd8dfecbfb5
    SHA256:8e4abf685a1a4cab8244eb2c71378a99fd53c71696ee8a1cc14320b293162700
    SHA512:4300ebdcbb2297f4f29e644e2e241f8faece01750d62eb3b75e0c0aefa31349376bf8d9966452ab26092fb97e877e19f3306ef73db8dae3a8628fcbd9d076b71
    Skein512_512:5786a2c8dd2a0458277a65c65c3283bd452cf5f973e8d62319fb8a9f23241a34bcad5e7ced4d3c7e789e8d404e163bfa96caf9bc25d62b5dcd4e3376c4dc3899

package-locations:
    https://hackage.haskell.org/package/modulespection-0.1.2.2/modulespection-0.1.2.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/modulespection-0.1.2.2.tar.gz

package-size: 5124
-- END Added by all-cabal-hashes-tool

-- Initial modulespection.cabal generated by cabal init.  For further
-- documentation, see http://haskell.org/cabal/users-guide/

name:                modulespection
version:             0.1.2.2
synopsis:            Template Haskell for introspecting a module's declarations
description:
 Collect all of the declarations in a module using Template Haskell (via the GHC API).
 .
 One can either get all the names, or just the declarations (only type declarations
 are supported right now).
 .
 Here is a quick example:
 .
 > import Language.Haskell.TH.Module.Magic (names)
 >
 > data Test = Test Int
 > newtype OtherTest = OtherTest Test
 >
 > someFunction :: String -> String
 > someFunction = id
 >
 > -- 'names' is Template Haskell function that will collect all of the
 > -- toplevel declaration names of the current file.
 > names >>= runIO . print >> return []
 .
 Which will spew the following when compiling:
 .
 > [Test,OtherTest,someFunction]
 .
 There is also 'declarations' which can be used, for example, to make sure that all
 types have @ToJSON@/@FromJSON@ instances.
 .
 > import Data.Aeson.TH (deriveJSON, defaultOptions)
 > import MonadUtils (concatMapM)
 > import Language.Haskell.TH.Module.Magic (declarations)
 >
 > data Test = Test Int
 > newtype OtherTest = OtherTest Test
 >
 > concatMapM (deriveJSON defaultOptions) =<< declarations
 .
 Which will make JSON instances for Test, OtherTest and any other types
 added to the file.
 .
 You can also do the same thing for an existing module.
 .
 > import Data.Aeson.TH (deriveJSON, defaultOptions)
 > import MonadUtils (concatMapM)
 > import Language.Haskell.TH.Module.Magic (moduleDeclarations)
 > import Data.Monoid
 >
 > concatMapM (deriveJSON defaultOptions) =<< moduleDeclarations "Data.Monoid"
 .
 Which will build instances for all the types in "Data.Monoid".

license:             BSD3
license-file:        LICENSE
author:              Jonathan Fischoff
maintainer:          jonathangfischoff@gmail.com
homepage: https://github.com/jfischoff/modulespection
-- copyright:
category:            Language
build-type:          Simple
-- extra-source-files:
cabal-version:       >=1.10

source-repository head
    type: git
    location: git://github.com/jfischoff/modulespection

library
  exposed-modules:     Language.Haskell.TH.Module.Magic
  -- other-modules:
  other-extensions: LambdaCase
                  , FlexibleInstances
  build-depends: base >=4.6 && < 666
               , template-haskell >=2.7
               , ghc-paths >=0.1 && <0.2
               , ghc
               , temporary == 1.2.*
               , transformers == 0.3.* || == 0.4.*
               , exceptions >= 0.5 && < 0.7
               , filepath == 1.3.*
  hs-source-dirs:      src
  default-language:    Haskell2010