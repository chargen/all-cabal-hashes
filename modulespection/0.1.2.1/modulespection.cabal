-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:c4fb94eaae9fda4f47bed73af273b175
    SHA1:943572f1e83386c33374bf6c34fa5eb51f9b8530
    SHA256:fce3acfcd16e472435b7ec6cb618fdbbc0c3d203f1f23070a57b0653c1415c51
    SHA512:2cdf79b730c1d3bfea3ba890e5dba075b6482d407c455cf677da1fc5296c19570d8f6dae13a8f1f5e179071a5add3572bb1851c971d58d00b0726cef633d436f
    Skein512_512:4285c8a00a9f657a64b8b4f55966cd74112c222563c290bad8b70f40af105c9c145294adaa7d28c537c9a9366b28c871dd39992ad63cfcc4ffb129c67c946da5

x-package-locations:
    https://hackage.haskell.org/package/modulespection-0.1.2.1/modulespection-0.1.2.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/modulespection-0.1.2.1.tar.gz

x-package-size: 5081
-- END Added by all-cabal-hashes-tool

-- Initial modulespection.cabal generated by cabal init.  For further 
-- documentation, see http://haskell.org/cabal/users-guide/

name:                modulespection
version:             0.1.2.1
synopsis:            Template Haskell for introspecting a module's declarations
description: 
 Collect all of the declarations in a module using Template Haskell (via the GHC API). 
 . 
 One can either get all the names, or just the declarations (only type declarations
 are supported right now).
 .
 Here is a quick example:
 . 
 > import Language.Haskell.TH.Module.Magic (names)
 > 
 > data Test = Test Int
 > newtype OtherTest = OtherTest Test
 > 
 > someFunction :: String -> String
 > someFunction = id
 > 
 > -- 'names' is Template Haskell function that will collect all of the 
 > -- toplevel declaration names of the current file.
 > names >>= runIO . print >> return []
 .
 Which will spew the following when compiling:
 .
 > [Test,OtherTest,someFunction]
 . 
 There is also 'declarations' which can be used, for example, to make sure that all
 types have @ToJSON@/@FromJSON@ instances. 
 .
 > import Data.Aeson.TH (deriveJSON, defaultOptions)
 > import MonadUtils (concatMapM)
 > import Language.Haskell.TH.Module.Magic (declarations)
 > 
 > data Test = Test Int
 > newtype OtherTest = OtherTest Test
 >
 > concatMapM (deriveJSON defaultOptions) =<< declarations
 .
 Which will make JSON instances for Test, OtherTest and any other types
 added to the file.
 .
 You can also do the same thing for an existing module.
 .
 > import Data.Aeson.TH (deriveJSON, defaultOptions)
 > import MonadUtils (concatMapM)
 > import Language.Haskell.TH.Module.Magic (moduleDeclarations)
 > import Data.Monoid
 > 
 > concatMapM (deriveJSON defaultOptions) =<< moduleDeclarations "Data.Monoid"
 .
 Which will build instances for all the types in "Data.Monoid".

license:             BSD3
license-file:        LICENSE
author:              Jonathan Fischoff
maintainer:          jonathangfischoff@gmail.com
homepage: https://github.com/jfischoff/modulespection
-- copyright:           
category:            Language
build-type:          Simple
-- extra-source-files:  
cabal-version:       >=1.10

library
  exposed-modules:     Language.Haskell.TH.Module.Magic
  -- other-modules:       
  other-extensions: LambdaCase
                  , FlexibleInstances
  build-depends: base >=4.6 && < 666
               , template-haskell >=2.7 
               , ghc-paths >=0.1 && <0.2
               , ghc
               , temporary == 1.2.*
               , transformers == 0.3.*
               , exceptions >= 0.5 && < 0.6
               , filepath == 1.3.*
  hs-source-dirs:      src
  default-language:    Haskell2010