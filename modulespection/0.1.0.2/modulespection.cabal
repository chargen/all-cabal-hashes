-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:97cc705eabdc2e7086b04d8b568efb61
    SHA1:21b7b8e92967fe42c7d17292e5e818f9b4a39c32
    SHA256:532df85dd500cc36373839b72afc0b0e2adc85bbdec1d8943642569ad8f7b1f8
    SHA512:e8b66267295886afb0b76bbda75d26b2413bb7f5c51615cc9ab0a7011342eb8fdeafc850e2379b34d875451c6d863f990ec01f3f60660eabd6085d3470ca99fa
    Skein512_512:929304e548dd8ecbbdc4f48ec5984838db5f260d2d701e023d69a6fb1f45168618268da5ab53aa38b246287425eeb7ba241f9a429fa3f00841c5831703328ac5

package-locations:
    https://hackage.haskell.org/package/modulespection-0.1.0.2/modulespection-0.1.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/modulespection-0.1.0.2.tar.gz

package-size: 3624
-- END Added by all-cabal-hashes-tool

-- Initial modulespection.cabal generated by cabal init.  For further 
-- documentation, see http://haskell.org/cabal/users-guide/

name:                modulespection
version:             0.1.0.2
synopsis:            Template Haskell for introspecting a module's declarations
description: 
 Collect all of the declarations in a module using Template Haskell (via the GHC API). 
 . 
 One can either get all the names, or just the declarations (only type declarations
 are supported right now).
 .
 Here is a quick example
 . 
 > import Language.Haskell.TH.Module.Magic (names)
 > 
 > data Test = Test Int
 > newtype OtherTest = OtherTest Test
 > 
 > someFunction :: String -> String
 > someFunction = id
 > 
 > -- 'names' is Template Haskell function that will collect all of the 
 > -- toplevel declaration names of the current file.
 > names >>= runIO . print >> return []
 .
 Which will spew the following when compiling.
 .
 > [Test,OtherTest,someFunction]
 . 
 There is also 'declarations' which can be used, for example, to make sure that all
 types have @ToJSON@/@FromJSON@ instances. 
 .
 > import Data.Aeson.TH (deriveJSON, defaultOptions)
 > import MonadUtils (concatMapM)
 > import Language.Haskell.TH.Module.Magic (names)
 > 
 > data Test = Test Int
 > newtype OtherTest = OtherTest Test
 >
 > concatMapM (deriveJSON defaultOptions) =<< declarations
 .
 Which will makes the JSON instances for Test and OtherTest and any other types
 added to the file.
 .
 You can also do the same thing for an existing module.
 .
 > import Data.Aeson.TH (deriveJSON, defaultOptions)
 > import MonadUtils (concatMapM)
 > import Language.Haskell.TH.Module.Magic (names)
 > import Data.Monoid
 > 
 > concatMapM (deriveJSON defaultOptions) =<< moduleDeclarations "Data.Monoid"
 .
 Which will build instances for all the types in "Data.Monoid".

license:             BSD3
license-file:        LICENSE
author:              Jonathan Fischoff
maintainer:          jonathangfischoff@gmail.com
homepage: https://github.com/jfischoff/modulespection
-- copyright:           
category:            Language
build-type:          Simple
-- extra-source-files:  
cabal-version:       >=1.10

library
  exposed-modules:     Language.Haskell.TH.Module.Magic
  -- other-modules:       
  other-extensions: LambdaCase
                  , FlexibleInstances
  build-depends: base >=4.6 && <4.7
               , template-haskell >=2.7 && <2.9
               , ghc-paths >=0.1 && <0.2
               , ghc
  hs-source-dirs:      src
  default-language:    Haskell2010