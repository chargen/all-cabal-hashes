-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:8a35859e58a26228636c7b350757036c
    SHA1:4596c3be32d2e2033efd823fe358fc889fc8e406
    SHA256:d5f3177bef514f7fd5b434d4e8125fe8cc4333e462e3317a5565c028410ff26d
    SHA512:b709242ac3fed5124c31b245ae2a545c0dd65558c0f4d928845d2f490ff4f6dcdea9701a3ac7cd1c2839ed948cb7a82c042019fbdd4bc8b0724e8c0de1b5c634
    Skein512_512:028bd948d692f5c3a02401e298b7021c0445ff1e8b64833a58a35fa4a6287a1b91e77a4391aa867297b43ed472e2fd3f830e90bf86e349f43fb7ed3ab051731e

x-package-locations:
    https://hackage.haskell.org/package/modulespection-0.1.0.5/modulespection-0.1.0.5.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/modulespection-0.1.0.5.tar.gz

x-package-size: 4994
-- END Added by all-cabal-hashes-tool

-- Initial modulespection.cabal generated by cabal init.  For further 
-- documentation, see http://haskell.org/cabal/users-guide/

name:                modulespection
version:             0.1.0.5
synopsis:            Template Haskell for introspecting a module's declarations
description: 
 Collect all of the declarations in a module using Template Haskell (via the GHC API). 
 . 
 One can either get all the names, or just the declarations (only type declarations
 are supported right now).
 .
 Here is a quick example:
 . 
 > import Language.Haskell.TH.Module.Magic (names)
 > 
 > data Test = Test Int
 > newtype OtherTest = OtherTest Test
 > 
 > someFunction :: String -> String
 > someFunction = id
 > 
 > -- 'names' is Template Haskell function that will collect all of the 
 > -- toplevel declaration names of the current file.
 > names >>= runIO . print >> return []
 .
 Which will spew the following when compiling:
 .
 > [Test,OtherTest,someFunction]
 . 
 There is also 'declarations' which can be used, for example, to make sure that all
 types have @ToJSON@/@FromJSON@ instances. 
 .
 > import Data.Aeson.TH (deriveJSON, defaultOptions)
 > import MonadUtils (concatMapM)
 > import Language.Haskell.TH.Module.Magic (names)
 > 
 > data Test = Test Int
 > newtype OtherTest = OtherTest Test
 >
 > concatMapM (deriveJSON defaultOptions) =<< declarations
 .
 Which will make JSON instances for Test, OtherTest and any other types
 added to the file.
 .
 You can also do the same thing for an existing module.
 .
 > import Data.Aeson.TH (deriveJSON, defaultOptions)
 > import MonadUtils (concatMapM)
 > import Language.Haskell.TH.Module.Magic (names)
 > import Data.Monoid
 > 
 > concatMapM (deriveJSON defaultOptions) =<< moduleDeclarations "Data.Monoid"
 .
 Which will build instances for all the types in "Data.Monoid".

license:             BSD3
license-file:        LICENSE
author:              Jonathan Fischoff
maintainer:          jonathangfischoff@gmail.com
homepage: https://github.com/jfischoff/modulespection
-- copyright:           
category:            Language
build-type:          Simple
-- extra-source-files:  
cabal-version:       >=1.10

library
  exposed-modules:     Language.Haskell.TH.Module.Magic
  -- other-modules:       
  other-extensions: LambdaCase
                  , FlexibleInstances
  build-depends: base >=4.6 && <4.7
               , template-haskell >=2.7 && <2.9
               , ghc-paths >=0.1 && <0.2
               , ghc
               , temporary == 1.2.*
               , exceptions == 0.3.*
               , transformers == 0.3.*
               , filepath == 1.3.*
  hs-source-dirs:      src
  default-language:    Haskell2010