-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:7961beab2b935a9c86be3757f242f542
    SHA1:0cdc88c8b644f19575382a67eef1765b269474be
    SHA256:3e0da77daecc8e9e01a11b1022400c8eecee23e15caf683ef006bb267eadc1fc
    SHA512:4d59fad80b7987b5445285b47ab29f9fecf9ce257b7dbcad73af78ff4e79192dd91fee7d19d41239a1b56f15e9064e64a81213d4c2e6bc17a1c6ffcbfb1c7f1c
    Skein512_512:6eaf5ce8e4071038df96ec06963ebc273df2b4e4c979ffb1cbcc704f6a1922ba85956eb4fd408500a04b5de47b18b514acb39ee71982cbb04fcdb9dc3252a5ab

x-package-locations:
    https://hackage.haskell.org/package/modulespection-0.1.2.0/modulespection-0.1.2.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/modulespection-0.1.2.0.tar.gz

x-package-size: 5069
-- END Added by all-cabal-hashes-tool

-- Initial modulespection.cabal generated by cabal init.  For further 
-- documentation, see http://haskell.org/cabal/users-guide/

name:                modulespection
version:             0.1.2.0
synopsis:            Template Haskell for introspecting a module's declarations
description: 
 Collect all of the declarations in a module using Template Haskell (via the GHC API). 
 . 
 One can either get all the names, or just the declarations (only type declarations
 are supported right now).
 .
 Here is a quick example:
 . 
 > import Language.Haskell.TH.Module.Magic (names)
 > 
 > data Test = Test Int
 > newtype OtherTest = OtherTest Test
 > 
 > someFunction :: String -> String
 > someFunction = id
 > 
 > -- 'names' is Template Haskell function that will collect all of the 
 > -- toplevel declaration names of the current file.
 > names >>= runIO . print >> return []
 .
 Which will spew the following when compiling:
 .
 > [Test,OtherTest,someFunction]
 . 
 There is also 'declarations' which can be used, for example, to make sure that all
 types have @ToJSON@/@FromJSON@ instances. 
 .
 > import Data.Aeson.TH (deriveJSON, defaultOptions)
 > import MonadUtils (concatMapM)
 > import Language.Haskell.TH.Module.Magic (declarations)
 > 
 > data Test = Test Int
 > newtype OtherTest = OtherTest Test
 >
 > concatMapM (deriveJSON defaultOptions) =<< declarations
 .
 Which will make JSON instances for Test, OtherTest and any other types
 added to the file.
 .
 You can also do the same thing for an existing module.
 .
 > import Data.Aeson.TH (deriveJSON, defaultOptions)
 > import MonadUtils (concatMapM)
 > import Language.Haskell.TH.Module.Magic (moduleDeclarations)
 > import Data.Monoid
 > 
 > concatMapM (deriveJSON defaultOptions) =<< moduleDeclarations "Data.Monoid"
 .
 Which will build instances for all the types in "Data.Monoid".

license:             BSD3
license-file:        LICENSE
author:              Jonathan Fischoff
maintainer:          jonathangfischoff@gmail.com
homepage: https://github.com/jfischoff/modulespection
-- copyright:           
category:            Language
build-type:          Simple
-- extra-source-files:  
cabal-version:       >=1.10

library
  exposed-modules:     Language.Haskell.TH.Module.Magic
  -- other-modules:       
  other-extensions: LambdaCase
                  , FlexibleInstances
  build-depends: base >=4.6 && < 666
               , template-haskell >=2.7 
               , ghc-paths >=0.1 && <0.2
               , ghc
               , temporary == 1.2.*
               , transformers == 0.3.*
               , exceptions >= 0.3 && < 0.6
               , filepath == 1.3.*
  hs-source-dirs:      src
  default-language:    Haskell2010