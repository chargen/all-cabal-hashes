-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:3f247247f029ff3706a0fa55fb57c289
    SHA1:a5a7ff3325713aceabc8e978485340668ce61b0a
    SHA256:9efee9dc3315df608ec2e7c74b87dead43a14c9e585f09b0ebe02510622689a7
    SHA512:8bd07e022dc1a02f8c6b08722cea8932bf70c3d029d95692c408adcd44ff26cc11e0ef52e88546210157a38dc38b833f46bac264b3af3fe169de40d483b6b7d9
    Skein512_512:6e7843bb0f83373d032e84eb3cadc91a0bce4b8bea78a565b10584b27878b4c4145d2d913c7532ba0b1a8f9d2ea1905caccd3bd97870405f4fd0cc9d283f9e44

package-locations:
    https://hackage.haskell.org/package/postie-0.4.0.0/postie-0.4.0.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/postie-0.4.0.0.tar.gz

package-size: 11613
-- END Added by all-cabal-hashes-tool

name: postie
version: 0.4.0.0
cabal-version: >=1.10
build-type: Simple
license: BSD3
license-file: LICENSE
maintainer: alex.biehl@gmail.com
synopsis: SMTP server library to receive emails from within Haskell programs.
category: Network
description: `postie` is a little smtp server library for receiving emails. It is currently
             in a very early stage and not yet fully standard compatible although the standard
             protocol is already supported.
             .
             * At the time of writing parameters on smtp commands can not be parsed.
             .
             * Handler functions need to return more detailed information to cancel a transaction.
             .
             `postie` supportes hooks on key commands in an smtp session like
             .
             * on connection open and close
             .
             * on /MAIL FROM/ command e.g. to intercept transaction if sender is blacklisted
             .
             * on /RCPT TO/ command e.g. to check if recipient is existent on your server
             .
             * and many more
             .
             To run `postie` you only need to supply a function which takes a `Mail` and
             return `Accepted` or `Rejected`. `mailBody` is a `pipes` `Producer` which
             streams the encoded body directly to your application code. The body is not
             parsed by `postie` since it depends on what the application wants to do with
             the mail data. Eventually I will create a seperate package for parsing mime
             messages with `pipes-parse` when postie becomes more stable and standard compliant.
author: Alex Biehl

source-repository head
    type: git
    location: https://bitbucket.org/alexbiehl/postie

flag examples
    Description:  Build examples
    Default: False
    Manual: True

library
    build-depends: base >=4 && <=5, network >=2.4.1.2,
                   bytestring >=0.10.0.2, tls >=1.2.6, pipes >=4.1.0,
                   pipes-parse >=3.0.1, attoparsec >=0.10.4.0, transformers >=0.3.0.0,
                   mtl >=2.1.2, cprng-aes >=0.5.2, data-default-class >=0.0.1, uuid >= 1.3.3
    exposed-modules: Web.Postie Web.Postie.Types Web.Postie.Settings Web.Postie.Address Web.Postie.SessionID
    exposed: True
    buildable: True
    default-language: Haskell2010
    default-extensions: Rank2Types OverloadedStrings DeriveDataTypeable
    hs-source-dirs: src
    other-modules: Web.Postie.Connection Web.Postie.Session
                   Web.Postie.Protocol Web.Postie.Pipes
    ghc-options: -O2 -Wall

executable postie-example-simple
    build-depends: base -any, bytestring -any, tls -any,
                   data-default-class -any, pipes -any, pipes-bytestring -any,
                   postie -any

    if flag(examples)
        buildable: True
    else
        buildable: False
    main-is: Simple.hs
    buildable: True
    default-language: Haskell2010
    hs-source-dirs: examples
