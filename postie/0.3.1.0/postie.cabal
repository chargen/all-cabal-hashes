-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:aaeba8c0610093fc064f19536cd439ba
    SHA1:52612e77e349276096a3f846658311887b8a933f
    SHA256:a7ca093d3c5910ccca6d14f9493f2141194df7640a8879cb0c16aa7cb20f2c74
    SHA512:9261a94c55ada2ce28336ece925e21e2cd768f08b2ac22b30525316fb29934c14fedbd61243629f3e468dc6701c917c4534dc2397ef519387468da6030ffd027
    Skein512_512:cd61678fd2547ef53e1636f768b080a778fba8f3083f8378fa6cce06be78b8e4330bce55915edfa9b937ead3b80fd672e81a59f87cad109822cf489b5c25e9d6

x-package-locations:
    https://hackage.haskell.org/package/postie-0.3.1.0/postie-0.3.1.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/postie-0.3.1.0.tar.gz

x-package-size: 11473
-- END Added by all-cabal-hashes-tool

name: postie
version: 0.3.1.0
cabal-version: >=1.10
build-type: Simple
license: BSD3
license-file: LICENSE
maintainer: alex.biehl@gmail.com
synopsis: SMTP server library to receive emails from within Haskell programs.
category: SMTP
description: `postie` is a little smtp server library for receiving emails. It is currently
             in a very early stage and not yet fully standard compatible although the standard
             protocol is already supported.
             .
             * At the time of writing parameters on smtp commands can not be parsed.
             .
             * Handler functions need to return more detailed information to cancel a transaction.
             .
             `postie` supportes hooks on key commands in an smtp session like
             .
             * on connection open and close
             .
             * on /MAIL FROM/ command e.g. to intercept transaction if sender is blacklisted
             .
             * on /RCPT TO/ command e.g. to check if recipient is existent on your server
             .
             * and many more
             .
             To run `postie` you only need to supply a function which takes a `Mail` and
             return `Accepted` or `Rejected`. `mailBody` is a `pipes` `Producer` which
             streams the encoded body directly to your application code. The body is not
             parsed by `postie` since it depends on what the application wants to do with
             the mail data. Eventually I will create a seperate package for parsing mime
             messages with `pipes-parse` when postie becomes more stable and standard compliant.
author: Alex Biehl

source-repository head
    type: git
    location: https://bitbucket.org/alexbiehl/postie

flag examples
    Description:  Build examples
    Default: False
    Manual: True

library
    build-depends: base >=4 && <=5, network >=2.4.1.2,
                   bytestring >=0.10.0.2, tls >=1.2.6, pipes >=4.1.0,
                   pipes-parse >=3.0.1, attoparsec >=0.10.4.0, transformers >=0.3.0.0,
                   mtl >=2.1.2, cprng-aes >=0.5.2, data-default-class >=0.0.1, uuid >= 1.3.3
    exposed-modules: Web.Postie Web.Postie.Types Web.Postie.Settings
    exposed: True
    buildable: True
    default-language: Haskell2010
    default-extensions: Rank2Types OverloadedStrings DeriveDataTypeable
    hs-source-dirs: src
    other-modules: Web.Postie.Connection Web.Postie.Session
                   Web.Postie.Protocol Web.Postie.Pipes Web.Postie.Address
    ghc-options: -O2 -Wall

executable postie-example-simple
    build-depends: base -any, bytestring -any, tls -any,
                   data-default-class -any, pipes -any, pipes-bytestring -any,
                   postie -any

    if flag(examples)
        buildable: True
    else
        buildable: False
    main-is: Simple.hs
    buildable: True
    default-language: Haskell2010
    hs-source-dirs: examples
