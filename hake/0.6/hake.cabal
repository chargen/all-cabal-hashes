-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:4cf78a61f8dad57c79133ce6aed440dd
    SHA1:bf7b69ae55037f8d430a3d911f8eef84bae988f4
    SHA256:1654529fb65e56ac7721c284838f0eeeceb4dca1e63dac8dbd68e6b9cb16e1f9
    SHA512:cfab92aa306e68ce80309b0f570087a28c24d399d12a07ead47fa007598f6397b28b4089c052cf98eec8ca8beb12e3f797a939c93833b44668eef4001c6d9a57
    Skein512_512:af18fa1aa211e7331109b68bc3c14c0499fef5feb6db573d6e75c8128b42af3ac6341708223cb2672ac210d907e796866aa5a309fef9d1a499e134c231733744

x-package-locations:
    https://hackage.haskell.org/package/hake-0.6/hake-0.6.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/hake-0.6.tar.gz

x-package-size: 17273
-- END Added by all-cabal-hashes-tool

Name:		hake
Version:	0.6
License:	GPL
License-file:	LICENSE
Author:		Yoshikuni Jujo
Maintainer:	Yoshikuni Jujo <PAF01143@nifty.ne.jp>
Category:	Development
Synopsis:	make tool. ruby : rake = haskell : hake

Description:	Like ruby's rake, hake have Hakefile which is Haskell source.
		.
		And Hakefile is like rake's Rakefile, and make's Makefile.
		.
		Hakefile is just Haskell source code,
		then you can use all Haskell features.
		.
		> import Development.Hake
		> hake_rules = [
		>
		>  dflt	[ "greeting" ]
		>  ,
		>  file	( [ "greeting", "greeting.log" ], [ "hello.o", "good-bye.o" ] ,
		> 		[ "linker -o greeting hello.o good-bye.o" ] )
		>  ,
		>  rule	( ".o", ".sfx1",
		> 		\t s -> [ "compiler1 " ++ s ++ " -o " ++ t ] )
		>  ,
		>  rule	( ".o", ".sfx2",
		> 		\t s -> [ "compiler2 " ++ s ++ " -o " ++ t ] )
		>  ,
		>  task	( "clean" , [ "rm -f *.o greeting greeting.log" ] )
		>  ,
		>  mkfl	( "script.sh", [ "#!/bin/sh", "echo This is script", "echo made by Hakefile" ] )
		>  ,
		>  ruleSS ( "", ".o", \t s -> [ (".c",  [ "gcc " ++ s ++ " -o " ++ t ] ) ,
		>                               (".cc", [ "g++ " ++ s ++ " -o " ++ t ] ) ] )
		>  ,
		>  rule   ( ".o", ".c",  \_ s -> [ "gcc -c " ++ s ] )
		>  ,
		>  rule   ( ".o", ".cc", \_ s -> [ "g++ -c " ++ s ] )
		>  ,
		>  base   ( [ (=="foo") ], const [ "foo.gen", "Hakefile" ], \t [s] -> [ \_ -> do
		>               gen <- readFile s
		>               writeFile t $ unlines $
		>                 [ "#!/bin/sh", "echo This is script" ] ++ lines gen
		>               return ExitSuccess ] )
		>
		>  ]
		>
		> main = hake hake_rules

Stability:	experimental
Homepage:	http://homepage3.nifty.com/salamander/second/projects/hake/index.xhtml
Package-Url:	http://homepage3.nifty.com/salamander/second/portage/distfiles/hake-0.5.tar.gz
Cabal-Version:	>= 1.2
Build-type:	Simple
Tested-With:	GHC
Data-Files:
Extra-Source-Files:
Extra-Tmp-Files:

Library
  GHC-Options:		-Wall
--  CPP-Options:		-DDEBUG
  Build-Depends:	base, old-time, mtl, filepath
  Exposed-Modules:	Development.Hake
  Other-Modules:	Development.Hake.HiddenTools

Executable hake
  GHC-Options:		-Wall
--  CPP-Options:		-DDEBUG
  Build-Depends:	directory, process, yjtools > 0.3, regexpr >= 0.2.9
  Other-Modules:	Development.Hake.HiddenTools
  Main-Is:		Main.hs
