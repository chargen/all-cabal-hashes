-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:e48362220e09dc9a0d74f962d0e5a0d5
    SHA1:3a1edac84b83d9779e2bf42d2f08fcf8a4c993a3
    SHA256:c3d7b792613771338683ce53ae31466ac77a2048cd13c2d4d76841e447e55708
    SHA512:c389208a408effcdf3e7c0262284a726e902582d7d636da4c6c55a2db6187f8e31b9891d6ffbe8c0c2709c14f53be6c6e69e300aa3c21ddbe38c0e847051375b
    Skein512_512:1b210102ddee0ac6de96a0f2a658cfefa428a217230aeb4a8bcc35573d82d662988494d6cb1f33fd40142bd5f186c5e418e89c219406092f654c8023fb9aad47

package-locations:
    https://hackage.haskell.org/package/hake-0.4/hake-0.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/hake-0.4.tar.gz

package-size: 16659
-- END Added by all-cabal-hashes-tool

Name:		hake
Version:	0.4
License:	GPL
License-file:	LICENSE
Author:		Yoshikuni Jujo
Maintainer:	Yoshikuni Jujo <PAF01143@nifty.ne.jp>
Category:	Development
Synopsis:	make tool. ruby : rake = haskell : hake

Description:	Like ruby's rake, hake have Hakefile which is Haskell source.
		.
		And Hakefile is like rake's Rakefile, and make's Makefile.
		.
		Hakefile is just Haskell source code,
		then you can use all Haskell features.
		.
		> import Development.Hake
		> hake_rules = [
		>
		>  dflt	[ "greeting" ]
		>  ,
		>  file	( [ "greeting", "greeting.log" ], [ "hello.o", "good-bye.o" ] ,
		> 		[ "linker -o greeting hello.o good-bye.o" ] )
		>  ,
		>  rule	( ".o", ".sfx1",
		> 		\t s -> [ "compiler1 " ++ s ++ " -o " ++ t ] )
		>  ,
		>  rule	( ".o", ".sfx2",
		> 		\t s -> [ "compiler2 " ++ s ++ " -o " ++ t ] )
		>  ,
		>  task	( "clean" , [ "rm -f *.o greeting greeting.log" ] )
		>  ,
		>  mkfl	( "script.sh", [ "#!/bin/sh", "echo This is script", "echo made by Hakefile" ] )
		>  ,
		>  mkfl2  ( "script.sh", [ "script.sh.gen" ], \[s] ->
		>             do gen <- readFile s
		>                return $ [ "#!/bin/sh", "echo This is script", "echo made by Hakefile" ]
		>                         ++ gen )
		>  ,
		>  ruleSS ( "", ".o", \t s -> [ (".c",  [ "gcc " ++ s ++ " -o " ++ t ] ) ,
		>                               (".cc", [ "g++ " ++ s ++ " -o " ++ t ] ) ] )
		>  ,
		>  rule   ( ".o", ".c",  \_ s -> [ "gcc -c " ++ s ] )
		>  ,
		>  rule   ( ".o", ".cc", \_ s -> [ "g++ -c " ++ s ] )
		>  ,
		>  ( [ (=="foo") ], const [ "foo.gen", "Hakefile" ], \t [s] -> [ do
		>         gen <- liftIO $ readFile s
		>         liftIO $ writeFile t $ unlines $
		>           [ "#!/bin/sh", "echo This is script" ] ++ lines gen ] )
		>
		>  ]
		>
		> main = hake hake_rules

Stability:	experimental
Homepage:	http://homepage3.nifty.com/salamander/second/projects/hake/index.xhtml
Package-Url:	http://homepage3.nifty.com/salamander/second/portage/distfiles/hake-0.4.tar.gz
Cabal-Version:	>= 1.2
Build-type:	Simple
Tested-With:	GHC
Data-Files:
Extra-Source-Files:
Extra-Tmp-Files:

Library
  GHC-Options:		-Wall
--  CPP-Options:		-DDEBUG
  Build-Depends:	base, old-time, mtl
  Exposed-Modules:	Development.Hake
  Other-Modules:	Development.Hake.HiddenTools

Executable hake
  GHC-Options:		-Wall
--  CPP-Options:		-DDEBUG
  Build-Depends:	directory, process, yjtools > 0.1
  Other-Modules:	Development.Hake.HiddenTools
  Main-Is:		Main.hs
