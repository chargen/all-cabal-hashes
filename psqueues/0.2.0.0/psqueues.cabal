-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:035f485b001d32206e950adcd042fca7
    SHA1:7d0de21630bf816bda373cff9718b221b28f6a22
    SHA256:8c54829e55fe13a1f9198c9e2b6ba356f43ed8848a4b404e993c8879caaa93ac
    SHA512:756884fa3c74c60bc24eeae03a26ae156827fbcc74ba5025252798616d73141fc62d78281a0d36f72b76ca3b7c58f5edaf665e42f4d0a364e8f0a73a4533a4ed
    Skein512_512:ee860320951e2f6e04d04c6d8af08146a34ae22071328e5234be86bf32d64437b92e12feacbcbd3bf9969dd1e400756f7d1fde69e7838f6fd10639e724382f63

x-package-locations:
    https://hackage.haskell.org/package/psqueues-0.2.0.0/psqueues-0.2.0.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/psqueues-0.2.0.0.tar.gz

x-package-size: 23715
-- END Added by all-cabal-hashes-tool

name: psqueues
version: 0.2.0.0
license: BSD3
license-file: LICENSE
maintainer: haskell@better.com
bug-reports: https://github.com/bttr/psqueues/issues
synopsis: Pure priority search queues
category: Data Structures
description:
    The psqueues package provides
    <http://en.wikipedia.org/wiki/Priority_queue Priority Search Queues> in
    three different flavors.
    .
    * @OrdPSQ k p v@, which uses the @Ord k@ instance to provide fast insertion,
    deletion and lookup. This implementation is based on Ralf Hinze's
    <http://citeseer.ist.psu.edu/hinze01simple.html A Simple Implementation Technique for Priority Search Queues>.
    Hence, it is similar to the
    <http://hackage.haskell.org/package/PSQueue PSQueue> library, although it is
    considerably faster and provides a slightly different API.
    .
    * @IntPSQ p v@ is a far more efficient implementation. It fixes the key type
   to @Int@ and uses a <http://en.wikipedia.org/wiki/Radix_tree radix tree>
   (like @IntMap@) with an additional min-heap property.
    .
    * @HashPSQ k p v@ is a fairly straightforward extension of @IntPSQ@: it
    simply uses the keys' hashes as indices in the @IntPSQ@. If there are any
    hash collisions, it uses an @OrdPSQ@ to resolve those. The performance of
    this implementation is comparable to that of @IntPSQ@, but it is more widely
    applicable since the keys are not restricted to @Int@, but rather to any
    @Hashable@ datatype.
    .
    Each of the three implementations provides the same API, so they can be used
    interchangeably. The benchmarks show how they perform relative to one
    another, and also compared to the other Priority Search Queue
    implementations on Hackage:
    <http://hackage.haskell.org/package/PSQueue PSQueue>
    and
    <http://hackage.haskell.org/package/fingertree-psqueue fingertree-psqueue>.
    .
    <<http://i.imgur.com/KmbDKR6.png>>
    .
    <<http://i.imgur.com/ClT181D.png>>
    .
    Typical applications of Priority Search Queues include:
    .
    * Caches, and more specifically LRU Caches;
    .
    * Schedulers;
    .
    * Pathfinding algorithms, such as Dijkstra's and A*.
build-type: Simple
cabal-version:  >=1.8
extra-source-files:
    CHANGELOG

source-repository head
    type:     git
    location: http://github.com/bttr/psqueues.git

Library
    ghc-options:    -O2 -Wall
    hs-source-dirs: src

    build-depends:
          base     >= 4.2   && < 5
        , deepseq  >= 1.2   && < 1.5
        , hashable >= 1.2.1 && < 1.3

    if impl(ghc>=6.10)
        build-depends: ghc-prim

    exposed-modules:
        Data.HashPSQ
        Data.IntPSQ
        Data.OrdPSQ
    other-modules:
        Data.BitUtil
        Data.HashPSQ.Internal
        Data.IntPSQ.Internal
        Data.OrdPSQ.Internal

benchmark psqueues-benchmarks
    type:           exitcode-stdio-1.0
    hs-source-dirs: src benchmarks
    main-is:        Main.hs
    ghc-options:    -Wall

    build-depends:
          containers           >= 0.5
        , unordered-containers >= 0.2.4
        , criterion            >= 0.8
        , mtl                  >= 2.1
        , fingertree-psqueue   >= 0.3
        , PSQueue              >= 1.1
        , random               >= 1.0

        , base
        , deepseq
        , ghc-prim
        , hashable
        , psqueues

Test-suite psqueues-tests
    cpp-options:    -DTESTING -DSTRICT
    ghc-options:    -Wall
    hs-source-dirs: src tests
    main-is:        Main.hs
    type:           exitcode-stdio-1.0

    other-modules:
        Data.PSQ.Class
        Data.PSQ.Class.Gen
        Data.PSQ.Class.Tests
        Data.PSQ.Class.Util
        Data.HashPSQ.Tests
        Data.IntPSQ.Tests
        Data.OrdPSQ.Tests

    build-depends:
          HUnit                      >= 1.2 && < 1.3
        , QuickCheck                 >= 2.7 && < 2.8
        , test-framework             >= 0.8 && < 0.9
        , test-framework-hunit       >= 0.3 && < 0.4
        , test-framework-quickcheck2 >= 0.3 && < 0.4

        , base
        , array
        , deepseq
        , ghc-prim
        , hashable
        , psqueues
        , tagged
