-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:9aad342f22c7de600184b4dcb82bd485
    SHA1:cdf0f7e53d90b2b82e1fc510c4094a30694138d2
    SHA256:a6bcf5b74cffc6d318260fe55a4a37e24d7b7c62d0da968f9141edd3d400b4f1
    SHA512:506b0145f14739b5a7d358ad4527a117d61199431d30311e3542e8dc1a49d2ac4f253c1d2ce6cb29d8cc6ca04c07f5f8ee519fb860fed679f54803640cdfcfc0
    Skein512_512:d4ddaca8298540706d3bc30d3767b34dc47c149380d5ff2f9da402af5c3a44d9570eca4b44e1de2afff8f986a9908d0cd6e26174bcdc076f4159fe7150ff927e

x-package-locations:
    https://hackage.haskell.org/package/multistate-0.2.0.0/multistate-0.2.0.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/multistate-0.2.0.0.tar.gz

x-package-size: 8793
-- END Added by all-cabal-hashes-tool

Name:          multistate
Version:       0.2.0.0
Cabal-Version: >= 1.10
Build-Type:    Simple
license:       BSD3
license-file:  LICENSE
Copyright:     Jan Bracker, Lennart Spitzner
Maintainer:    Lennart Spitzner <lsp@informatik.uni-kiel.de>
Author:        Jan Bracker, Lennart Spitzner
Homepage:      https://github.com/lspitzner/multistate
Bug-reports:   https://github.com/lspitzner/multistate/issues
Stability:     Experimental
category:      Control
tested-with:   GHC == 7.6.3, GHC == 7.8.3

Synopsis: like mtl's ReaderT/StateT, but more than one contained value/type.
Description:
  .
  == Introduction
  .
  When using multiple ReaderT's or StateT's in the same monad stack, it becomes
  necessary to lift the operations in order to affect a specific transformer.
  Using heterogenous lists (type level functions), a GADT and a corresponding
  type class, this package provides transformers that remove that necessity:
  MultiReaderT/MultiStateT can contain a heterogenous list of values.
  .
  The type inferred for the getter/setter determines which value is
  read/written.
  .
  == Example
  .
  > simpleExample :: IO ()
  > simpleExample = evalMultiStateT
  >               $ withMultiState 'H'
  >               $ withMultiState "ello, World!"
  >               $ do
  >   -- the monad here is MultiStateT '[String, Char] IO
  >   let combinedPrint = do       -- no type signature necessary
  >         c  <- mGet             -- type of mGet inferred to be m Char
  >         cs <- mGet             --              inferred to be m String
  >         lift $ putStrLn (c:cs)
  >   combinedPrint
  >   mSet 'J'                     -- similarly for the setter
  >   combinedPrint
  .
  The output is:
  .
  > Hello, World!
  > Jello, World!
  .
  ( you can find both this and a more complex example
    in an executable in the package. )
  .
  == Error Messages
  .
  If you try to execute an action that requires a specific type in the state,
  but the current state does not contain that type, the error message is
  something like
  .
  > No instance for (Control.Monad.MultiState.ContainsType Foo '[])
  .
  where @Foo@ is the missing type.
  .
  == Known Deficits
  .
  This package currently lacks a complete set of "lifting instances", i.e.
  instance definitions for classes such as mtl's MonadWriter "over" the newly
  introduced monad transformers, as in
  .
  > instance (MonadWriter w m) => MonadWriter w (MultiStateT c m) where ..
  .
  These "lifting instances" would be necessary
  to achieve full compatability with existing transformers. Ping me if you
  find anything specific missing.
  .
  == Changelog
  .
  * 0.2.0.0:
  .
      * Start using DataKinds and TypeOperators to make the HList
        representation more readable. The translation roughly is:
  .
          > Null        -> '[]
          > Cons a Null -> '[a]
          > Cons a b    -> a ': b
          > TNull       -> HNil
          > TCons a b   -> a :+: b
  .
      * Remove dependency on `tfp` package.

source-repository head
  type: git
  location: git@github.com:lspitzner/multistate.git

flag build-test
  description: Build the MultiState-test test program
  default: False

flag build-example
  description: Build the MultiState-example example program
  default: False

library {
  default-language:
    Haskell2010
  exposed-modules:
    Data.HList.HList
    Control.Monad.MultiState
    Control.Monad.MultiReader
  other-modules:
  build-depends:
    base         >= 4.6   && <4.8,
    mtl          >= 2.1   && <2.3,
    transformers >= 0.3   && <0.5
  default-extensions:
    GADTs
    TypeFamilies
    MultiParamTypeClasses
    FunctionalDependencies
    FlexibleInstances
    OverlappingInstances
    UndecidableInstances
    TypeOperators
    DataKinds
  ghc-options: -Wall
  hs-source-dirs: src
}

executable multistate-test {
  default-language:
    Haskell2010
  if flag(build-test) {
    buildable: True
    build-depends:
      -- no version constraints necessary, because they are already
      -- given by library
      multistate,
      base,
      transformers
  } else {
    buildable: False
  }
  ghc-options: -Wall
  main-is: Test.hs
  hs-source-dirs: test
}

executable multistate-example {
  default-language:
    Haskell2010
  if flag(build-example) {
    buildable: True
    build-depends:
      -- no version constraints necessary, because they are already
      -- given by library
      multistate,
      base,
      mtl,
      transformers
  } else {
    buildable: False
  }
  main-is: Example.hs
  hs-source-dirs: example
}
