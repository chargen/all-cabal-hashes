Name:          multistate
Version:       0.1.3.1
Cabal-Version: >= 1.8
Build-Type:    Simple
license:       BSD3
license-file:  LICENSE
Copyright:     Jan Bracker, Lennart Spitzner
Maintainer:    Lennart Spitzner <lsp@informatik.uni-kiel.de>
Author:        Jan Bracker, Lennart Spitzner
Homepage:      https://github.com/lspitzner/multistate
Bug-reports:   https://github.com/lspitzner/multistate/issues
Stability:     Experimental
category:      Control
tested-with:   GHC == 7.6.3, GHC == 7.8.3

Synopsis: like mtl's ReaderT/StateT, but more than one contained value/type.
Description:
  .
  == Introduction
  .
  When using multiple ReaderT's or StateT's in the same monad stack, it becomes
  necessary to lift the operations in order to affect a specific transformer.
  Using heterogenous lists (type level functions), a GADT and a corresponding
  type class, this package provides transformers that remove that necessity:
  MultiReaderT/MultiStateT can contain a heterogenous list of values.
  .
  The type inferred for the getter/setter determines which value is
  read/written.
  .
  == Example
  .
  >              -- an IO action wrapped by a MultiState
  >              -- containing both a Char and a [Char].
  > examplePrint :: MultiStateT (Cons [Char] (Cons Char Null)) IO ()
  > examplePrint = do
  >   c  <- mGet             -- inferred to be :: m Char
  >   cs <- mGet             -- inferred to be :: m [Char]
  >   lift $ putStrLn (c:cs)
  .
  This computation can be executed in the following way:
  .
  > main = evalMultiStateT
  >      $ withMultiState 'H'
  >      $ withMultiState "ello, World!"
  >      $ examplePrint
  .
  the output is:
  .
  > Hello, World!
  > Jello, World!
  .
  ( you can find both this and a more complex example
    in an executable in the package. )
  .
  == Error Messages
  .
  If you try to execute an action that requires a specific type in the state,
  but the current state does not contain that type, the error message is
  something like
  .
  > Control.Monad.MultiState.ContainsType Foo Null
  .
  where @Foo@ is the missing type.
  .
  == Known Deficits
  .
  This package currently lacks a complete set of "lifting instances", i.e.
  instance definitions for classes such as mtl's MonadWriter "over" the newly
  introduced monad transformers, as in
  .
  > instance (MonadWriter w m) => MonadWriter w (MultiStateT c m) where ..
  .
  These "lifting instances" would be necessary
  to achieve full compatability with existing transformers. Ping me if you
  find anything specific missing.

source-repository head
  type: git
  location: git@github.com:lspitzner/multistate.git

flag build-test
  description: Build the MultiState-test test program
  default: False

flag build-example
  description: Build the MultiState-example example program
  default: False

library {
  exposed-modules:
    Data.HList.HList
    Control.Monad.MultiState
    Control.Monad.MultiReader
  other-modules:
  build-depends:
    base         >= 4.6   && <4.8,
    mtl          >= 2.1   && <2.3,
    tfp          >= 0.8   && <0.9,
    transformers >= 0.3   && <0.5
  extensions:
    GADTs
    TypeFamilies
    MultiParamTypeClasses
    FunctionalDependencies
    FlexibleInstances
    OverlappingInstances
    UndecidableInstances
  ghc-options: -Wall
  hs-source-dirs: src
}

executable multistate-test {
  if flag(build-test) {
    buildable: True
    build-depends:
      -- no version constraints necessary, because they are already
      -- given by library
      multistate,
      base,
      tfp,
      transformers
  } else {
    buildable: False
  }
  ghc-options: -Wall
  main-is: Test.hs
  hs-source-dirs: test
}

executable multistate-example {
  if flag(build-example) {
    buildable: True
    build-depends:
      -- no version constraints necessary, because they are already
      -- given by library
      multistate,
      base,
      mtl,
      tfp,
      transformers
  } else {
    buildable: False
  }
  main-is: Example.hs
  hs-source-dirs: example
}


package-hashes:
    MD5:e4f56b4294d688d7466a54b721306824
    SHA1:ec7165e81309306fa0759ed8f236ec8037be33e9
    SHA256:3a5e10384de7d975e1bafe07f12c89a4f32fac57e2dcd4353a935c333d878eae
    SHA512:2c205a34f2181a83377f65063d6daff92a9e665f537623cf264ec4f40d4b0a39aae07fe9b74981908d3ee11786408e3eba2dc15bd20c4691cfc4eb3c760eae06
    Skein512_512:5c10cd9151b80189324f6ff5f2c0de445e3a7db8cf80698f4ede4f7b7473bad74f1d25a61e5d6e493e7b5bb315f756f309a2cecd943d6bbc2ccb8b8163cde442

package-locations:
    https://hackage.haskell.org/package/multistate-0.1.3.1/multistate-0.1.3.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/multistate-0.1.3.1.tar.gz

package-size: 8592
