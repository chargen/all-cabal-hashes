-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:dbcccac97652d01f3246f28f4b1f4c0a
    SHA1:d99dc68b4c34935752f52e0164bb42d25773e50b
    SHA256:06c97fac740e17c7ce5970fb5109fd3b46f39853a86193754e9b0877a151ad46
    SHA512:3cf3b896738eb41b59cde4acea92d070add406c7dd33deb7cb8ba9bd510f1420c4361f38eddfbfb7a8bea7f21c3b047660626fb90e84739ae5d7df8da0553e41
    Skein512_512:4ac0cb8f858456328a019f6891492f0e1745245690154fea76b5437b4e49b6bfbbb450ffb672cb61e0e38922d3f3c173c9ad942910a5c7db2ed1f74845cca8ad

package-locations:
    https://hackage.haskell.org/package/haskell-cnc-0.1/haskell-cnc-0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/haskell-cnc-0.1.tar.gz

package-size: 54961
-- END Added by all-cabal-hashes-tool

Name:           haskell-cnc
Version:        0.1
License: LGPL
License-file:   LICENSE
Stability: Beta
Author:			Ryan Newton <rrnewton@gmail.com>
Maintainer:		Ryan Newton <rrnewton@gmail.com>
homepage: http://software.intel.com/en-us/articles/intel-concurrent-collections-for-cc/
Copyright: Copyright (c) 2009-2010 Intel Corporation
Synopsis: Library for parallel programming in the Intel Concurrent Collections paradigm.
Description: Intel (Concurrent Collections) CnC is a data-flow like
 deterministic parallel programming model, similar to
 stream-processing but in which nodes in the computation graph share data in tables.

Category: system, concurrent
Cabal-Version: >=1.2.3

build-type: Simple

library
  build-depends:  base, mtl, containers, time, random, array, ghc-prim, extensible-exceptions, HUnit, QuickCheck
  -- Needed for the scaling.hs plotting script:
  --   HSH, gnuplot
  -- , judy>=0.2.2

  exposed-modules:  Intel.Cnc Intel.CncPure
	            -- Various alternative schedulers:
                    Intel.Cnc3 Intel.Cnc5 Intel.Cnc6 Intel.Cnc8
  extensions: CPP, 
       -- These extensions are needed for Cnc.hs
       FlexibleInstances, BangPatterns, MagicHash, ScopedTypeVariables, DeriveDataTypeable, MultiParamTypeClasses,
       -- And the following are needed for CncPure.hs:
       ExistentialQuantification, ScopedTypeVariables, BangPatterns, NamedFieldPuns, RecordWildCards

  GHC-Options: -O2 
--  cpp-options: -DUSE_GMAP 
-- -Wall 
  install-includes: ntimes ntimes_minmedmax README.txt haskell_cnc.h Makefile install_environment_vars.sh 
                    default_opt_settings.sh runcnc run_all_examples.sh scaling.hs 
                    examples/hello_world.hs examples/mandel.hs examples/primes.hs examples/primes2.hs 
                    examples/sched_tree.hs examples/threadring_onestep.hs examples/threadring.hs 
                    examples/embarrassingly_par.hs examples/fib.hs examples/nbody.hs
                    Intel/Cnc.Header.hs Intel/shared_5_6.hs Intel/CncUtil.hs

  -- This seems to be completly ignored by cabal currently:
  -- Test testit
  --   type: library-1
  --   test-is: Intel.Cnc

Executable runAllTests
  Main-is:           runAllTests.hs
  Build-Depends:     base >= 3 && < 5, directory, process
  other-modules:  Intel.Cnc Intel.CncPure
  extensions: CPP
  GHC-Options: -O2 -threaded 
--  cpp-options: -DUSE_GMAP
-- Intel.CncUtil
