name:            route-generator
version:         0.6.1
cabal-version:   >= 1.8
license:         OtherLicense
license-file:    COPYING
category:        Utility
copyright:       Â© 2012 Stephen Paul Weber
author:          Stephen Paul Weber <singpolyma@singpolyma.net>
maintainer:      Stephen Paul Weber <singpolyma@singpolyma.net>
stability:       experimental
tested-with:     GHC == 7.0.3
synopsis:        Utility to generate routes for use with yesod-routes
homepage:        http://github.com/singpolyma/route-generator
bug-reports:     http://github.com/singpolyma/route-generator/issues
build-type:      Simple
description:
        Most of the defacto Haskell web routing libraries are either linear
        in complexity, or require lots of extra extensions, like Template
        Haskell.
        .
        Luckily, yesod-routes has Yesod.Routes.Dispatch, which is a very clean,
        efficient, and extension-free router.  Writing routes out in code can,
        however, be quite verbose.  This utility is a code generator to produce
        routes compatible with Yesod.Routes.Dispatch from a nice input format.
        .
        Example:
        .
        > GET /       => home
        > GET /post/: => showPost
        > PUT /*      => updateSomething
        .
        > ./routeGenerator -r -m SomeModule routes.txt
        .
        Will generate routes that map the correct HTTP verb (which you should
        pass as a prepended "path segment" to your Dispatch) and path to
        functions imported from the module specified in the second parameter.
        .
        A colon matches any path segment, and passes the matched segment
        through to the specified function, passing each match segment in order.
        The expected type of the segment is inferred from the type of the
        function.  If the segment cannot be parsed as that type, the path does
        not match.  Parsing is done with Web.PathPieces.fromPathPiece.
        .
        An asterisk at the end of the path causes rhHasMulti to be set to True,
        meaning that any path segments after what has been specified will be
        allowed.

extra-source-files:
        README

executable routeGenerator
        main-is: routeGenerator.hs

        build-depends:
                base == 4.*,
                text >= 0.7,
                attoparsec >= 0.10.0.0,
                yesod-routes,
                network

source-repository head
        type:     git
        location: git://github.com/singpolyma/route-generator.git


package-hashes:
    MD5:374ad3f1d29af1bb1e47b661d478cdff
    SHA1:6974807a74f8ccb79e92fa66a7a4c04eb6cd4ca0
    SHA256:86c1978d9e08de70989f91ef4a65e204bf48fab879c65b28a1b9dbf4eb58d92d
    SHA512:801bd4419b6aaf080586d72fc0a302749a94df73065260213fa5e6a82b46d74f48228f8fd795ca35e1042315d5793f8f96b473883af3cbc02589f355fc2ba255
    Skein512_512:7fbdfcc1cc5fa5e8cbba42743e2734f8285afe446b4ed4044b78760cd2ccbe3cdef82e1ce2dcbdc21e5cce5ac0a100df63e37822a248999cfae43586c6d3fd1b

package-locations:
    https://hackage.haskell.org/package/route-generator-0.6.1/route-generator-0.6.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/route-generator-0.6.1.tar.gz

package-size: 4761
