name:            route-generator
version:         0.5
cabal-version:   >= 1.8
license:         OtherLicense
license-file:    COPYING
category:        Utility
copyright:       Â© 2012 Stephen Paul Weber
author:          Stephen Paul Weber <singpolyma@singpolyma.net>
maintainer:      Stephen Paul Weber <singpolyma@singpolyma.net>
stability:       experimental
tested-with:     GHC == 7.0.3
synopsis:        Utility to generate routes for use with yesod-routes
homepage:        http://github.com/singpolyma/route-generator
bug-reports:     http://github.com/singpolyma/route-generator/issues
build-type:      Simple
description:
        Most of the defacto Haskell web routing libraries are either linear
        in complexity, or require lots of extra extensions, like Template
        Haskell.
        .
        Luckily, yesod-routes has Yesod.Routes.Dispatch, which is a very clean,
        efficient, and extension-free router.  Writing routes out in code can,
        however, be quite verbose.  This utility is a code generator to produce
        routes compatible with Yesod.Routes.Dispatch from a nice input format.
        .
        Example:
        .
        > GET /       => home
        > GET /post/: => showPost
        > PUT /*      => updateSomething
        .
        > ./routeGenerator -r -m SomeModule routes.txt
        .
        Will generate routes that map the correct HTTP verb (which you should
        pass as a prepended "path segment" to your Dispatch) and path to
        functions imported from the module specified in the second parameter.
        .
        A colon matches any path segment, and passes the matched segment
        through to the specified function, passing each match segment in order.
        The expected type of the segment is inferred from the type of the
        function.  If the segment cannot be parsed as that type, the path does
        not match.  Parsing is done with Web.PathPieces.fromPathPiece.
        .
        An asterisk at the end of the path causes rhHasMulti to be set to True,
        meaning that any path segments after what has been specified will be
        allowed.

extra-source-files:
        README

executable routeGenerator
        main-is: routeGenerator.hs

        build-depends:
                base == 4.*,
                text >= 0.7,
                attoparsec >= 0.10.0.0,
                yesod-routes,
                network

source-repository head
        type:     git
        location: git://github.com/singpolyma/route-generator.git


package-hashes:
    MD5:0554b05e9ffa7dacccda7b0d0c0a8c76
    SHA1:7e7c94f525740930add61ab9e20ae3ec9fc56426
    SHA256:1672293e2420ea72d2f7e25d2fbcff738a3c6474b10853633feb709225971615
    SHA512:14839d3801fc00424ef2da205e62127da5d49e2925d4fe582f3070bef7c6d27b38b4c5b7f434c377bf365761ba8527b024094972ff1b441fef58487eda0e2b6f
    Skein512_512:8cad5b979cff7f37692b6bf6c0d82f5369e269de9ea0a779fc5d6fe1f593cb8b8b27429c30e0e5cf3bf680aa38f4371484b602cc5b9c3eab41d9daf4f1aa8464

package-locations:
    https://hackage.haskell.org/package/route-generator-0.5/route-generator-0.5.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/route-generator-0.5.tar.gz

