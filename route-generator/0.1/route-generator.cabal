name:            route-generator
version:         0.1
cabal-version:   >= 1.8
license:         OtherLicense
license-file:    COPYING
category:        Utility
copyright:       Â© 2012 Stephen Paul Weber
author:          Stephen Paul Weber <singpolyma@singpolyma.net>
maintainer:      Stephen Paul Weber <singpolyma@singpolyma.net>
stability:       experimental
tested-with:     GHC == 7.0.3
synopsis:        Utility to generate routes for use with yesod-routes
homepage:        http://github.com/singpolyma/route-generator
bug-reports:     http://github.com/singpolyma/route-generator/issues
build-type:      Simple
description:
        Most of the defacto Haskell web routing libraries are either linear
        in complexity, or require lots of extra extensions, like Template
        Haskell.
        .
        Luckily, yesod-routes has Yesod.Routes.Dispatch, which is a very clean,
        efficient, and extension-free router.  Writing routes out in code can,
        however, be quite verbose.  This utility is a code generator to produce
        routes compatible with Yesod.Routes.Dispatch from a nice input format.
        .
        Example:
        .
        > GET /       => home
        > GET /post/: => showPost
        > PUT /*      => updateSomething
        .
        > ./routeGenerator routes.txt SomeModule
        .
        Will generate routes that map the correct HTTP verb (which you should
        pass as a prepended "path segment" to your Dispatch) and path to
        functions imported from the module specified in the second parameter.
        .
        A colon matches any path segment, and passes the matched segment
        through to the specified function, passing each match segment in order.
        The expected type of the segment is inferred from the type of the
        function.  If the segment cannot be parsed as that type, the path does
        not match.  Parsing is done with Web.PathPieces.fromPathPiece.
        .
        An asterisk at the end of the path causes rhHasMulti to be set to True,
        meaning that any path segments after what has been specified will be
        allowed.

extra-source-files:
        README

executable routeGenerator
        main-is: routeGenerator.hs

        build-depends:
                base == 4.*,
                text >= 0.7,
                attoparsec >= 0.10.0.0,
                yesod-routes

source-repository head
        type:     git
        location: git://github.com/route-generator/BitBrawl.git


package-hashes:
    MD5:23762cdea14c0c36da82444113437f44
    SHA1:2f4fe18bb5762b7177d18532d812fac9b368b5c9
    SHA256:a39f3640ba9d07822d633109bd5e236c4ee32815b26968a0ae6e1ee897d4f093
    SHA512:728e7049df0373ed1c743ebe31bf6d0e13aa45e2128cfc3314ed6f61fcc5d7a55b2624c68e8bb66f476085eebcbb0d0fd3b1737d93fcecdc46834e64e64d9cd8
    Skein512_512:5251b19eb931369eb235aadaf439e531fda0f569b05da65f97598d6aa9620517b202e834358d4251bf1395960b1ec521f34458d3fc13524f483a393ce4170a09

package-locations:
    https://hackage.haskell.org/package/route-generator-0.1/route-generator-0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/route-generator-0.1.tar.gz

