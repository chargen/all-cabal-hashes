name:            route-generator
version:         0.3
cabal-version:   >= 1.8
license:         OtherLicense
license-file:    COPYING
category:        Utility
copyright:       Â© 2012 Stephen Paul Weber
author:          Stephen Paul Weber <singpolyma@singpolyma.net>
maintainer:      Stephen Paul Weber <singpolyma@singpolyma.net>
stability:       experimental
tested-with:     GHC == 7.0.3
synopsis:        Utility to generate routes for use with yesod-routes
homepage:        http://github.com/singpolyma/route-generator
bug-reports:     http://github.com/singpolyma/route-generator/issues
build-type:      Simple
description:
        Most of the defacto Haskell web routing libraries are either linear
        in complexity, or require lots of extra extensions, like Template
        Haskell.
        .
        Luckily, yesod-routes has Yesod.Routes.Dispatch, which is a very clean,
        efficient, and extension-free router.  Writing routes out in code can,
        however, be quite verbose.  This utility is a code generator to produce
        routes compatible with Yesod.Routes.Dispatch from a nice input format.
        .
        Example:
        .
        > GET /       => home
        > GET /post/: => showPost
        > PUT /*      => updateSomething
        .
        > ./routeGenerator -r -m SomeModule routes.txt
        .
        Will generate routes that map the correct HTTP verb (which you should
        pass as a prepended "path segment" to your Dispatch) and path to
        functions imported from the module specified in the second parameter.
        .
        A colon matches any path segment, and passes the matched segment
        through to the specified function, passing each match segment in order.
        The expected type of the segment is inferred from the type of the
        function.  If the segment cannot be parsed as that type, the path does
        not match.  Parsing is done with Web.PathPieces.fromPathPiece.
        .
        An asterisk at the end of the path causes rhHasMulti to be set to True,
        meaning that any path segments after what has been specified will be
        allowed.

extra-source-files:
        README

executable routeGenerator
        main-is: routeGenerator.hs

        build-depends:
                base == 4.*,
                text >= 0.7,
                attoparsec >= 0.10.0.0,
                yesod-routes

source-repository head
        type:     git
        location: git://github.com/singpolyma/route-generator.git


package-hashes:
    MD5:4ed33e24f83c399aa27cc5a379c7c22d
    SHA1:d441e8b5ca11a27e656038abb308c1f4c1b5b51c
    SHA256:de354dbba76c285b3fea5ae762cbcd449f93171e57570a2ffc20cce40e6b8f1b
    SHA512:80489b6ea8d3cc062d4d38b298d66153fad27258762f266f6299ad3d905866e271fa9d5785ff50fcb06f5683d2014904ff7f0f3e41861532dcadef191d982750
    Skein512_512:094518c3af09a94b4ab1aabcde372a89763e97d345043dc7d87986e6aba2b54f06c1ed29a6dc1212a1bb2f616b6ae8cdd7c96f746c94a7c5212b0db68abc035c

package-locations:
    https://hackage.haskell.org/package/route-generator-0.3/route-generator-0.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/route-generator-0.3.tar.gz

