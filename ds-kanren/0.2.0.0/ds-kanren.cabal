name:                ds-kanren
version:             0.2.0.0
synopsis:            A subset of the miniKanren language
description:
  ds-kanren is an implementation of the <http://minikanren.org miniKanren> language.
  .
  == What's in ds-kanren?
  .
  ['disconj']
    Try the left and the right and gather solutions that satisfy
    either one.
  ['fresh']
    Create a fresh logical variable
  ['===']
    Equate two terms. This will backtrack if we can't unify
    them in this branch.
  ['run']
    Actually run a logical computation and return results and
    the constraints on them.
  .
  In addition to these core combinators, we also export a few
  supplimentary tools.
  .
  ['=/=']
    The opposite of '===', ensure that the left and right
    never unify.
  .
  == The Classic Example
  .
  We can define the classic @appendo@ relationship by encoding
  lists in the Lisp "bunch-o-pairs" method.
  .
  > appendo :: Term -> Term -> Term -> Predicate
  > appendo l r o =
  >   conde [ program [l === "nil",  o === r]
  >         , manyFresh $ \h t o ->
  >             program [ Pair h t === l
  >                     , appendo t r o
  >                     , Pair h o === o ]]
  .
  Once we have a relationship, we can run it backwards and forwards
  as we can with most logic programs.
  .
  >>> let l = list ["foo", "bar"]
  .
  >>> map fst . runN 1 $ \t -> appendo t l l
  [nil]
  >>> map fst . runN 1 $ \t -> appendo l t l
  [nil]
  >>> map fst . runN 1 $ \t -> appendo l l t
  [(foo, (bar, (foo, (bar, nil))))]
  .
  == Related Links
  .
  Some good places to start learning about miniKanren would be
  .
     * <http://www.amazon.com/The-Reasoned-Schemer-Daniel-Friedman/DP/0262562146 The Reasoned Schemer>
     * <http://www.infoq.com/presentations/miniKanren A presentation at StrangeLoop>
     * <https://github.com/miniKanren/miniKanren The canonical implementation>
license:             MIT
license-file:        LICENSE
author:              Danny Gratzer
maintainer:          jozefg@cmu.edu
category:            Language
build-type:          Simple
cabal-version:       >=1.10
source-repository head
  type:     hg
  location: http://bitbucket.org/jozefg/ds-kanren

library
  exposed-modules:     Language.DSKanren
                     , Language.DSKanren.Core
                     , Language.DSKanren.Sugar
  build-depends:       base >=4 && <5
                     , containers >=0.4
                     , logict
  hs-source-dirs:      src
  default-language:    Haskell2010
Test-Suite test-unify:
  hs-source-dirs: test
  type:               exitcode-stdio-1.0
  main-is:            Unify.hs
  hs-source-dirs:     test
  build-depends:      ds-kanren
                    , tasty
                    , tasty-quickcheck
                    , QuickCheck
                    , base >=4 && <5
  default-language:    Haskell2010
Test-Suite test-list-ops:
  hs-source-dirs: test
  type:               exitcode-stdio-1.0
  main-is:            List.hs
  hs-source-dirs:     test
  build-depends:      ds-kanren
                    , tasty
                    , tasty-quickcheck
                    , QuickCheck
                    , base >=4 && <5
  default-language:    Haskell2010

package-hashes:
    MD5:d1fc1f48a54736c7a1b3980693ed845c
    SHA1:a9ab50a1150271ff529d78f9cc6de23f24ac74c4
    SHA256:5d208c291be1c2989ce228cf70e997d156d610e02b5433d300478180220fd0d6
    SHA512:6102ec22ffa19268e0bc36d8b34de5faf1514aa140595fbc5301b222745fa45de6bb29ab3eb88b883e94d52a54a4815f4b8d264ea4b82a59ae1667630f66f3ea
    Skein512_512:27192719ee557b8054f5269b300cf7a6cd22413d679fc3d8228be395b3df51341ddf883b54d712fb067ee6ef6f35d173c46b47ac3870d406dc782ecc0ccdaf3d

package-locations:
    https://hackage.haskell.org/package/ds-kanren-0.2.0.0/ds-kanren-0.2.0.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/ds-kanren-0.2.0.0.tar.gz

package-size: 6283
