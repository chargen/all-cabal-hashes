-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:305c8bce1a72d76adaeeaeb1f93f2dfb
    SHA1:ee4e36f3e79223d7c49d1bae97b3ae164e317f37
    SHA256:855be0af616c75d30bf36939382ca5f6e6a1aeee0145e17c5a0e087193ab5a32
    SHA512:aeedd3ca798756729dbdc5148fd7834a62671f0c2bfb0df0d804c6abab04e0e3e496a755a58b49af510b63d23f4f7a65bdc12ecd18cb91b575ee8a5969ce4fd8
    Skein512_512:6f74709824de01e887989c6d245dd49b2913f1915a0e642a62e0eeb0b2b88f48e2bed4c0df655ca5b719a1d2cdfe6320ba853c2b9586fec7a7add6d9aa8f544d

x-package-locations:
    https://hackage.haskell.org/package/yap-0.0/yap-0.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/yap-0.0.tar.gz

x-package-size: 13249
-- END Added by all-cabal-hashes-tool

Name:           yap
Version:        0.0
Build-Depends:  base >= 4.4 && < 5
Build-Type:     Simple
License:        BSD3
license-file:   LICENSE
Author:         Ross Paterson <ross@soi.city.ac.uk>
Maintainer:     Ross Paterson <ross@soi.city.ac.uk>
Synopsis:       yet another prelude - a simplistic refactoring with algebraic
                classes
Description:    A simple refactoring of the Prelude numeric classes,
                attempting backwards compatibility for clients by defining
                a few algebraic classes as superclasses of the Haskell 98
                numeric classes.  This yields the following class hierarchy
                (grey classes are unchanged):
                .
                <<http://code.haskell.org/~ross/images/hierarchy.png>>
                .
                "Prelude.YAP" is an almost-compatible replacement
                for the standard Haskell Prelude, as long as you're
                not defining instances of the numeric classes
                (though defaulting will be affected).
                When importing it, turn on @RebindableSyntax@.
                .
                "Data.YAP.Algebra" contains just the new classes;
                you'll need to import it if you want access to the
                new names, including to define instances.
                .
                Other modules contain some example instances, including
                for the existing types @Complex@ and @Ratio@.
Exposed-Modules:
                Data.YAP.Algebra
                Data.YAP.Complex
                Data.YAP.Matrix
                Data.YAP.Polynomial
                Data.YAP.Quantity
                Data.YAP.Ratio
                Data.YAP.Vector
                Prelude.YAP
Other-Modules:  Data.YAP.Algebra.Internal
                Prelude.YAP.Internal
