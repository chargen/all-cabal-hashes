-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:43b8515d962309a4c637220b3e24a5f2
    SHA1:13a2546dd71e3ca0fd4c589bef1f5b3ce25325b9
    SHA256:87f4e2236e881311ed2bb2d914a71c954409647f82d3879b65f4aa0100e246d7
    SHA512:0b910193d1b0708cd54cf2cbeb872dcd8cad9ff436ee7472931ad353cf82f666ed5ef4e3f766be17969c42934901b6905f23324831d7fafea810d9ebfc735e35
    Skein512_512:51d75ded701e9a2524c36dbacd5cd1ecb9eeb9e73fe78ef1b3cb6c611148b82cb8138e6ba85b53580240a1273e4d2f9725845d7fd5206045fb5d37cc7782cfeb

package-locations:
    https://hackage.haskell.org/package/Vec-0.9.9/Vec-0.9.9.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Vec-0.9.9.tar.gz

package-size: 18190
-- END Added by all-cabal-hashes-tool

Name:                Vec
Version:             0.9.9
License:             BSD3
License-file:        LICENSE
Author:              Scott E. Dillard
Maintainer:          Scott E. Dillard <sedillard@gmail.com>
Homepage:            http://graphics.cs.ucdavis.edu/~sdillard/Vec
Stability:           Experimental
Synopsis:            Fixed-length lists and low-dimensional linear algebra.
Description:         
   Vectors are represented by lists with type-encoded lengths. The constructor
   is @:.@, which acts like a cons both at the value and type levels, with @()@
   taking the place of nil. So @x:.y:.z:.()@ is a 3d vector. The library
   provides a set of common list-like functions (map, fold, etc) for working
   with vectors. Built up from these functions are a small but useful set of
   linear algebra operations: matrix multiplication, determinants, solving
   linear systems, inverting matrices.
Cabal-version:       >=1.2.3
Build-type:          Simple
Category:            Data,Math

library
    Build-Depends:      base<=5,array,ghc-prim

    Exposed-modules:    Data.Vec 
                        Data.Vec.Base,
                        Data.Vec.LinAlg,
                        Data.Vec.Nat,
                        Data.Vec.Packed
    Extensions: 
                        EmptyDataDecls,
                        FlexibleContexts,
                        FlexibleInstances, 
                        FunctionalDependencies,
                        MultiParamTypeClasses, 
                        NoMonomorphismRestriction,
                        OverlappingInstances,
                        ScopedTypeVariables,
                        TypeFamilies,
                        TypeOperators, 
                        TypeSynonymInstances,
                        UndecidableInstances
