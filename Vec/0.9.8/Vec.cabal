-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:75026124cf443eec737af0ce58fcb58a
    SHA1:ab8ca81c63e9cc4f1e059c485094c9094bd8cda8
    SHA256:dbe8dad65ddeb689f861ac58637bdcaa2ec30bed7a9f8490934a40292ef05879
    SHA512:eec78b93adbb9fb84cd0010ab24d6040d76e5f27e5fca9c0009fb8d15af1df4eb849da9ccb681d43311dcfedd7ecc4509eb19712f9359d0adda9bab23a1cabf6
    Skein512_512:c2f4649d6989b704d99ad05d60ec90bb1b077737d34e52eca9b02eb7d525baece8479f871e7afec1b250e32b9646c7efa44dcf18ac5b4750e3aac8ce67861267

package-locations:
    https://hackage.haskell.org/package/Vec-0.9.8/Vec-0.9.8.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Vec-0.9.8.tar.gz

package-size: 18438
-- END Added by all-cabal-hashes-tool

Name:                Vec
Version:             0.9.8
License:             BSD3
License-file:        LICENSE
Author:              Scott E. Dillard
Maintainer:          Scott E. Dillard <sedillard@gmail.com>
Homepage:            http://graphics.cs.ucdavis.edu/~sdillard/Vec
Stability:           Experimental
Synopsis:            Fixed-length lists and low-dimensional linear algebra.
Description:         
   Vectors are represented by lists with type-encoded lengths. The constructor
   is @:.@, which acts like a cons both at the value and type levels, with @()@
   taking the place of nil. So @x:.y:.z:.()@ is a 3d vector. The library
   provides a set of common list-like functions (map, fold, etc) for working
   with vectors. Built up from these functions are a small but useful set of
   linear algebra operations: matrix multiplication, determinants, solving
   linear systems, inverting matrices.
Cabal-version:       >=1.2.3
Build-type:          Simple
Category:            Data,Math

library
    Build-Depends:      base<=5,QuickCheck>=2&&<3,array,ghc-prim

    Exposed-modules:    Data.Vec 
                        Data.Vec.Base,
                        Data.Vec.LinAlg,
                        Data.Vec.Nat,
                        Data.Vec.Packed
    Extensions: 
                        EmptyDataDecls,
                        FlexibleContexts,
                        FlexibleInstances, 
                        FunctionalDependencies,
                        MultiParamTypeClasses, 
                        NoMonomorphismRestriction,
                        OverlappingInstances,
                        ScopedTypeVariables,
                        TypeFamilies,
                        TypeOperators, 
                        TypeSynonymInstances,
                        UndecidableInstances
