-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:6cd178df3302774aff86f58618dd4591
    SHA1:824b71387c15210870593e3081a2cc546a5b0a70
    SHA256:ca315eb3a52ba2883d6bd9f6bdd4ebedd8a6c2ba195c6ec935f565172367a6c2
    SHA512:df4d1cc17611ddd5386b8390f988a36005586837d75d28ff454ea076652b47e30cea2d7f7d5007c54d9a9f304118ba6b6580e450e0b85f04d03921780e030d05
    Skein512_512:3b0aa173bf1913f417f6595e17f41623d180d7d391bc1a38cefcbfbfdb815bfc8285b3e988c18c39702140219fb12072289f6a6f4451847b1ffac9174ded0ac5

x-package-locations:
    https://hackage.haskell.org/package/Vec-0.9.2/Vec-0.9.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Vec-0.9.2.tar.gz

x-package-size: 15753
-- END Added by all-cabal-hashes-tool

Name:                Vec
Version:             0.9.2
License:             BSD3
License-file:        LICENSE
Author:              Scott E. Dillard
Maintainer:          Scott E. Dillard <sedillard@gmail.com>
Stability:           Experimental
Synopsis:            Fixed-length lists and low-dimensional linear algebra.
Description:         
   Vectors are represented by lists with type-encoded lengths. The constructor
   is @:.@, which acts like a cons both at the value and type levels, with @()@
   taking the place of nil. So @x:.y:.z:.()@ is a 3d vector. The library
   provides a set of common list-like functions (map, fold, etc) for working
   with vectors. Built up from these functions are a small but useful set of
   linear algebra operations: matrix multiplication, determinants, solving
   linear systems, inverting matrices.
Cabal-version:       >=1.2
Build-type:          Simple
Category:            Data,Math

library
    Build-Depends:      base,QuickCheck

    Exposed-modules:    Data.Vec 
                        Data.Vec.Base,
                        Data.Vec.LinAlg,
                        Data.Vec.Nat,
                        Data.Vec.Instances
                        Data.Vec.Packed
    Extensions: 
                        BangPatterns,
                        EmptyDataDecls,
                        ExistentialQuantification,
                        FlexibleInstances, 
                        FlexibleContexts,
                        FunctionalDependencies,
                        MultiParamTypeClasses, 
                        NoMonomorphismRestriction,
                        ScopedTypeVariables,
                        TypeOperators, 
                        TypeSynonymInstances,
                        TypeFamilies,
                        UndecidableInstances
