-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:613df2c87717acbf8cb1d763bdf6c7ca
    SHA1:1e66a49fa4bc8e43a764e67427688f1bb8a8d642
    SHA256:bc9c1f782eedd71a6e2ba2cbb62947c34bc265b6ca791dae694bb0e95995aac0
    SHA512:ab5c4301d49b75de67e97442e57d90ace794c520942da261345e273420d362a6bb5979cfec5c13b8244fae596d17bbd48c200a3b84ab5e9422321d3036fe4ea4
    Skein512_512:c7b2d721be517e21c4a1e94d1f0f53759dade73dd2a31fd201cf651c09f026f9aee08d74026bbf5a1a123968fab2337cdeb0e82708c60717c7d33013553f0532

x-package-locations:
    https://hackage.haskell.org/package/Vec-0.9.3/Vec-0.9.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Vec-0.9.3.tar.gz

x-package-size: 15703
-- END Added by all-cabal-hashes-tool

Name:                Vec
Version:             0.9.3
License:             BSD3
License-file:        LICENSE
Author:              Scott E. Dillard
Maintainer:          Scott E. Dillard <sedillard@gmail.com>
Stability:           Experimental
Synopsis:            Fixed-length lists and low-dimensional linear algebra.
Description:         
   Vectors are represented by lists with type-encoded lengths. The constructor
   is @:.@, which acts like a cons both at the value and type levels, with @()@
   taking the place of nil. So @x:.y:.z:.()@ is a 3d vector. The library
   provides a set of common list-like functions (map, fold, etc) for working
   with vectors. Built up from these functions are a small but useful set of
   linear algebra operations: matrix multiplication, determinants, solving
   linear systems, inverting matrices.
Cabal-version:       >=1.2
Build-type:          Simple
Category:            Data,Math

library
    Build-Depends:      base,QuickCheck<2

    Exposed-modules:    Data.Vec 
                        Data.Vec.Base,
                        Data.Vec.LinAlg,
                        Data.Vec.Nat,
                        Data.Vec.Packed
    Extensions: 
                        EmptyDataDecls,
                        FlexibleContexts,
                        FlexibleInstances, 
                        FunctionalDependencies,
                        MultiParamTypeClasses, 
                        NoMonomorphismRestriction,
                        OverlappingInstances,
                        ScopedTypeVariables,
                        TypeFamilies,
                        TypeOperators, 
                        TypeSynonymInstances,
                        UndecidableInstances
