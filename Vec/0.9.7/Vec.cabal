-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:5bb8cfd89a176553f885742248bc7167
    SHA1:45701bfb65f4154261743e34fbecaee38074704f
    SHA256:a67197f4dc022d6119a790e029a9475a17bb04ad812006bb154e5da9cd8f7ac7
    SHA512:47625d43f638c103314ee9186177b0dc1cdb8ffa9e9700d8416ece8c0758691c10077082f2c3a48e5822c3f810dc36d6407be00cb031ec7b1daa5ae5f7ce728b
    Skein512_512:ac41f3057fee3fd0daaa0207da2471eb6839c0a3a875b1bcc3b63b4b85637feb738914fbf8c0cc849e1e1c445260bca9004d5998e07e2052c46574402a095ba4

package-locations:
    https://hackage.haskell.org/package/Vec-0.9.7/Vec-0.9.7.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Vec-0.9.7.tar.gz

package-size: 18369
-- END Added by all-cabal-hashes-tool

Name:                Vec
Version:             0.9.7
License:             BSD3
License-file:        LICENSE
Author:              Scott E. Dillard
Maintainer:          Scott E. Dillard <sedillard@gmail.com>
Homepage:            http://graphics.cs.ucdavis.edu/~sdillard/Vec
Stability:           Experimental
Synopsis:            Fixed-length lists and low-dimensional linear algebra.
Description:         
   Vectors are represented by lists with type-encoded lengths. The constructor
   is @:.@, which acts like a cons both at the value and type levels, with @()@
   taking the place of nil. So @x:.y:.z:.()@ is a 3d vector. The library
   provides a set of common list-like functions (map, fold, etc) for working
   with vectors. Built up from these functions are a small but useful set of
   linear algebra operations: matrix multiplication, determinants, solving
   linear systems, inverting matrices.
Cabal-version:       >=1.2.3
Build-type:          Simple
Category:            Data,Math

library
    Build-Depends:      base<=5,QuickCheck<2,array,ghc-prim

    Exposed-modules:    Data.Vec 
                        Data.Vec.Base,
                        Data.Vec.LinAlg,
                        Data.Vec.Nat,
                        Data.Vec.Packed
    Extensions: 
                        EmptyDataDecls,
                        FlexibleContexts,
                        FlexibleInstances, 
                        FunctionalDependencies,
                        MultiParamTypeClasses, 
                        NoMonomorphismRestriction,
                        OverlappingInstances,
                        ScopedTypeVariables,
                        TypeFamilies,
                        TypeOperators, 
                        TypeSynonymInstances,
                        UndecidableInstances
