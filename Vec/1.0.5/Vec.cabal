-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:a3914cdb67257af152c845c1728a603f
    SHA1:8674a4213e17d7ab3bf4378779781bdba87f1da9
    SHA256:f523945104cf8d8c11f0299dc8a3fb9579d4eaf8d20a1403fbe2d8764729d343
    SHA512:b744f7f363c930b2413ddee774c450db04a6a4d49834a848619358006734a02bfafb153a2b198085295b9c59854144b2ddbd89da2c42b854dfe6f67dae174696
    Skein512_512:a20c8aa9fa9865e0962e865e2638d658a689f984c7634514a3d000c7de556be839b4b31a83bc99d02e94182498f4e7948f3d9748029f88c6f16ee0e99b401b90

package-locations:
    https://hackage.haskell.org/package/Vec-1.0.5/Vec-1.0.5.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Vec-1.0.5.tar.gz

package-size: 19675
-- END Added by all-cabal-hashes-tool

Name:                Vec
Version:             1.0.5
License:             BSD3
License-file:        LICENSE
Author:              Scott E. Dillard
Maintainer:          Scott E. Dillard <sedillard@gmail.com>
Homepage:            http://github.net/sedillard/Vec
Stability:           Experimental
Synopsis:            Fixed-length lists and low-dimensional linear algebra.
Description:         
   Vectors are represented by lists with type-encoded lengths. The constructor
   is @:.@, which acts like a cons both at the value and type levels, with @()@
   taking the place of nil. So @x:.y:.z:.()@ is a 3d vector. The library
   provides a set of common list-like functions (map, fold, etc) for working
   with vectors. Built up from these functions are a small but useful set of
   linear algebra operations: matrix multiplication, determinants, solving
   linear systems, inverting matrices.
Cabal-version:       >=1.2.3
Build-type:          Simple
Category:            Data,Math

library
    Build-Depends:      base<=5,array,ghc-prim

    Exposed-modules:    Data.Vec 
                        Data.Vec.Base,
                        Data.Vec.LinAlg,
                        Data.Vec.Nat,
                        Data.Vec.Packed
    Extensions: 
                        EmptyDataDecls,
                        FlexibleContexts,
                        FlexibleInstances, 
                        FunctionalDependencies,
                        MultiParamTypeClasses, 
                        NoMonomorphismRestriction,
                        OverlappingInstances,
                        ScopedTypeVariables,
                        TypeFamilies,
                        TypeOperators, 
                        TypeSynonymInstances,
                        UndecidableInstances
