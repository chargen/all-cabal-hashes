-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:d3435f0f90115c9d45e83bdf15aa1fc8
    SHA1:61fc646dc873d04b79753e5d61ea9ed72a5abe5b
    SHA256:c63e741eeb7123f2769136ed625fa44872512a5d4e9d3cb0b0fe477c17064ddd
    SHA512:181d41ddff479dfa3c990b0e480741a0b5e80ffa79882af4315d3d7d8c0aeb77a4262e8d93c4dbf11c8903e52b87afdadfe2d4fbf2b9341fade6ebfd626dd727
    Skein512_512:bff057214a42cd60320b29e63d69a46fac7589530aa805ab4ee972667c7a786e76dbc1a247b0bf7a403d06a3559d802576312e6d5151435021a6a2b7fd525b43

package-locations:
    https://hackage.haskell.org/package/Vec-0.9.1/Vec-0.9.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Vec-0.9.1.tar.gz

package-size: 15084
-- END Added by all-cabal-hashes-tool

Name:                Vec
Version:             0.9.1
License:             BSD3
License-file:        LICENSE
Author:              Scott E. Dillard
Maintainer:          Scott E. Dillard <sedillard@gmail.com>
Stability:           Experimental
Synopsis:            Fixed-length lists and low-dimensional linear algebra.
Description:         
   Vectors are represented by lists with type-encoded lengths. The constructor
   is @:.@, which acts like a cons both at the value and type levels, with @()@
   taking the place of nil. So @x:.y:.z:.()@ is a 3d vector. The library
   provides a set of common list-like functions (map, fold, etc) for working
   with vectors. Built up from these functions are a small but useful set of
   linear algebra operations: matrix multiplication, determinants, solving
   linear systems, inverting matrices.
Cabal-version:       >=1.2
Build-type:          Simple
Category:            Data,Math

library
    Build-Depends:      base

    Exposed-modules:    Data.Vec 
                        Data.Vec.Base,
                        Data.Vec.LinAlg,
                        Data.Vec.Nat,
                        Data.Vec.Instances
                        Data.Vec.Packed
    Extensions: 
                        BangPatterns,
                        EmptyDataDecls,
                        ExistentialQuantification,
                        FlexibleInstances, 
                        FlexibleContexts,
                        FunctionalDependencies,
                        MultiParamTypeClasses, 
                        NoMonomorphismRestriction,
                        ScopedTypeVariables,
                        TypeOperators, 
                        TypeSynonymInstances,
                        UndecidableInstances
