-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:b46452cd0d8d1efe3092ba2ca11216a5
    SHA1:8ad56e17ec03c66dc34e48a2bb946babc689c0db
    SHA256:a0dbcf7f20b0324140c3cdbdabf67016d28abb9ce6d08224ee58d5a9cbcf6523
    SHA512:35e09afbe32c261d0aee4af27ed7c055d21b700fb3b72c6219f7ef52ce52a62b093e9172236958a3c89890c912122f5cd68a890dfdb1af0803c602d3eb6d6d59
    Skein512_512:fdef08ebe9062116787a326777ccce5a32d2bb759b11df045574fc7df205b354326de7f3fbaaf6048a015eaca5e0d4f5dbfc4fb07baed8d84953e93753abd349

x-package-locations:
    https://hackage.haskell.org/package/noodle-0.0.19/noodle-0.0.19.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/noodle-0.0.19.tar.gz

x-package-size: 20995
-- END Added by all-cabal-hashes-tool

Name: noodle
Version: 0.0.19
Cabal-Version: >= 1.8
License: OtherLicense
License-File: LICENSE
Author:     Jesse Rudolph
Maintainer: Jesse Rudolph
Homepage: https://github.com/jessopher/noodle
Synopsis: the noodle programming language


Description:
    The @noodle@ Programming Language Interpreter
    .
    Noodle is two things. It is a programming language, and it is this implementation
    of that programming language.
    .
    /Briefly.../
    .
    Noodle (the language) is functional, latently typed, and statically scoped.
    Noodle has no language level concept of mutable state. 
    Data abstraction is handled with 'scope bound' wrappers that prevent pattern matching on some value outside 
    of some mutually recursive scope. 
    Numbers are arbitrary precision integer ratios. 
    Operators are (possibly) high order functions with special application rules that omit evaluation of the 
    right operand if their application to the left operand does not return a function. 
    Modules are mutually recursive internally, are first class, and can be parameterized by constructing them with functions. 
    Rather than arrays or linked lists, the most basic compound data structure in noodle is a binary tree, or 'product'.
    .
    
    
    .
    the primary points of interest in this package are:
    .
    [@noodle@]      the option directed command line interface
    .
    [@noodle-repl@] the read-eval-print-loop
    .
    [@noodle-eval@] an interface for evaluating a single noodle
                    expression (computation) from stdin
    .
    .
    You may also incorporate noodle into your own program as a library,
    but this is /even less documented/ than the /completely undocumented/ command
    line interface... so I don't know why you would want to do this.

Category: Compilers/Interpreters
Build-Type: Simple

Source-Repository head
  Type:     git
  Location: git://github.com/jessopher/noodle.git

Library
  Hs-Source-Dirs: ./src/lib
  Exposed-Modules:
        Language.Noodle.Banner
        Language.Noodle.DepTree
        Language.Noodle.Evaluation
        Language.Noodle.Syntax

        Language.Noodle.Parsing.Generic
        Language.Noodle.Parsing.Noodle
        Language.Noodle.Parsing.String
        Language.Noodle.Parsing.Positional

        Language.Noodle.Lib.Basic
        Language.Noodle.Lib.String
        Language.Noodle.Lib.Boolean
        Language.Noodle.Lib.Math
        Language.Noodle.Lib.IO
        Language.Noodle.Lib.Prod
        Language.Noodle.Lib.Function

  Build-Depends: base >= 3 && <= 5, filepath, directory

Executable noodle
  Main-is: Old.hs
  Hs-Source-Dirs: ./src/bin
  Build-Depends: base >= 3 && <= 5, filepath, directory, noodle

Executable noodle-repl
  Main-is: Repl.hs
  Hs-Source-Dirs: ./src/bin
  Build-Depends: base >= 3 && <= 5, filepath, directory, noodle

Executable noodle-eval
  Main-is: Eval.hs
  Hs-Source-Dirs: ./src/bin
  Build-Depends: base >= 3 && <= 5, filepath, directory, noodle

