-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:d4edc294b4c0b0ed98020e78ecf72cc5
    SHA1:2d300929ba7db033df43ceee578ba907d7fe100e
    SHA256:3f612fc9ad34e8b7a6f23d5f55a7cfcef5fbb3ce9f2a053499d22d6727684e5c
    SHA512:8d9fc01d1070571a43b21bf334e73dd4e6f7fa823e053ff4909a4b73d800de610e11e51e8adf99e8f487a78f55dc4846bca2a9cc0cd92915c0fba7b9d4f0446f
    Skein512_512:8b80d3c065c5a9657936804c31672d394213ece980f31d282a9a8accf4b601e237114f39311f5505677961d5df522d413619339962662fc95597b82e777acc6d

package-locations:
    https://hackage.haskell.org/package/compose-trans-0.1/compose-trans-0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/compose-trans-0.1.tar.gz

package-size: 3750
-- END Added by all-cabal-hashes-tool

Author:		Miguel Mitrofanov
Build-Type:	Simple
Cabal-Version:	>=1.2.3
Category:	Monads
Description:	A version of monad transformers that (a) allows one to convince the type checker that transformer application is a monad, and (b) doesn't need lots of boilerplate to add a new transformer. It's supposed to play nicely with @Control.Monad.Trans@.
		.
		In order to make a new transformer (say, @T@) an instance of @TransM@ (@TransP@, @TransF@) class, all you have to do is:
		.
		* define @instance MonadTrans T@ &#x2014; which you've probably done already
		.
		* define @instance Monad m => Monad (T m)@ &#x2014; also something quite common (for @TransP@ and @TransF@ you'd need another instance for @MonadPlus@ and @MonadFix@, respectively).
		.
		* write @instance Trans T where transMInst = instM@ &#x2014; which is exactly one line of boilerplate. Sorry about that.
		.
		After that, you can use your new and shiny transformer in compositions, like @ReaderT Char :. T :. WriterT String@ &#x2014; and such a composition would automagically become a monad transformer.
License:	BSD3
License-file:	LICENSE
Maintainer:	miguelimo38@yandex.ru
Name:		compose-trans
Synopsis:	Composable monad transformers
Version:	0.1

Library
  Build-Depends:	base >= 2 && < 5, mtl
  Exposed-Modules:	Control.Monad.Trans.Category, Control.Monad.Trans.Monad, Control.Monad.Trans.MonadFix, Control.Monad.Trans.MonadPlus
  Extensions:		GeneralizedNewtypeDeriving, RankNTypes, StandaloneDeriving, TypeOperators
  GHC-Options:		-Wall -fno-warn-orphans
  Hs-Source-Dirs:	src
