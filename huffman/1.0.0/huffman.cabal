-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:afbda0b42581e71cd2d031a97dbc437d
    SHA1:09e59e950e610e860cc2b31df2390ef1b161f99d
    SHA256:42edab9b60b9603556c3870c2fce6e587cfa2e4f03ac313453ead443d0cddd14
    SHA512:88aed1ecff6e8b1c9d58e9b6f44c904c5d478934c71410fe3c52be2d9061e1a36d472b0f9115d0bd9769ebc687ab973a361cc663d0f3172529935a59693812f7
    Skein512_512:171b5b8047e025777c7eb0f269271810d8ed81ea8d050b31e3dfde64f59908842ca3e929dd7298f6bbbdfd6efc1897fad665f11bd5f473677a56ab0c3e314dc1

package-locations:
    https://hackage.haskell.org/package/huffman-1.0.0/huffman-1.0.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/huffman-1.0.0.tar.gz

package-size: 2392
-- END Added by all-cabal-hashes-tool

Name:		huffman
Version:	1.0.0
License-File:	LICENSE
License:	BSD3
Author:		Maxime Henrion
Copyright:	2010, Maxime Henrion
Maintainer:	Maxime Henrion <mhenrion@gmail.com>
Bug-Reports:	http://bitbucket.org/mumux/huffman/issues/
Category:	Data, Compression
Synopsis:	Pure Haskell implementation of the Huffman encoding algorithm
Description:
	A simple and pure Haskell implementation of the Huffman encoding
	algorithm.
	.
	The @huffman@ function provides the original O(n log n) algorithm
	implemented with a priority queue.  If the input symbols are sorted
	by probability, the O(n) @huffmanSorted@ function can be used instead.
Build-Type:	Simple
Cabal-Version:	>= 1.6
Tested-with:	GHC ==6.12

Source-Repository head
  Type:			mercurial
  Location:		http://bitbucket.org/mumux/huffman/

Library
  Build-Depends:	base >= 3 && < 5, containers, fingertree
  Exposed-Modules:	Data.Compression.Huffman
  GHC-Options:		-Wall -O2 -funbox-strict-fields
