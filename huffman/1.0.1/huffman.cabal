-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:1e0535914033f2c80a202aca9bc01ddd
    SHA1:56769b6f5a26e5890ab83d1c2ad43c2f0c7bd2c7
    SHA256:43933e2b7f2256420bc9ae28c9e22d6d2b40ce2f79105519825912a3c9a634a4
    SHA512:ef49618f74bf483e122340943aebc706d91012845129a63c501df93e872d70e45d92a70f9be6e4c874c159f36564568cdb404e5cd541514778eccbe45cecfea4
    Skein512_512:aa74fd830e22e09a01986491e711be03a2d58844c87d490a52faaacfb32c07eb4ae7ffa6f767967991e67fed8c3d786e932eda547cb388cbdf7a2ff74b0304c1

package-locations:
    https://hackage.haskell.org/package/huffman-1.0.1/huffman-1.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/huffman-1.0.1.tar.gz

package-size: 2394
-- END Added by all-cabal-hashes-tool

Name:		huffman
Version:	1.0.1
License-File:	LICENSE
License:	BSD3
Author:		Maxime Henrion
Copyright:	2010, Maxime Henrion
Maintainer:	Maxime Henrion <mhenrion@gmail.com>
Bug-Reports:	http://bitbucket.org/mux/huffman/issues/
Category:	Data, Compression
Synopsis:	Pure Haskell implementation of the Huffman encoding algorithm
Description:
	A simple and pure Haskell implementation of the Huffman encoding
	algorithm.
	.
	The @huffman@ function provides the original O(n log n) algorithm
	implemented with a priority queue.  If the input symbols are sorted
	by probability, the O(n) @huffmanSorted@ function can be used instead.
Build-Type:	Simple
Cabal-Version:	>= 1.6
Tested-with:	GHC ==6.12

Source-Repository head
  Type:			mercurial
  Location:		http://bitbucket.org/mux/huffman/

Library
  Build-Depends:	base >= 3 && < 5, containers, fingertree
  Exposed-Modules:	Data.Compression.Huffman
  GHC-Options:		-Wall -O2 -funbox-strict-fields
