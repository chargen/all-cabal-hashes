-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:1aad4419dcd73a0ad0378a6abad14574
    SHA1:7af0c70d003a5b9ccbcd12e3f7d486ef257f36a8
    SHA256:9a7aedea9d471c29810cf63b57b16b87afab9c7ffd0529cce9e5b250569dd02a
    SHA512:8e49588e4f4dd569f6c0038cb1602e9738ff5d98c9f346d5e2f65bff72e5fc89dc5f8c55f68f5fbab8a00507a2e46f133b14cbab92a890688b04e68f853c48be
    Skein512_512:3ec581ff9f5495ef091d79d052ed5c3383591187db2408ddadac5f932b0d1f7236dacb9508470ed0388e163b3d0eccc8f4edaaa0ec2003ddb5b988623abfd4c9

x-package-locations:
    https://hackage.haskell.org/package/gll-0.2.0.0/gll-0.2.0.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/gll-0.2.0.0.tar.gz

x-package-size: 15302
-- END Added by all-cabal-hashes-tool

-- Initial haskell-gll.cabal generated by cabal init.  For further 
-- documentation, see http://haskell.org/cabal/users-guide/

-- The name of the package.
name:                gll
version:             0.2.0.0
synopsis:            GLL parser with simple combinator interface 
license:             BSD3
license-file:        LICENSE
author:              L. Thomas van Binsbergen
maintainer:          ltvanbinsbergen@acm.org
category:            Compilers
build-type:          Simple 
cabal-version:       >=1.8
tested-with:         GHC == 7.6.3
description:         

        GLL is a parser combinator library for writing generalised parsers.
        The parsers can correspond to arbitrary context-free grammar, accepting 
        both non-determinism and (left-) recursion.
        The underlying parsing algorithm is GLL (Scott and Johnstone 2013)

        The library provides an interface in Control.Applicative style (although no
        instance of Applicative is given). 
        Users can add arbitrary semantic with the <$> combinator. 

        There are 4 top-level functions: parse, parseString, parseWithOptions
        and parseStringWithOptions. They all return a list of semantic results,
        one for each derivation. In the case that infinite derivations are possible
        only 'good parse trees' are accepted (Ridge 2014).

        Function parse relies on a builtin Token datatype. User-defined token-types 
        are currently not supported. parseString enables parsing character strings.
        The user is granted GLL.Combinators.Options to specify certain disambiguation
        rules.

        GLL.Combinators.MemInterface is a memoised version of the library.
        Parsers are no longer pure functions and must be built inside the IO monad,
        providing fresh memo-tables to each memo'ed non-terminal.

        See UnitTests and MemTests for examples of using both version of
        the library.

library
    hs-source-dirs  :   src,tests/interface
    build-depends   :     base >=4.5 && <= 4.8.0.0
                        , containers >= 0.4
                        , array
                        , TypeCompose
    exposed-modules :     GLL.Combinators.Interface
                        , GLL.Combinators.MemInterface
                        , GLL.Combinators.Options
                        , UnitTests
                        , MemTests
    other-modules   :   GLL.Types.Abstract
                        , GLL.Types.Grammar
                        , GLL.Parser
                        , GLL.Common
    extensions      : TypeOperators, FlexibleInstances, ScopedTypeVariables, TypeSynonymInstances


