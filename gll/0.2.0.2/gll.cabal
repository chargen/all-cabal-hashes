-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:0f99719a5390e3eb08fdd9a73916a347
    SHA1:16121961956d7518cb68a7d442ca2af050e1c81e
    SHA256:d9ae6dfd78d7a68279b2eb0b1c4768906e7fcfa25a86576664795af1defba1b3
    SHA512:7e6a5a5ff504dfe04aae1209444361ab12f852598fa2a9b654bc76fd8e8672d8b19b5431a06321d0ea4fd1530e66a4ea617dd4cfe805280149613c83b4433b12
    Skein512_512:207e40ecf1997b77b3750712615ded81cd6fe1c773904e5e7b250be5704013e058e1f14d2fc09999a0b8e6b24cc8f5da9c865f4f2fcf2e32b388332936b6e383

x-package-locations:
    https://hackage.haskell.org/package/gll-0.2.0.2/gll-0.2.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/gll-0.2.0.2.tar.gz

x-package-size: 15514
-- END Added by all-cabal-hashes-tool

-- Initial haskell-gll.cabal generated by cabal init.  For further 
-- documentation, see http://haskell.org/cabal/users-guide/

-- The name of the package.
name:                gll
version:             0.2.0.2
synopsis:            GLL parser with simple combinator interface 
license:             BSD3
license-file:        LICENSE
author:              L. Thomas van Binsbergen
maintainer:          ltvanbinsbergen@acm.org
category:            Compilers
build-type:          Simple 
cabal-version:       >=1.8
tested-with:         GHC == 7.6.3
description:         

        GLL is a parser combinator library for writing generalised parsers.
        The parsers can correspond to arbitrary context-free grammar, accepting 
        both non-determinism and (left-) recursion.
        The underlying parsing algorithm is GLL (Scott and Johnstone 2013).
        .
        The library provides an interface in Control.Applicative style (although no
        instance of Applicative is given). 
        Users can add arbitrary semantic to the parser. 
        .
        There are 4 top-level functions: parse, parseString, parseWithOptions
        and parseStringWithOptions. They all return a list of semantic results,
        one for each derivation. In the case that infinite derivations are possible
        only 'good parse trees' are accepted (Ridge 2014).
        .
        Function parse relies on a builtin Token datatype. User-defined token-types 
        are currently not supported. parseString enables parsing character strings.
        The user is granted GLL.Combinators.Options to specify certain disambiguation
        rules.
        .
        GLL.Combinators.MemInterface is a memoised version of the library.
        Parsers are no longer pure functions and must be built inside the IO monad,
        providing fresh memo-tables to each memo'ed non-terminal.
        .
        See UnitTests and MemTests for examples of using both version of
        the library.

library
    hs-source-dirs  :   src,tests/interface
    build-depends   :     base >=4.5 && <= 4.8.0.0
                        , containers >= 0.4
                        , array
                        , TypeCompose
    exposed-modules :     GLL.Combinators.Interface
                        , GLL.Combinators.MemInterface
                        , GLL.Combinators.Options
                        , GLL.Combinators.Memoisation
                        , UnitTests
                        , MemTests
    other-modules   :   GLL.Types.Abstract
                        , GLL.Types.Grammar
                        , GLL.Parser
                        , GLL.Common
    extensions      : TypeOperators, FlexibleInstances, ScopedTypeVariables, TypeSynonymInstances


