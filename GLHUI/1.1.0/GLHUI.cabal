-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:d9486e145180fa9f680560c944b5f041
    SHA1:5e312f83750cf1c992a59e7e36f357d54cae7f2c
    SHA256:4a012b29ff3de29399efeea269773906d5b2f56a9eee925b37ecf30ccde07d10
    SHA512:3eabd680f5046c2daafb833fd64d729ddbfd50ffe6fac940442310cbfbe7eb782a49dc971d88fd0b1b06bd21c403713e36375408b444ea8553c888c9d2344bcc
    Skein512_512:78ee472d005ce3dd00624430585b11db7bd4c280e9889e322d210fa4430109712ece7b24bcd09bd4e1b85ea37114b95c64a6af02c50c8ae7bf70be382fcadfca

x-package-locations:
    https://hackage.haskell.org/package/GLHUI-1.1.0/GLHUI-1.1.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/GLHUI-1.1.0.tar.gz

x-package-size: 5775
-- END Added by all-cabal-hashes-tool

name: GLHUI
version: 1.1.0
license: BSD3
license-file: LICENSE
author: Hugo Gomes <mr.hugo.gomes@gmail.com>
maintainer: Hugo Gomes <mr.hugo.gomes@gmail.com>
copyright: Hugo Gomes
category: Graphics
synopsis: Open OpenGL context windows in X11 with libX11
description:
   .
   Haskell functions to open and manage a OpenGL window with libX11.
   .
   This module is intended to be imported qualified, to avoid clashes with
   Prelude functions, e.g.
   .
   > import qualified Graphics.UI.GLWindow as Window
   .
   As an example, here is a simple module that uses some of these functions 
   to open a OpenGL 3.2 Context: 
   .
   > module Main where                                                     
   >  
   > import Graphics.Rendering.OpenGL    
   > import qualified Graphics.UI.GLWindow as Window    
   > 
   > myLoop = do clear [ColorBuffer]    
   >             t <- Window.time    
   >             clearColor $= Color4 (sin (realToFrac t) * 0.5 + 0.5)
   >                                  (sin (realToFrac (t+1)) * 0.5 + 0.5)
   >                                  (sin (realToFrac (t+2)) * 0.5 +0.5)
   >                                  0                                              
   > 
   > main = do Window.init 3 2 -- initializes a OpenGL 3.2 context
   >           Window.loop myLoop -- stops when the ESC key is pressed
   >           Window.kill -- removes the window when the loop stops
   .
   Special thanks to Tiago Farto (aka xernobyl) for coding the initial C version
   that was used as a base for these functions
build-type: Simple
cabal-version: >=1.6
extra-source-files:
   include/HsGLWindow.h
   c/HsGLWindow.c
   README

library
   build-depends:
      base < 5
   exposed-modules:
      Graphics.UI.GLWindow
   include-dirs: include
   c-sources:
      c/HsGLWindow.c
   ghc-options: -Wall -O2
   extra-libraries: X11 GL rt
