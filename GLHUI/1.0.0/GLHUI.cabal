-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:896686b991726d55da88d1f53c6c4e5b
    SHA1:b03717a7efb746004a1b826e01f27a4b788fc56e
    SHA256:36a6172b65c47aa04afd93d1353141bc936bd5d735f437744347eb8c51365f6a
    SHA512:1e7b68d51cd84f6b3256211d54eb02eca40caa89c0eeb522f40a5432d10ac7e51ff95142ad4d526182789b19ce4fba02401b2d05286fe958e65152514c0f5322
    Skein512_512:604d41dd009d4ba132b13a1bd24ede0a21a4123565cdb516085eb9ea84c03c1d8c1e473e2e014fafa34ee5d87d18c271fce9854c72ebe6ca0d8c4783f3e237a1

package-locations:
    https://hackage.haskell.org/package/GLHUI-1.0.0/GLHUI-1.0.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/GLHUI-1.0.0.tar.gz

package-size: 5537
-- END Added by all-cabal-hashes-tool

name: GLHUI
version: 1.0.0
license: BSD3
license-file: LICENSE
author: Hugo Gomes <mr.hugo.gomes@gmail.com>
maintainer: Hugo Gomes <mr.hugo.gomes@gmail.com>
copyright: Hugo Gomes
homepage: http://www.hackological.com/projects/GLHUI
category: Graphics
synopsis: Open OpenGL context windows in X11 with libX11
description:
   .
   Haskell functions to open and manage a OpenGL window with libX11.
   .
   This module is intended to be imported qualified, to avoid clashes with
   Prelude functions, e.g.
   .
   > import qualified Graphics.UI.GLWindow as Window
   .
   As an example, here is a simple module that uses some of these functions 
   to open a OpenGL 3.2 Context: 
   .
   > module Main where                                                     
   >  
   > import Graphics.Rendering.OpenGL    
   > import qualified Graphics.UI.GLWindow as Window    
   > 
   > myLoop = do clear [ColorBuffer]    
   >             t <- Window.time    
   >             clearColor $= Color4 (sin (realToFrac t) * 0.5 + 0.5)
   >                                  (sin (realToFrac (t+1)) * 0.5 + 0.5)
   >                                  (sin (realToFrac (t+2)) * 0.5 +0.5)
   >                                  0                                              
   > 
   > main = do Window.init 3 2 -- initializes a OpenGL 3.2 context
   >           Window.loop myLoop -- stops when the ESC key is pressed
   >           Window.kill -- removes the window when the loop stops
   .
   Special thanks to Tiago Farto (aka xernobyl) for coding the C version of
   these functions
build-type: Simple
cabal-version: >=1.6
extra-source-files:
   README

library
   build-depends:
      base < 5
   exposed-modules:
      Graphics.UI.GLWindow
   include-dirs: include
   c-sources:
      c/HsGLWindow.c
   ghc-options: -Wall -O2
   extra-libraries: X11 GL rt
