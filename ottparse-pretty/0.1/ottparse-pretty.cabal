-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:9c1f53dcfac60e0c70557fd93c67a968
    SHA1:82271fd6fcea4d8ec2c080e26f38e3f7626101cb
    SHA256:db7a1c631de00edc72f2e5dfcbe7eb58ae0404adf4e1994081e24f69fc7e1b59
    SHA512:a3812266b2d34c16a5af36e3a1d1609acaf1f0da57c4600ed456c94e8bcfa2cdaa75935e54869bbd8056ca665dae210392cd7148bb7b489c7d707290d6eda5d7
    Skein512_512:6b2fb5de67121447c1041f7f5a1854de2aca73b0fe6dfd3868e060c72c39eacb82d80eca29a0b40c105066acd6bd93930bd639ff2e4aa39ca41f4e1f510a6785

package-locations:
    https://hackage.haskell.org/package/ottparse-pretty-0.1/ottparse-pretty-0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/ottparse-pretty-0.1.tar.gz

package-size: 2141
-- END Added by all-cabal-hashes-tool

Name:                ottparse-pretty
Version:             0.1
Synopsis:            Pretty-printer for Ott parse trees
Description:         Ott (<http://www.cl.cam.ac.uk/~pes20/ott/>) is a tool for
		     writing formal definitions of programming
		     languages and calculi.  Often the Ott grammars
		     one defines end up being ambiguous, and Ott
		     signals its displeasure by spewing forth several
		     massive parse trees in a format requiring
		     formidable patience to read.  Finding the slight
		     differences between two such parse trees is an
		     exercise in seizure-inducing tedium.
                     .
		     To the rescue comes ottparse-pretty!  Simply
		     paste in each parse and it is shown to you in a
		     nicely formatted tree form with all the extra
		     meaningless cruft removed.
License:             BSD3
License-file:        LICENSE
Author:              Brent Yorgey
Maintainer:          byorgey@cis.upenn.edu
Category:            Text
Build-type:          Simple
Cabal-version:       >=1.6

Source-repository head
  type:     darcs
  location: http://code.haskell.org/~byorgey/code/ottparse-pretty

Executable ottparse-pretty
  hs-source-dirs:    src
  Main-is:           ottparse-pretty.hs
  Build-depends:     base >= 4.0 && < 4.5,
                     split >= 0.1 && < 0.2,
                     parsec >= 3.0 && < 3.2,
                     containers >= 0.3 && < 0.5,
                     uniplate >= 1.6 && < 1.7