-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:6f7f0b15c0237fac022b9f77f65a8581
    SHA1:cf8259fb32dcf81ea070b7852aaa155c92d83fd6
    SHA256:26a0eecc6da4f43ad0f0f3ec628b7064f47ad3a423dbeb44b2b6dae8fef450a9
    SHA512:b89c73d4769c7f1f33e0ad85f027a486e6f01778555401194891a9f819fb22661c8e612518d867573b5b6b210a6340e4eb5cb179896d23e2eb38a8299fbb4e0a
    Skein512_512:bf3a568f7d81e373e37af5416f442f951b75876598945bfb1c771ee79303ae0ca40b2797245c1dc9e3f00ecd7e474f4734f0c9ecb59225417a783d172b4d7141

package-locations:
    https://hackage.haskell.org/package/ottparse-pretty-0.1.2/ottparse-pretty-0.1.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/ottparse-pretty-0.1.2.tar.gz

package-size: 2585
-- END Added by all-cabal-hashes-tool

Name:                ottparse-pretty
Version:             0.1.2
Synopsis:            Pretty-printer for Ott parse trees
Description:         Ott (<http://www.cl.cam.ac.uk/~pes20/ott/>) is a tool for
		     writing formal definitions of programming
		     languages and calculi.  Often the Ott grammars
		     one defines end up being ambiguous, and Ott
		     signals its displeasure by spewing forth several
		     massive parse trees in a format requiring
		     formidable patience to read.  Finding the slight
		     differences between two such parse trees is an
		     exercise in seizure-inducing tedium.
                     .
		     To the rescue comes ottparse-pretty!  Simply
		     paste in each parse and it is shown to you in a
		     nicely formatted tree form with all the extra
		     meaningless cruft removed.
License:             BSD3
License-file:        LICENSE
Extra-source-files:  CHANGES
Author:              Brent Yorgey
Maintainer:          byorgey@cis.upenn.edu
Category:            Text
Build-type:          Simple
Cabal-version:       >=1.6

Source-repository head
  type:     darcs
  location: http://code.haskell.org/~byorgey/code/ottparse-pretty

Executable ottparse-pretty
  hs-source-dirs:    src
  Main-is:           ottparse-pretty.hs
  Build-depends:     base >= 4.0 && < 4.6,
                     split >= 0.1 && < 0.2,
                     parsec >= 3.0 && < 3.2,
                     containers >= 0.3 && < 0.5,
                     uniplate >= 1.6 && < 1.7