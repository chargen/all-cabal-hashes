-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:1b95b933345b94afa868e160d9ed39a4
    SHA1:9cad65f698482bb9acf194d77d4db0e80bc40faa
    SHA256:8a97da723b7d05b519393edf47791154088aeabd0300121f90bf0aff8d5ecd9e
    SHA512:555e6f1ba19483314d288ea1396971377a1eae90b6bb117a0ea5597bb247c7cbe2473be76a70bbfc97851152c2a9105417987941406b6a609c8d8527d4fb187d
    Skein512_512:428830e71e23130b588adff0621ec25e2949c1bd21cc045618f949d42cef10a6c4a845aadb894b91f29022bfa5fc259d5b4e34d113d9a9d506a63cec789e07fd

x-package-locations:
    https://hackage.haskell.org/package/data-accessor-0.1.1/data-accessor-0.1.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/data-accessor-0.1.1.tar.gz

x-package-size: 17032
-- END Added by all-cabal-hashes-tool

Name:             data-accessor
Version:          0.1.1
License:          GPL
License-File:     LICENSE
Author:           Henning Thielemann <haskell@henning-thielemann.de>, Luke Palmer <lrpalmer@gmail.com>
Maintainer:       Henning Thielemann <haskell@henning-thielemann.de>
Homepage:         http://code.haskell.org/data-accessor/
Category:         Data
-- Portability:      Haskell98, not quite because of MTL dependency
Build-Type:       Simple
Build-Depends:    base>=1.0, mtl
Synopsis:         Utilities for accessing and manipulating fields of records
Description:
  In Haskell 98 the name of a record field
  is automatically also the name of a function which gets the value
  of the according field.
  E.g. if we have
  .
    data Pair a b = Pair {first :: a, second :: b}
  .
  then
  .
  > first  :: Pair a b -> a
  > second :: Pair a b -> b
  .
  However for setting or modifying a field value
  we need to use some syntactic sugar, which is often clumsy.
  .
    modifyFirst :: (a -> a) -> (Pair a b -> Pair a b)
    modifyFirst f r\@(Pair {first=a}) = r{first = f a}
  .
  With this package you can define record field accessors
  which allow setting, getting and modifying values easily.
  The package clearly demonstrates the power of the functional approach:
  You can combine accessors of a record and sub-records,
  to make the access look like the fields of the sub-record belong to the main record.
  .
  Example:
  .
  > *Data.Accessor.Example> (first^:second^=10) (('b',7),"hallo")
  > (('b',10),"hallo")
  .
  You can easily manipulate record fields in a 'Control.Monad.State.State' monad,
  you can easily code Show instances that use the Accessor syntax
  and you can parse binary streams into records.
  See @Data.Accessor.Example@ for demonstration of all features.
  .
  It would be great if in revised Haskell versions the names of record fields
  are automatically 'Data.Accessor.Accessor's
  rather than plain @get@ functions.
  The package @data-accessor-template@ provides Template Haskell functions
  for automated generation of 'Data.Acesssor.Accessor's.
GHC-Options:      -Wall
Tested-With:      GHC==6.4.1 && ==6.8.2
Hs-Source-Dirs:   src
Exposed-Modules:
  Data.Accessor
  Data.Accessor.Basic
  Data.Accessor.Show
  Data.Accessor.Tuple
  Data.Accessor.BinaryRead
  Data.Accessor.MonadState
Other-Modules:
  Data.Accessor.Example
