-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:d4f895bdd6f2775a3dbc3ba73278b5d7
    SHA1:2fc1e13804f59bb1aa8fce111cf6a2b5b73444b8
    SHA256:f21535cd4cc6746a20c86357b481f9155f46f126720bc283f105d4a1d7ca41b9
    SHA512:d171becfa80da92659a9677d1d7be984dd758fe4f1be060dcab1628caeb6b6e5b2dbc5a79eb09b0f3c9c35e5899cb1bce90a843c3da5e2750e02607265e22af1
    Skein512_512:6e9f5411b1f38fb357afa34ca0ec46a9005b265a3c5d1c8c40b536ac0b0321a9df9c8b303d23a6812d0e0b0339e1b8f6dde84125bfa290d92eca7db65e59564b

x-package-locations:
    https://hackage.haskell.org/package/data-accessor-0.2.2.3/data-accessor-0.2.2.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/data-accessor-0.2.2.3.tar.gz

x-package-size: 9632
-- END Added by all-cabal-hashes-tool

Name:             data-accessor
Version:          0.2.2.3
License:          BSD3
License-File:     LICENSE
Author:           Henning Thielemann <haskell@henning-thielemann.de>, Luke Palmer <lrpalmer@gmail.com>
Maintainer:       Henning Thielemann <haskell@henning-thielemann.de>
Homepage:         http://www.haskell.org/haskellwiki/Record_access
Category:         Data
-- Default-Language: Haskell98
Cabal-Version:    >=1.6
Build-Type:       Simple
Tested-With:      GHC==6.4.1, GHC==6.8.2, GHC==6.10.4, GHC==6.12.3
Tested-With:      GHC==7.0.1, GHC==7.2.1, GHC==7.4.1
Tested-With:      JHC==0.7.3
Synopsis:         Utilities for accessing and manipulating fields of records
Description:
  In Haskell 98 the name of a record field
  is automatically also the name of a function which gets the value
  of the according field.
  E.g. if we have
  .
    data Pair a b = Pair {first :: a, second :: b}
  .
  then
  .
  > first  :: Pair a b -> a
  > second :: Pair a b -> b
  .
  However for setting or modifying a field value
  we need to use some syntactic sugar, which is often clumsy.
  .
    modifyFirst :: (a -> a) -> (Pair a b -> Pair a b)
    modifyFirst f r\@(Pair {first=a}) = r{first = f a}
  .
  With this package you can define record field accessors
  which allow setting, getting and modifying values easily.
  The package clearly demonstrates the power of the functional approach:
  You can combine accessors of a record and sub-records,
  to make the access look like the fields of the sub-record belong to the main record.
  .
  Example:
  .
  > *Data.Accessor.Example> (first^:second^=10) (('b',7),"hallo")
  > (('b',10),"hallo")
  .
  You can easily manipulate record fields in a 'Control.Monad.State.State' monad,
  you can easily code 'Show' instances that use the Accessor syntax
  and you can parse binary streams into records.
  See @Data.Accessor.Example@ for demonstration of all features.
  .
  It would be great if in revised Haskell versions the names of record fields
  are automatically 'Data.Accessor.Accessor's
  rather than plain @get@ functions.
  For now, the package @data-accessor-template@ provides Template Haskell functions
  for automated generation of 'Data.Acesssor.Accessor's.
  See also the other @data-accessor@ packages
  that provide an Accessor interface to other data types.
  The package @enumset@ provides accessors to bit-packed records.
  .
  For similar packages see @lenses@ and @fclabel@.
  A related concept are editors
  <http://conal.net/blog/posts/semantic-editor-combinators/>.
  Editors only consist of a modify method
  (and @modify@ applied to a 'const' function is a @set@ function).
  This way, they can modify all function values of a function at once,
  whereas an accessor can only change a single function value,
  say, it can change @f 0 = 1@ to @f 0 = 2@.
  This way, editors can even change the type of a record or a function.
  An Arrow instance can be defined for editors,
  but for accessors only a Category instance is possible ('(.)' method).
  The reason is the @arr@ method of the @Arrow@ class,
  that conflicts with the two-way nature (set and get) of accessors.

Extra-Source-Files:
  RegExp
  src-3/Data/Accessor/Private.hs
  src-4/Data/Accessor/Private.hs

Source-Repository head
  Type:        darcs
  Location:    http://code.haskell.org/data-accessor/core/

Flag category
  description: Check whether Arrow class is split into Arrow and Category.

Flag splitBase
  description: Choose the smaller, split-up base package from version 2 on.

Library
  Build-Depends:
    transformers >=0.2 && <0.4
  If flag(splitBase)
    Build-Depends:
      array >=0.1 && <0.5,
      containers >=0.1 && <0.6
    If flag(category)
      Hs-Source-Dirs: src-4
      Build-Depends: base >= 4 && <5
    Else
      Hs-Source-Dirs: src-3
      Build-Depends: base >= 2 && <4
  Else
    Hs-Source-Dirs: src-3
    Build-Depends:
      base >= 1 && <2
    If impl(jhc)
      Build-Depends:
        containers >=0.1 && <0.6

  GHC-Options:      -Wall
  Hs-Source-Dirs:   src
  Exposed-Modules:
    Data.Accessor
    Data.Accessor.Basic
    Data.Accessor.Container
    Data.Accessor.Show
    Data.Accessor.Tuple
    Data.Accessor.BinaryRead
    Data.Accessor.MonadState
  Other-Modules:
    Data.Accessor.Example
    Data.Accessor.Private
    Data.Accessor.MonadStatePrivate
