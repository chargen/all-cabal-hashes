-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:1d69e638f7c05763ac2696c4fb25ebce
    SHA1:af186cecd1b0f67a856056fd09907a1a4168db18
    SHA256:240f4e5f43ec03d71d04cf04e504faa8fa0317667ca1d7790bc33b6338fa249e
    SHA512:af331553619398f5a3faae7e56216f9df812ffff9ab4b2fb91c46a0a3a8e38642f35af3171211ed9a4d3cfb9eed5f7d7782c74596e79f6e3ae43e980a0c83e6c
    Skein512_512:5ff91af0119193b9c6309d931bee24dc6c091b8144ce6438581d912e92a48de0c86608b50ecdd4f4da84750ecae20fbbe7c48d0aae8f7c581e82cd80328832ce

x-package-locations:
    https://hackage.haskell.org/package/data-accessor-0.1.2/data-accessor-0.1.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/data-accessor-0.1.2.tar.gz

x-package-size: 17272
-- END Added by all-cabal-hashes-tool

Name:             data-accessor
Version:          0.1.2
License:          GPL
License-File:     LICENSE
Author:           Henning Thielemann <haskell@henning-thielemann.de>, Luke Palmer <lrpalmer@gmail.com>
Maintainer:       Henning Thielemann <haskell@henning-thielemann.de>
Homepage:         http://code.haskell.org/data-accessor/
Category:         Data
-- Portability:      Haskell98, not quite because of MTL dependency
Build-Type:       Simple
Build-Depends:    base>=1.0, mtl
Synopsis:         Utilities for accessing and manipulating fields of records
Description:
  In Haskell 98 the name of a record field
  is automatically also the name of a function which gets the value
  of the according field.
  E.g. if we have
  .
    data Pair a b = Pair {first :: a, second :: b}
  .
  then
  .
  > first  :: Pair a b -> a
  > second :: Pair a b -> b
  .
  However for setting or modifying a field value
  we need to use some syntactic sugar, which is often clumsy.
  .
    modifyFirst :: (a -> a) -> (Pair a b -> Pair a b)
    modifyFirst f r\@(Pair {first=a}) = r{first = f a}
  .
  With this package you can define record field accessors
  which allow setting, getting and modifying values easily.
  The package clearly demonstrates the power of the functional approach:
  You can combine accessors of a record and sub-records,
  to make the access look like the fields of the sub-record belong to the main record.
  .
  Example:
  .
  > *Data.Accessor.Example> (first^:second^=10) (('b',7),"hallo")
  > (('b',10),"hallo")
  .
  You can easily manipulate record fields in a 'Control.Monad.State.State' monad,
  you can easily code Show instances that use the Accessor syntax
  and you can parse binary streams into records.
  See @Data.Accessor.Example@ for demonstration of all features.
  .
  It would be great if in revised Haskell versions the names of record fields
  are automatically 'Data.Accessor.Accessor's
  rather than plain @get@ functions.
  The package @data-accessor-template@ provides Template Haskell functions
  for automated generation of 'Data.Acesssor.Accessor's.
GHC-Options:      -Wall
Tested-With:      GHC==6.4.1 && ==6.8.2
Hs-Source-Dirs:   src
Exposed-Modules:
  Data.Accessor
  Data.Accessor.Basic
  Data.Accessor.Show
  Data.Accessor.Tuple
  Data.Accessor.BinaryRead
  Data.Accessor.MonadState
Other-Modules:
  Data.Accessor.Example
