-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:8baa6c6d7ab0f9787e62e8f895d70cb2
    SHA1:0c370a57c4e6513f01b2fc98d9015154106014b8
    SHA256:2dbdc608b74cfe09c63a8fbb9ca02043d57a83c417545d1653dd500cbd8a3502
    SHA512:f4bb0b7c2d3bf68b9139352b6da5e65016744a849e70d10e1eb5c24cd9a8e0ce3ddb4915c07e979bdec4406537ea392b102472d9ebfb69e500e2f4483545a1f2
    Skein512_512:70db6fe05bd177170905350d431a80294c12df08abdd55c513dbd50018a72039bbbafd49f693c730d21d62014581ee12641eb67558c1a032c171afb919d701eb

package-locations:
    https://hackage.haskell.org/package/data-accessor-0.1.3/data-accessor-0.1.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/data-accessor-0.1.3.tar.gz

package-size: 18174
-- END Added by all-cabal-hashes-tool

Name:             data-accessor
Version:          0.1.3
License:          GPL
License-File:     LICENSE
Author:           Henning Thielemann <haskell@henning-thielemann.de>, Luke Palmer <lrpalmer@gmail.com>
Maintainer:       Henning Thielemann <haskell@henning-thielemann.de>
Homepage:         http://www.haskell.org/haskellwiki/Record_access
Package-URL:      http://code.haskell.org/data-accessor/
Category:         Data
-- Portability:      Haskell98, not quite because of MTL dependency
Build-Type:       Simple
Build-Depends:    base>=1.0, array, containers, mtl
Synopsis:         Utilities for accessing and manipulating fields of records
Description:
  In Haskell 98 the name of a record field
  is automatically also the name of a function which gets the value
  of the according field.
  E.g. if we have
  .
    data Pair a b = Pair {first :: a, second :: b}
  .
  then
  .
  > first  :: Pair a b -> a
  > second :: Pair a b -> b
  .
  However for setting or modifying a field value
  we need to use some syntactic sugar, which is often clumsy.
  .
    modifyFirst :: (a -> a) -> (Pair a b -> Pair a b)
    modifyFirst f r\@(Pair {first=a}) = r{first = f a}
  .
  With this package you can define record field accessors
  which allow setting, getting and modifying values easily.
  The package clearly demonstrates the power of the functional approach:
  You can combine accessors of a record and sub-records,
  to make the access look like the fields of the sub-record belong to the main record.
  .
  Example:
  .
  > *Data.Accessor.Example> (first^:second^=10) (('b',7),"hallo")
  > (('b',10),"hallo")
  .
  You can easily manipulate record fields in a 'Control.Monad.State.State' monad,
  you can easily code Show instances that use the Accessor syntax
  and you can parse binary streams into records.
  See @Data.Accessor.Example@ for demonstration of all features.
  .
  It would be great if in revised Haskell versions the names of record fields
  are automatically 'Data.Accessor.Accessor's
  rather than plain @get@ functions.
  The package @data-accessor-template@ provides Template Haskell functions
  for automated generation of 'Data.Acesssor.Accessor's.
GHC-Options:      -Wall
Tested-With:      GHC==6.4.1 && ==6.8.2
Hs-Source-Dirs:   src
Exposed-Modules:
  Data.Accessor
  Data.Accessor.Basic
  Data.Accessor.Container
  Data.Accessor.Show
  Data.Accessor.Tuple
  Data.Accessor.BinaryRead
  Data.Accessor.MonadState
Other-Modules:
  Data.Accessor.Example
