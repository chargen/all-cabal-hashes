-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:9b76d0ae28bd591082d8980e7f8678a0
    SHA1:f46df1d29dbc25ee51982eef51eb7e836ce06091
    SHA256:14879fe9386f57f5ecb019f1967389a86c097f1835de65a4dc2e9c27debb57f4
    SHA512:da9f147064404d6582a355713f5f1f8dae71ed32f3e5b15213d0a0b85dd03419c21d5b4731536263d2cb601cbf92e8f09778853bc9422bbc07cd275a414c32ce
    Skein512_512:27b09f6fe2c1617e27d93614ee63fd075d819e72d55269327f7deb5b774b7432fe4ac64c8441595f7d9dae94f77e465d8913f895eca967b74db00c0e3a09e68d

x-package-locations:
    https://hackage.haskell.org/package/processing-1.0.0.0/processing-1.0.0.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/processing-1.0.0.0.tar.gz

x-package-size: 25548
-- END Added by all-cabal-hashes-tool

Name: processing
Version: 1.0.0.0
Author: Daniel Díaz
Category: Graphics
Build-type: Simple
License: BSD3
License-file: license
Maintainer: Daniel Díaz (dhelta.diaz `at` gmail.com)
Bug-reports: https://github.com/Daniel-Diaz/processing/issues
Synopsis: Web graphic applications with Processing.
Stability: In development
Description:
  /Processing/ is a visual design programming language.
  /Processing.js/ is the sister project of Processing designed
  for the web.
  The Haskell /processing/ package is a web animation library
  with /Processing.js/ as backend.
  .
  /What is this for?/
  .
  With this library you are able to write scripts that, once
  executed in a browser, will execute interactive visual programs.
  .
  /Where can I see a running example?/
  .
  An example output can be reached at <http://liibe.com/experimental/rocket.html>.
  Also, take a look at <http://liibe.com/experimental/mill.html>.
  The code of the latter is included in the source distribution (\/examples\/mill.hs).
  .
  /How do I learn to use it?/
  .
  The API reference of the library includes guidance and is complemented with
  code examples. Look also to the /examples/ directory included in the source
  distribution. It contains some fully working examples.
  .
  The library provides different APIs (interfaces). Each one with a different
  philosophy.
  .
  * /Simple/ ("Graphics.Web.Processing.Simple"): An abstract interface, focusing
  in what you want to be displayed, but not how. The library will know how to
  write the processing code you need. However, you may lack some features that
  you can find in other interfaces.
  .
  * /Mid/ ("Graphics.Web.Processing.Mid"): More imperative feeling, with variables
  and commands. But also convenient and complete. This is the default interface,
  re-exported by "Graphics.Web.Processing".
  .
  * /Basic/ ("Graphics.Web.Processing.Basic"): For people that like to do things
  by hand. The output processing code is predictable and you have great
  control over it.
  .
  The module "Graphics.Web.Processing.Html" helps you to create the HTML document
  where you will display the animation.
Cabal-version: >= 1.6
Extra-source-files:
  readme.md
  examples/twist.hs
  examples/mill.hs

Source-repository head
  type: git
  location: git@github.com:Daniel-Diaz/processing.git

Library
  Build-depends:
      base == 4.*
    , text
    , containers
    , transformers
    , mainland-pretty
    , blaze-html
    , multiset
  Exposed-modules:
    -- Core modules
    Graphics.Web.Processing.Core.Types
    Graphics.Web.Processing.Core.Interface
    Graphics.Web.Processing.Core.Var
    -- Basic interface
    Graphics.Web.Processing.Basic
    -- Mid interface
    Graphics.Web.Processing.Mid
    Graphics.Web.Processing.Mid.CustomVar
    -- Simple interface
    Graphics.Web.Processing.Simple
    -- Default interface
    Graphics.Web.Processing
    -- Optimizations
    Graphics.Web.Processing.Optimize
    -- HTML
    Graphics.Web.Processing.Html
  Other-modules:
    Graphics.Web.Processing.Core.Primal
    Graphics.Web.Processing.Core.Monad
  Extensions: OverloadedStrings
            , EmptyDataDecls
            -- , DeriveGeneric
            , MultiParamTypeClasses
            , FunctionalDependencies
            , TypeOperators
            -- , DefaultSignatures
            , FlexibleContexts
  GHC-Options: -Wall
