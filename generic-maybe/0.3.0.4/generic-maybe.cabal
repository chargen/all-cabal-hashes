-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:de378a1adbeb27172b9c23aa3238b239
    SHA1:f4159073f2026ccf7742f878bb630997b37c056e
    SHA256:a18fb3f81ab1a76de60f437ea6869cc2fb8e4cf4455e22aea00889a13f4f48bf
    SHA512:4e2512184d7a856f10c208979d6200b3b4c619248bf342ee807990c9d62ae2e7df943bcdc2d88bb41c0ce1c566fca4c6dcdc936df2673999b3b1909d48dd3c47
    Skein512_512:d4c311d3f0d8aaf100dd0155d69c5ea6cbc8c61ce016376ff5494ffbc49ba55e7cb069dca940b6ca3e84dd4860fb252f38ba82bad77943e1edd9a42e614c1cae

package-locations:
    https://hackage.haskell.org/package/generic-maybe-0.3.0.4/generic-maybe-0.3.0.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/generic-maybe-0.3.0.4.tar.gz

package-size: 6624
-- END Added by all-cabal-hashes-tool

-- Initial generic-maybe.cabal generated by cabal init.  For further 
-- documentation, see http://haskell.org/cabal/users-guide/

name:                generic-maybe
version:             0.3.0.4
synopsis:            A generic version of Data.Maybe
description:
 This module is a drop in replacement for 'Data.Maybe'. It generalizes
 the functions to any types that share the same \"sum of products\" view
 of 'Maybe'.
 .
 To use the module for your type, enable GHC's DeriveGeneric extension and
 derive a Generic instance for your type.
 .
 > import GHC.Generics
 > 
 > data Result a = Success a | Fail
 >    deriving (Show, Generic)
 .
 After which you can use the functions, like your type was 'Data.Maybe.Maybe'
 .
 >> fromMaybe 'a' Fail
 >'a'
 . 
 >> fromMaybe 'a' $ Success 'b'
 >'b'
homepage:            https://github.com/jfischoff/generic-maybe
license:             BSD3
license-file:        LICENSE
author:              Jonathan Fischoff
maintainer:          jonathangfischoff@gmail.com
-- copyright:           
category:            Generics
build-type:          Custom
-- extra-source-files:  
cabal-version:       >=1.10

-- You can disable the doctests test suite with -f-test-doctests
flag test-doctests
  default: True
  manual: True
    
-- You can disable the hlint test suite with -f-test-hlint
-- Disabled until the LambdaCase extension is added src-exts
flag test-hlint
  default: True
  manual: True
  
library
  exposed-modules : Data.Generics.Maybe 
  
  other-extensions: TypeOperators
                  , MultiParamTypeClasses
                  , FunctionalDependencies
                  , FlexibleContexts
                  , FlexibleInstances
                  , ScopedTypeVariables
                  
  build-depends: base >=4.5  && < 4.8
               , ghc-prim
               
  hs-source-dirs:      src
  default-language:    Haskell2010
  
  ghc-options: -Wall

test-suite doctests
  type:           exitcode-stdio-1.0
  main-is:        doctests.hs
  ghc-options:    -Wall -threaded
  hs-source-dirs: tests
  default-language:    Haskell2010

  if impl(ghc<7.6.1)
     buildable: False

  if !flag(test-doctests)
    buildable: False
  else
    build-depends:
      base,
      bytestring,
      containers,
      directory      >= 1.0,
      deepseq,
      doctest        >= 0.9.1,
      filepath,
      generic-deriving,
      mtl,
      nats,
      parallel,
      semigroups     >= 0.9,
      simple-reflect >= 0.3.1,
      split,
      text,
      unordered-containers,
      vector

  if impl(ghc<7.6.1)
    ghc-options: -Werror

test-suite hlint
   type: exitcode-stdio-1.0
   main-is: hlint.hs
--   ghc-options: -w -threaded -rtsopts -with-rtsopts=-N
   hs-source-dirs: tests
   default-language:    Haskell2010

   if !flag(test-hlint)
     buildable: False
   else
     build-depends:
       base,
       hlint >= 1.7

benchmark bench-builder-all
  type:             exitcode-stdio-1.0
  hs-source-dirs:   src, benchmarks
  main-is:          Reference.hs
  build-depends: base
               , deepseq
               , criterion
  ghc-options: -O2
               -fmax-simplifier-iterations=10
               -fdicts-cheap
               -fspec-constr-count=6
