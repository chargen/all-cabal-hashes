-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:1162419e3dbaeb2fda39879a1f8d42b2
    SHA1:a01329f3b986012235937eb3de59a095e098018b
    SHA256:51245055c533bb1b80d4b06967a3bd00b5a2ae0dd321f677a377378ad7df7bc3
    SHA512:8dcb0c489be606e9b6f10e3115e0cdf8b3fab67ce54fec46c1b6c7bdae6de8cd441ebb4a58f80ad79053194ce1d5dda9dcf14ac3d27e7d066724d4c0f42f3cf1
    Skein512_512:d4834b664378e05e81c9baf45253081a16d8a290e6ee8c0e3a8a749c0cc1934e7b8dfb3dabc062f1366e2dcec26dd3d36a0f105568e7ecd5df37ea487ebbc649

x-package-locations:
    https://hackage.haskell.org/package/streams-0.3/streams-0.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/streams-0.3.tar.gz

x-package-size: 19119
-- END Added by all-cabal-hashes-tool

name:          streams
category:      Control, Comonads
version:       0.3
license:       BSD3
cabal-version: >= 1.6
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://github.com/ekmett/streams
copyright:     Copyright 2011 Edward Kmett
               Copyright 2010 Tony Morris, Oliver Taylor, Eelis van der Weegen
               Copyright 2007-2010 Wouter Swierstra, Bas van Dijk
synopsis:      Various Haskell 2010 stream comonads
build-type:    Simple
extra-source-files: README
description:   
  Various Haskell 2010 stream comonads.
  .
  * "Data.Stream.Branching" provides an \"f-Branching Stream\" comonad, aka the cofree comonad, or generalized rose tree. 
  .
  > data Stream f a = a :< f (Stream a)
  .
  * "Data.Stream.Future" provides a coinductive anti-causal stream, or non-empty 'ZipList'. The comonad provides access to only the 
    tail of the stream. Like a conventional 'ZipList', this is /not/ a monad.
  .
  > data Future a = Last a | a :< Future a
  .
  * "Data.Stream.Future.Skew" provides a non-empty skew-binary random-access-list with the semantics of @Data.Stream.Future@. As with
    "Data.Stream.Future" this stream is not a 'Monad', since the 'Applicative' instance zips streams of potentially differing lengths. 
    The random-access-list structure provides a number of operations logarithmic access time, but makes 'Data.Stream.Future.Skew.cons' 
    less productive. Where applicable "Data.Stream.Infinite.Skew" may be more efficient, due to a lazier and more efficient 'Applicative' 
    instance.
  . 
  >
  .
  * "Data.Stream.NonEmpty" provides a non-empty list comonad where the Applicative and Monad work like those of the @[a]@. 
    Being non-empty, it trades in the 'Alternative' and 'Monoid' instances of @[a]@ for weaker append-based 'FunctorAlt' and 'Semigroup'
    instances while becoming a member of 'Comonad' and 'ComonadApply'. Acting like a list, the semantics of '<*>' and
    '<.>' take a cross-product of membership from both 'NonEmpty' lists rather than zipping like a 'Future'
  .
  > data NonEmpty a = a :| [a]
  .
  * "Data.Stream.Infinite" provides a coinductive infinite anti-causal stream. The 'Comonad' provides access to the tail of the
    stream and the 'Applicative' zips streams together. Unlike 'Future', infinite stream form a 'Monad'. The monad diagonalizes 
    the 'Stream', which is consistent with the behavior of the 'Applicative', and the view of a 'Stream' as a isomorphic to the reader 
    monad from the natural numbers. Being infinite in length, there is no 'Alternative' instance, but instead the 'FunctorAlt'
    instance provides access to the 'Semigroup' of interleaving streams.
  .
  > data Stream a = a :< Stream a
  .
  * "Data.Stream.Infinite.Skew" provides an infinite skew-binary random-access-list with the semantics of "Data.Stream.Infinite"
    Since every stream is infinite, the 'Applicative' instance can be considerably less strict than the corresponding instance for 
    "Data.Stream.Future.Skew" and performs asymptotically better.
  .
  >
  .
  * "Data.Stream.Infinite.Functional.Zipper" provides a bi-infinite sequence, represented as a pure function with an accumulating
    parameter added to optimize moving the current focus.
  .
  > data Zipper a = !Integer :~ (Integer -> a)
  .
  /Changes since 0.1/: 
  .
  * A number of strictness issues with 'NonEmpty' were fixed
  .
  * More documentation

source-repository head
  type: git
  location: git://github.com/ekmett/streams.git
  

library
  build-depends:
    base >= 4 && < 4.4,
    comonad >= 0.6.2.1 && < 0.7,
    functor-apply >= 0.7.4 && < 0.8,
    semigroups >= 0.3.2 && < 0.4

  extensions: CPP
  if impl(ghc)
    cpp-options: -DLANGUAGE_DeriveDataTypeable
    extensions: FlexibleContexts, DeriveDataTypeable

  exposed-modules:
    Data.Stream.Branching
    Data.Stream.Future
    Data.Stream.Future.Skew
    Data.Stream.NonEmpty
    Data.Stream.Infinite
    Data.Stream.Infinite.Skew
    Data.Stream.Infinite.Functional.Zipper

  ghc-options: -Wall

