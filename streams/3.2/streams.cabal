name:          streams
category:      Control, Comonads
version:       3.2
license:       BSD3
cabal-version: >= 1.6
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://github.com/ekmett/streams
homepage:      http://github.com/ekmett/streams/issues
copyright:     Copyright 2011-2013 Edward Kmett
               Copyright 2010 Tony Morris, Oliver Taylor, Eelis van der Weegen
               Copyright 2007-2010 Wouter Swierstra, Bas van Dijk
               Copyright 2008 Iavor S. Diatchki
synopsis:      Various Haskell 2010 stream comonads
build-type:    Simple
extra-source-files:
  CHANGELOG.markdown
  README
  .ghci
  .gitignore
  .travis.yml
  .vim.custom
description:
  Various Haskell 2010 stream comonads.
  * "Data.Stream.Future" provides a coinductive anti-causal stream, or non-empty 'ZipList'. The comonad provides access to only the
    tail of the stream. Like a conventional 'ZipList', this is /not/ a monad.
  .
  > data Future a = Last a | a :< Future a
  .
  * "Data.Stream.Future.Skew" provides a non-empty skew-binary random-access-list with the semantics of @Data.Stream.Future@. As with
    "Data.Stream.Future" this stream is not a 'Monad', since the 'Applicative' instance zips streams of potentially differing lengths.
    The random-access-list structure provides a number of operations logarithmic access time, but makes 'Data.Stream.Future.Skew.cons'
    less productive. Where applicable "Data.Stream.Infinite.Skew" may be more efficient, due to a lazier and more efficient 'Applicative'
    instance.
  .
  >
  .
  * "Data.Stream.Infinite" provides a coinductive infinite anti-causal stream. The 'Comonad' provides access to the tail of the
    stream and the 'Applicative' zips streams together. Unlike 'Future', infinite stream form a 'Monad'. The monad diagonalizes
    the 'Stream', which is consistent with the behavior of the 'Applicative', and the view of a 'Stream' as a isomorphic to the reader
    monad from the natural numbers. Being infinite in length, there is no 'Alternative' instance.
  .
  > data Stream a = a :< Stream a
  .
  * "Data.Stream.Infinite.Skew" provides an infinite skew-binary random-access-list with the semantics of "Data.Stream.Infinite"
    Since every stream is infinite, the 'Applicative' instance can be considerably less strict than the corresponding instance for
    "Data.Stream.Future.Skew" and performs asymptotically better.
  .
  >
  .
  * "Data.Stream.Infinite.Functional.Zipper" provides a bi-infinite sequence, represented as a pure function with an accumulating
    parameter added to optimize moving the current focus.
  .
  > data Zipper a = !Integer :~ (Integer -> a)
  .
  * "Data.Stream.Supply" provides a comonadic supply of unique values, which are
    generated impurely as the tree is explored.

source-repository head
  type: git
  location: git://github.com/ekmett/streams.git

library
  other-extensions:
    PatternGuards
    BangPatterns

  build-depends:
    base          >= 4       && < 5,
    adjunctions   >= 4.0.1   && < 5,
    comonad       >= 4       && < 5,
    distributive  >= 0.2.1   && < 1,
    semigroupoids >= 4       && < 5,
    semigroups    >= 0.8.3.1 && < 1

  extensions: CPP
  if impl(ghc)
    cpp-options: -DLANGUAGE_DeriveDataTypeable
    extensions: FlexibleContexts, DeriveDataTypeable

  exposed-modules:
    Data.Stream.Future
    Data.Stream.Future.Skew
    Data.Stream.Infinite
    Data.Stream.Infinite.Skew
    Data.Stream.Infinite.Functional.Zipper
    Data.Stream.Supply

  hs-source-dirs: src
  ghc-options: -Wall



package-hashes:
    MD5:7e2ad9b7b373014b84bd13cfe42726c9
    SHA1:3ca090c32dddb4279be83a884965d9e1f4f01bc5
    SHA256:d13e8b0f3bfc426ba1f6ec32970f997cd5deaedecc1182b5ffd75e1d2327bade
    SHA512:64c50f7d331e1b2bc0cea86b910d84616a19e82fba6232ddd69ac3cc745b7cefc8ce67489ba79132b49e54dd4374e13500fa2b971a0336611b298b27a7ca6a01
    Skein512_512:cf87089d76ae9aed06857a8890ebbaf1aa5d184c8a1be89d02a1eb9fbfb64c2dd94466bca7bd178c8b94ba6b943c8f01b1049cce9d479d886b4482a5ed599a9c

package-locations:
    https://hackage.haskell.org/package/streams-3.2/streams-3.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/streams-3.2.tar.gz

package-size: 18097
