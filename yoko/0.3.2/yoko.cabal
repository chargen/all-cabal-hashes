-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:cc46cb1409732dccbc60267cb2c22b55
    SHA1:9366e02d4cf800cbca582b2e0b2acc3f2f793a7d
    SHA256:c515e7a9cada02e740b76550ba6e0a9c9c0fa37ac6226f99bbc399d1359dc910
    SHA512:32561659d384b838f6850c94f247868d9c615a7b3a140f2c9a5e08a6119ac93406156210983c5f46ac456025784f7f9e7006321b7cddf913e5c15708c24c3f4d
    Skein512_512:04b8cc8db36f226cd885cdf22208aab86e909e2f9bd16b58f227e2e28ab0f77617ed73fbdd8db63597cd6db680e64f9d302a8ecb0a59e63cd6be655a3740e4da

package-locations:
    https://hackage.haskell.org/package/yoko-0.3.2/yoko-0.3.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/yoko-0.3.2.tar.gz

package-size: 17616
-- END Added by all-cabal-hashes-tool

name: yoko
version: 0.3.2
synopsis: Generic Programming with Disbanded Data Types

description:
  Based off of the paper \"A Pattern for Almost Homomorphic Functions\" at <http://www.ittc.ku.edu/~nfrisby/papers/yoko.pdf>, submitted to ICFP 2012.
  .
  @yoko@ views a nominal datatype as a /band/ of constructors, each
  a nominal type in its own right. Such datatypes can be disbanded via the
  @disband@ function into an anonymous sum of nominal constructors, and vice
  versa via the @band@ function. This library uses extensive type-level
  programming to enrich its @instant-generics@ foundation with capabilities
  derived from the constructor-centric perspective.
  .
  For example, consider the following /nominal datatype/.
  .
  @
    data Beatles = John ... | Paul ... | George ... | Ringo ...
  @
  .
  This type can of course be understood as a sum of the individual
  /constructor types/.
  .
  @
    data John   = John   ...
    data Paul   = Paul   ...
    data George = George ...
    data Ringo  = Ringo  ...
  @
  .
  @yoko@'s conceptual foundations start there. In particular, this allows a
  constructor, say @John@, to be used independently of its original range type
  and sibling constructors.
  .
  As a generic programming library, @yoko@ extends @instant-generics@ with
  support for constructor-centric generic programming. The @Examples/LambdaLift/@
  file distributed with the @yoko@ source demonstrates defining a
  lambda-lifting conversion between the two types @ULC@, which has lambdas,
  and @Prog@, which has top-level function declarations instead.
  .
  @
    data ULC = Lam Type ULC | Var Int | Let [Decl] ULC | App ULC ULC
  .
    data Decl = Decl Type ULC
  .
  .
  .
    data Prog = Prog [FunDec] TLF
    type FunDec = ([Type], [Type], Type, TLF)
  .
    data TLF = Top Int [Occ] | Occ Occ | App TLF TLF
    data Occ = Par Int | Env Int
  @
  .
  These types are defined in separate modules, since they have constructors
  with the same name. Indeed, the fact that they having matching constructors
  named @App@ is crucial for @yoko@'s automatic conversion from @ULC@'s @App@
  to @TLF@'s @App@. As written, the generic lambda-lifter would continue to
  work for any new @ULC@ constructors (e.g. syntax for tuples or mutable
  references) as long as constructors with the same names and analogous fields
  were added to @TLF@ and the semantics of those constructors doesn't involve
  binding. This default behavior of the lambda-lifter is specified in about ten
  lines of user code.
  .
  Existing generic libraries don't use constructor names to the degree that
  @yoko@ does, and so cannot accomodate generic /conversions/ as well.

category: Generics, Reflection

license: BSD3
license-file: LICENSE
author: Nicolas Frisby <nicolas.frisby@gmail.com>
maintainer: Nicolas Frisby <nicolas.frisby@gmail.com>
stability: experimental

build-type: Simple
cabal-version: >= 1.6

extra-source-files: README, CHANGES, Examples/*.hs, Examples/LambdaLift/*.hs


source-repository head
  type:     git
  location: git://github.com/nfrisby/yoko.git


library
  build-depends: base >= 4 && < 5,
                 template-haskell > 2.7 && < 2.8,
                 containers >= 0.4 && < 0.5,
                 mtl >= 2.0 && < 2.1

  build-depends: th-sccs < 0.1, invariant < 0.2

  build-depends: type-equality < 0.2

  build-depends:
    kinds >= 0.0.1.5 && < 0.1,
    type-functions >= 0.2.0.3 && < 0.3,
    records >= 0.1.1.6 && < 0.2

  build-depends:
    type-booleans < 0.2,
    type-spine >= 0.1.1 && < 0.2,
    tagged-th < 0.2,
    type-digits < 0.2,
    type-cereal >= 0.1.1 && < 0.2,
    type-ord < 0.2,
    type-ord-spine-cereal < 0.2

  exposed-modules:
    Data.Yoko, Data.Yoko.HCompos, Data.Yoko.TH

    Data.Yoko.TypeBasics, Data.Yoko.Each

  other-modules:
    Data.Yoko.View,
    Data.Yoko.MaybeKind,
    Data.Yoko.Representation,
    Data.Yoko.TypeSums,
    Data.Yoko.TypeSumsAux,
    Data.Yoko.TH.Internal

    -- under development
--    Data.Yoko.Fold,
--    Data.Yoko.Map,
--    Data.Yoko.OnRs
