-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:dfdfd2e69c96fc4a4271170f486623c7
    SHA1:dc61e29e8276f2e97b95b9c35aab88fe7feae467
    SHA256:6573ce84639aba76819eaf225acc1599dcfff5722374f9ca1ebc5d878487c32a
    SHA512:8118ecbb18c67f15581b2e3f9dde73f2b3c8bde0f0808b47897977117ec3a8d2253052805b47f0cc36f970fb2dd02328ddf2c5c7a3140ae615eea57dc70373b1
    Skein512_512:8413e622b895890690f21dd29e733f5a8a01a298e647f7df0152ff0fe307de8e43ad7826798ce7a43029b0e52b5e28dd24e4be3bdbc0734befe2618419e41aa1

package-locations:
    https://hackage.haskell.org/package/safe-globals-0.1.1/safe-globals-0.1.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/safe-globals-0.1.1.tar.gz

package-size: 4438
-- END Added by all-cabal-hashes-tool

name:                safe-globals
version:             0.1.1
license:             BSD3
license-file:        LICENSE
synopsis:            Safe top-level mutable variables which scope like ordinary values
category:            Data
author:              Keegan McAllister <mcallister.keegan@gmail.com>
maintainer:          Keegan McAllister <mcallister.keegan@gmail.com>
build-type:          Simple
cabal-version:       >=1.6
description:
    This library provides a way to declare @IORef@s, @TVar@s, @Chan@s, etc.
    at the top level of a module.
    .
    * Declarations are safe.  User code does not invoke @unsafePerformIO@
      or compiler pragmas.
    .
    * Variables are ordinary module-level bindings.  Their scope can be
      controlled through the usual module import/export mechanism.  Unrelated
      code cannot interfere with private variables by guessing some global
      identifier.
    .
    * References are statically typed, and polymorphic references are statically
      forbidden.
    .
    * The implementation is simple, and closely follows existing common practice.
    .
    This library does not prevent the software design problems caused by global
    state.  Rather, it provides some implementation safety for those
    circumstances where global state really is necessary.
    .
    Fundamentally this library just provides Template Haskell macros for the
    usual @unsafePerformIO@ trick, so it is subject to the same caveats.  In
    particular, linking a module and then loading the same module dynamically
    through the GHC API may produce two copies of the same top-level variable.
    See the documentation of @unsafePerformIO@ for additional compiler-specific
    requirements.
    .
    This library may not work properly on GHC before 7.4, due to a GHC bug:
    <http://hackage.haskell.org/trac/ghc/ticket/5558>

extra-source-files:
    README
  , examples/all.hs
  , examples/isolation/A.hs
  , examples/isolation/B.hs
  , examples/isolation/main.hs

library
  exposed-modules:
      Data.Global
  ghc-options:      -Wall
  build-depends:
      base >= 3 && < 5
    , stm  >= 2.1
    , template-haskell >= 2.4

  other-extensions:
      TemplateHaskell
    , CPP

source-repository head
    type:     git
    location: git://github.com/kmcallister/safe-globals
