-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:4b8532c63cece47d91fff09899a1a978
    SHA1:3a208d158dbd0e8adec3a267dfcfaf9e70d14324
    SHA256:62a4cbbb8db15f749f9aa3a196770bb7b4975117a0ae91f5a241d5dde69dfeaa
    SHA512:945f55bd16f99a16c61a9cb71d7b082c3d1a6bce5afcb92530c7ad1c6fe511fad4a7967c295f39a6f20de95d9bea6fde516c9e06bb61871f1d5e6ac008db7d0e
    Skein512_512:e9a3917184ab7289f41b296c5ef52adc8a18d46591e5e9f8d7b8eaa59489be86f5c9e0734f2949d042a366a5cc80ea009b2650544c6712ff7e00a8c21b21baaa

x-package-locations:
    https://hackage.haskell.org/package/full-text-search-0.2.0.0/full-text-search-0.2.0.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/full-text-search-0.2.0.0.tar.gz

x-package-size: 13503
-- END Added by all-cabal-hashes-tool

name:                full-text-search
version:             0.2.0.0
synopsis:            In-memory full text search engine
description:         An in-memory full text search engine library. It lets you
                     run full-text queries on a collection of your documents.
                     .
                     Features:
                     .
                     * Can search over any type of \"document\".
                       (You explain how to extract search terms from them.)
                     .
                     * Supports documents with multiple fields
                       (e.g. title, body)
                     .
                     * Supports documents with non-term features
                       (e.g. quality score, page rank)
                     .
                     * Uses the state of the art BM25F ranking function
                     .
                     * Adjustable ranking parameters (including field weights
                       and non-term feature scores)
                     .
                     * In-memory but quite compact. It does not keep a copy of
                       your original documents.
                     .
                     It is independent of the document type, so you have to
                     write the document-specific parts: extracting search terms
                     and any case-normalisation or stemming. This is quite
                     easy using libraries such as
                     <http://hackage.haskell.org/package/tokenize tokenize> and
                     <http://hackage.haskell.org/package/snowball snowball>.
                     .
                     For an example, see the code for the
                     <http://hackage.haskell.org/package/hackage-server hackage-server>
                     where it is used for the package search feature.

license:             BSD3
license-file:        LICENSE
author:              Duncan Coutts
maintainer:          Duncan Coutts <duncan@well-typed.com>
copyright:           2013-2014 Duncan Coutts, 2014 Well-Typed LLP
category:            Data, Text, NLP
build-type:          Simple
cabal-version:       >=1.10

source-repository head
  type:              darcs
  location:          http://code.haskell.org/full-text-search/

library
  exposed-modules:     Data.SearchEngine,
                       Data.SearchEngine.BM25F
  other-modules:       Data.SearchEngine.DocFeatVals,
                       Data.SearchEngine.TermBag,
                       Data.SearchEngine.DocTermIds,
                       Data.SearchEngine.SearchIndex,
                       Data.SearchEngine.DocIdSet
  other-extensions:    BangPatterns,
                       NamedFieldPuns,
                       RecordWildCards,
                       GeneralizedNewtypeDeriving
  build-depends:       base       >=4.5  && <4.7,
                       array      >=0.4  && <0.5,
                       vector     >=0.10 && <0.11,
                       containers >=0.4  && <0.6,
                       text       >=0.11 && <1.2
  default-language:    Haskell2010
  ghc-options:         -Wall
