-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:d37042481052948fe52e932593215d4f
    SHA1:100f35c4eda00179d640e160741bb020d617cd55
    SHA256:c32a85ee84455c3a03ed7142d5adb60d2e7e0e467ba6458c549c5c3db3cac3a8
    SHA512:8090fc57de5d0f134c5450274a9dc57a5a8afeb0e1cb786abf854bed59d9207b1879defb6ab146fe62845e7615f2e3c8b8b8e7eea9896f373f94ccc4dd86f59f
    Skein512_512:deb67af2c85c9c344ab2ddea7b7833789d7ad3c269b9d5b92a6f25eb80465a3e82b2f2bc1a7ad1cec67c4235508b32c5745819b691aa1322cde6053271dc6804

x-package-locations:
    https://hackage.haskell.org/package/vault-0.2.0.4/vault-0.2.0.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/vault-0.2.0.4.tar.gz

x-package-size: 4883
-- END Added by all-cabal-hashes-tool

Name:               vault
Version:            0.2.0.4
Synopsis:           a persistent store for values of arbitrary types
Description:
  A /vault/ is a persistent store for values of arbitrary types.
  It's like having first-class access to the storage space behind IORefs.
  .
  The data structure is analogous to a bank vault,
  where you can access different bank boxes with different keys;
  hence the name.
  .
  Also provided is a /locker/ type, representing a store for a single element.
  
Category:           Data
License:            BSD3
License-file:       LICENSE
Author:             Heinrich Apfelmus, Elliott Hird
Maintainer:         Heinrich Apfelmus <apfelmus at quantentunnel de>
Homepage:           https://github.com/HeinrichApfelmus/vault
Copyright:          (c) Heinrich Apfelmus 2011

build-type:         Simple
cabal-version:      >= 1.6

extra-source-files: Readme.md

source-repository head
    type:           git
    location:       git://github.com/HeinrichApfelmus/vault.git


flag UseGHC
    description: Use GHC-specific packages and extensions.
    default:     True
    
Library
    hs-source-dirs:     src
    build-depends:      base == 4.*, containers >= 0.4 && < 0.6
    if impl(ghc) && flag(UseGHC)
        build-depends:  unordered-containers >= 0.2.1.0 && < 0.3,
                        hashable >= 1.1 && < 1.3 
        CPP-options:    -DUseGHC

    extensions:         CPP
--    ghc-options:        -Wall

    exposed-modules:
                        Data.Vault,
                        Data.Vault.ST,
                        Data.Unique.Really
                        
    if impl(ghc) && flag(UseGHC)
        other-modules: Data.Vault.ST_GHC
    else
        other-modules: Data.Vault.ST_Pure
