Name:               vault
Version:            0.3.0.2
Synopsis:           a persistent store for values of arbitrary types
Description:
  A /vault/ is a persistent store for values of arbitrary types.
  It's like having first-class access to the storage space behind IORefs.
  .
  The data structure is analogous to a bank vault,
  where you can access different bank boxes with different keys;
  hence the name.
  .
  Also provided is a /locker/ type, representing a store for a single element.
  .
  Changelog:
  .
  * 0.3.0.2 - Fix tarball.
  .
  * 0.3.0.1 - Use CPP to reduce code duplication.
  .
  * 0.3.0.0 - Split modules into Lazy and Strict variants, no default choice.
  Add Hashable instance to Data.Unique.Really for all implementations.
    
Category:           Data
License:            BSD3
License-file:       LICENSE
Author:             Heinrich Apfelmus, Elliott Hird
Maintainer:         Heinrich Apfelmus <apfelmus at quantentunnel de>
Homepage:           https://github.com/HeinrichApfelmus/vault
Copyright:          (c) Heinrich Apfelmus 2011-2013

build-type:         Simple
cabal-version:      >= 1.6

extra-source-files:
    Readme.md
    src/Data/Vault/IO.hs
    src/Data/Vault/ST/ST.hs
    src/Data/Vault/ST/backends/GHC.hs

source-repository head
    type:           git
    location:       git://github.com/HeinrichApfelmus/vault.git

flag UseGHC
    description: Use GHC-specific packages and extensions.
    default:     True

Library
    hs-source-dirs:     src
    build-depends:      base >= 4.5 && < 4.7,
                        containers >= 0.4 && < 0.6,
                        unordered-containers >= 0.2.3.0 && < 0.3,
                        hashable >= 1.1.2.5 && < 1.3

    extensions:         CPP
    ghc-options:        -Wall -fno-warn-missing-signatures

    exposed-modules:
                        Data.Vault.Lazy,
                        Data.Vault.Strict,
                        Data.Vault.ST.Lazy,
                        Data.Vault.ST.Strict,
                        Data.Unique.Really

    if impl(ghc) && flag(UseGHC)
        CPP-options:    -DUseGHC


package-hashes:
    MD5:4f2b4e4a4aff584e5c402f41d3ffa8f7
    SHA1:22f192917826aeb4ab703a31d5e27179d37c7b4d
    SHA256:eb4271e33ef917c71a6da250dd922f5dad9aafd81b1fcfda72c170fab9553bd5
    SHA512:b5e7b030d654a2e5907fc91d39efd5878c172bf72299f08be78efcbca56f0d8d0f0b6979b84bc83198a07ae3ca0df7325b30157f4cc8f528436a5e6848e056b7
    Skein512_512:97dddf2ad66d5d2943eee57b9e20748f6481cc394911d5200a235630cb9383352d7d58bc880ded628f0b19c9072f35db7268ed82fcf7d60cf02ca754690730da

package-locations:
    https://hackage.haskell.org/package/vault-0.3.0.2/vault-0.3.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/vault-0.3.0.2.tar.gz

