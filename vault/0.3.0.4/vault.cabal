-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:979f42ff1d66ac69b2549edd2871f618
    SHA1:aa02a3723243d8681d532c95a20653b976e78722
    SHA256:561ef32877935067e458333a44a37f15b4063559c4cb4ddc412ccf705ec6062a
    SHA512:b2451386f8533a86ab092a62b0b6ad02ad33947e57f7886edaa5b9d58fa76c151219661f1428c603503f4c20d484b46ac2801adbb79d15c970a3249485a34e11
    Skein512_512:37a7a1d2aa190518eb3d9425665b482ea9c5cbabdbcb3045f92e0220c54e63a24eb2e8211a3f517dfb0d21c5b221d70907389623a6688d79f348adce026082f3

package-locations:
    https://hackage.haskell.org/package/vault-0.3.0.4/vault-0.3.0.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/vault-0.3.0.4.tar.gz

package-size: 5009
-- END Added by all-cabal-hashes-tool

Name:               vault
Version:            0.3.0.4
Synopsis:           a persistent store for values of arbitrary types
Description:
  A /vault/ is a persistent store for values of arbitrary types.
  It's like having first-class access to the storage space behind IORefs.
  .
  The data structure is analogous to a bank vault,
  where you can access different bank boxes with different keys;
  hence the name.
  .
  Also provided is a /locker/ type, representing a store for a single element.
    
Category:           Data
License:            BSD3
License-file:       LICENSE
Author:             Heinrich Apfelmus, Elliott Hird
Maintainer:         Heinrich Apfelmus <apfelmus at quantentunnel de>
Homepage:           https://github.com/HeinrichApfelmus/vault
Copyright:          (c) Heinrich Apfelmus 2011-2013

build-type:         Simple
cabal-version:      >= 1.6

extra-source-files:
    CHANGELOG.md
    README.md
    src/Data/Vault/IO.hs
    src/Data/Vault/ST/ST.hs
    src/Data/Vault/ST/backends/GHC.hs

source-repository head
    type:           git
    location:       git://github.com/HeinrichApfelmus/vault.git

flag UseGHC
    description: Use GHC-specific packages and extensions.
    default:     True

Library
    hs-source-dirs:     src
    build-depends:      base >= 4.5 && < 4.9,
                        containers >= 0.4 && < 0.6,
                        unordered-containers >= 0.2.3.0 && < 0.3,
                        hashable >= 1.1.2.5 && < 1.3

    extensions:         CPP
    ghc-options:        -Wall -fno-warn-missing-signatures

    exposed-modules:
                        Data.Vault.Lazy,
                        Data.Vault.Strict,
                        Data.Vault.ST.Lazy,
                        Data.Vault.ST.Strict,
                        Data.Unique.Really

    if impl(ghc) && flag(UseGHC)
        CPP-options:    -DUseGHC
