-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:6d8b6242500bb14b849f9d0c47642db7
    SHA1:18609ae0657695e344d1fb9524b12082d388ec42
    SHA256:2d0c38ef802d90d3cb140a8ebe4582e1b5bbb73411064c0ec812de0b0e4e3be0
    SHA512:c8945f98cc22a9bb2880d3b1455715076c89ba2e2c96cf47894cbe946fad891af8e8a5b32fd8aac729768fba08d7a6606444b1d0d4cd2b4573d752f9a87023dd
    Skein512_512:2de905f67d89aec2c384ef8b0ed9828bf2a10056f748e469bcaa663d73a4c7df03cb270ea0a9394a9d7119e37b238eead8bfdbb0ee1abde20a4d5c1777ad560b

package-locations:
    https://hackage.haskell.org/package/persistent-vector-0.1.0.3/persistent-vector-0.1.0.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/persistent-vector-0.1.0.3.tar.gz

package-size: 15139
-- END Added by all-cabal-hashes-tool

name: persistent-vector
version: 0.1.0.3
synopsis: A persistent sequence based on array mapped tries
license: BSD3
license-file: LICENSE
author: Tristan Ravitch
maintainer: tristan@nochair.net
category: Data
build-type: Simple
cabal-version: >=1.10
extra-source-files: README.md
homepage: https://github.com/travitch/persistent-vector
bug-reports: https://github.com/travitch/persistent-vector/issues

description:
  This package provides persistent vectors based on array mapped
  tries.  The implementation is based on the persistent vectors used
  in clojure, but in a Haskell-style API.  The API is modeled after
  Data.Sequence from the containers library.
  .
  Technically, the element-wise operations are O(log(n)), but the
  underlying tree cannot be more than 7 or 8 levels deep so this is
  effectively constant time.
  .
  One change from the clojure implementation is that this version supports
  O(1) slicing, though it does cheat a little.  Slices retain references
  to elements that cannot be indexed.  These extra references (and the space
  they occupy) can be reclaimed by 'shrink'ing the slice.  This seems like
  a reasonable tradeoff, and, I believe, mirrors the behavior of the vector
  library.
  .
  Highlights:
  .
    * O(1) append element, indexing, updates, length, and slicing
  .
    * Reasonably compact representation

library
  default-language: Haskell2010
  exposed-modules: Data.Vector.Persistent
  other-modules: Data.Vector.Persistent.Array
                 Data.Vector.Persistent.Unsafe
  build-depends: base ==4.*, deepseq
  hs-source-dirs: src
  ghc-options: -Wall
  ghc-prof-options: -auto-all

test-suite pvTests
  default-language: Haskell2010
  type: exitcode-stdio-1.0
  main-is: pvTests.hs
  hs-source-dirs: tests
  ghc-options: -Wall
  build-depends: persistent-vector,
                 base == 4.*,
                 QuickCheck > 2.4,
                 test-framework,
                 test-framework-quickcheck2

benchmark pvBench
  default-language: Haskell2010
  type: exitcode-stdio-1.0
  hs-source-dirs: bench
  main-is: pvBench.hs
  ghc-options: -Wall -O2
  ghc-prof-options: -auto-all
  build-depends: persistent-vector,
                 base == 4.*,
                 containers,
                 criterion >= 1 && < 1.2,
                 deepseq

source-repository head
  type: git
  location: git://github.com/travitch/persistent-vector.git
