Name:                first-class-patterns
Version:             0.3.1
Author:              Reiner Pope, Brent Yorgey
Maintainer:          Brent Yorgey <byorgey@cis.upenn.edu>
License:             BSD3
License-file:        LICENSE
Synopsis:            First class patterns and pattern matching, using type families
Description:

	This package implements a library of first class patterns. The
	initial basis for this library was Morten Rhiger's \"Type-safe
	pattern combinators\"; the patterns can be used in an almost
	identical way to those of Morten Rhiger. In a series of blog
	posts at
	<http://reinerp.wordpress.com/category/pattern-combinators/>
	the types of patterns were made more revealing using type
	families, and a simpler implementation was used which avoids
	some book-keeping.
	.
	The library reimplements most of Haskell's built-in
	pattern matching facilities, plus some more. The pattern
	matches of this library are lightweight: when GHC's
	optimisation is turned on, all overhead should be optimised
	away, leaving a standard Haskell pattern match.
        .
	If you're just reading the documentation for this library for
	the first time, start with "Data.Pattern".

Cabal-Version:       >= 1.6
Category:            Data
Build-Type:          Simple
Stability:           experimental
homepage:            https://github.com/reinerp/first-class-patterns
bug-reports:         https://github.com/reinerp/first-class-patterns/issues

source-repository head
  type:                 git
  location:             git://github.com/reinerp/first-class-patterns.git

library
  Build-Depends:
    base >= 4.5 && < 5,
    transformers >= 0.1.0 && < 0.4
  Exposed-modules:     Data.Pattern
                       Data.Pattern.Base
                       Data.Pattern.Base.TypeList
                       Data.Pattern.Base.Tuple
                       Data.Pattern.Common
  Other-modules:       Data.Pattern.Base.Difference
  Extensions:          TypeFamilies, 
                       GADTs, 
                       ScopedTypeVariables, 
                       TypeOperators, 
                       EmptyDataDecls, 
                       Rank2Types, 
                       GeneralizedNewtypeDeriving, 
                       FlexibleInstances

  -- necessary to get all the patterns properly inlined. Note that putting
  -- {-# INLINE #-} pragmas every doesn't seem to work, due to some subtlety
  -- of the inliner.
  ghc-options:         
                     -funfolding-use-threshold=1000
                     -funfolding-creation-threshold=1000


package-hashes:
    MD5:13ac6213bfd68730a10cd357a9bf070b
    SHA1:b1d4f106f5bd6c742aacb8f0a813222864ea97c1
    SHA256:173924636e303eb85f29ad7a8e643ce4224329fb796bc186a4a39d3541247544
    SHA512:29e357a4bcdf39388a9244d860502e19619f507a092c2b47ea7ae8248f362297b9bcc7eed774fbac2f3f22dec2367bc1205178d095542940877129df16345c07
    Skein512_512:f5f4c005df10b62ec443916449a0871fad3066a043a4e2835a6847d776011c9cb2e01f96856db56bb335f9b9ae2cf33db174b56478a767b0966918d6496285f3

package-locations:
    https://hackage.haskell.org/package/first-class-patterns-0.3.1/first-class-patterns-0.3.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/first-class-patterns-0.3.1.tar.gz

package-size: 9417
