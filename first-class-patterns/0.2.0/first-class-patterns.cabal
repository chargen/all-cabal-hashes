-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:67a2ab8e4765d3a436c90868693b3c89
    SHA1:ac9f4b7551b3f6a1e8be74395d197539a35bd082
    SHA256:281632112c968a2e0984c85d5370a6f3c64c7be1debcc272f8c04fa67ff3ff42
    SHA512:fa14f13d9b4c584e8e6aefe9b95e3478c39df17865a2016889318e3a2cddb0fc14788ef2657befb190fa0cb8d5048d737fee3c03e71abeb491023cee2bd0ad9a
    Skein512_512:577616aa09ff175d91a08064c6f28916caa689ccceb64c68b96d2e073748af45d080d39affaebf2859028c3a5657f5cfd9397ffaeb8ea9762eb08b9aa982fba3

x-package-locations:
    https://hackage.haskell.org/package/first-class-patterns-0.2.0/first-class-patterns-0.2.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/first-class-patterns-0.2.0.tar.gz

x-package-size: 6044
-- END Added by all-cabal-hashes-tool

Name:                first-class-patterns
Version:             0.2.0
Author:              Reiner Pope
Maintainer:          Reiner Pope <reiner.pope@gmail.com>
License:             BSD3
Synopsis:            First class patterns and pattern matching, using type families
Description:

	This package implements a library of first class patterns. The
	initial basis for this library was Morten Rhiger's \"Type-safe
	pattern combinators\"; the patterns can be used in an almost
	identical way to those of Morten Rhiger. In a series of blog
	posts at
	<http://reinerp.wordpress.com/category/pattern-combinators/>
	the types of patterns were made more revealing using type
	families, and a simpler implementation was used which avoids
	some book-keeping.
	.
	The library reimplements most of Haskell's built-in
	pattern matching facilities, plus some more. The pattern
	matches of this library are lightweight: when GHC's
	optimisation is turned on, all overhead should be optimised
	away, leaving a standard Haskell pattern match.

Cabal-Version:       >= 1.2.3        
Category:            Data
Build-Type:          Simple
Build-Depends:       base >= 3 && < 5, transformers >= 0.1.0 && < 0.1.5
Stability:           experimental
Tested-with:         GHC==6.10.3
Exposed-modules:     Data.Pattern
                     Data.Pattern.Base
                     Data.Pattern.Base.TypeList
                     Data.Pattern.Base.Tuple
                     Data.Pattern.Common
Other-modules:       Data.Pattern.Base.Difference
Extensions:          
		     TypeFamilies, 
		     GADTs, 
		     ScopedTypeVariables, 
		     TypeOperators, 
		     EmptyDataDecls, 
		     Rank2Types, 
		     GeneralizedNewtypeDeriving, 
		     FlexibleInstances

-- necessary to get all the patterns properly inlined. Note that putting
-- {-# INLINE #-} pragmas every doesn't seem to work, due to some subtlety
-- of the inliner.
ghc-options:         
                     -funfolding-use-threshold=1000
                     -funfolding-creation-threshold=1000
