Name:                first-class-patterns
Version:             0.3.0
Author:              Reiner Pope, Brent Yorgey
Maintainer:          Brent Yorgey <byorgey@cis.upenn.edu>
License:             BSD3
License-file:        LICENSE
Synopsis:            First class patterns and pattern matching, using type families
Description:

	This package implements a library of first class patterns. The
	initial basis for this library was Morten Rhiger's \"Type-safe
	pattern combinators\"; the patterns can be used in an almost
	identical way to those of Morten Rhiger. In a series of blog
	posts at
	<http://reinerp.wordpress.com/category/pattern-combinators/>
	the types of patterns were made more revealing using type
	families, and a simpler implementation was used which avoids
	some book-keeping.
	.
	The library reimplements most of Haskell's built-in
	pattern matching facilities, plus some more. The pattern
	matches of this library are lightweight: when GHC's
	optimisation is turned on, all overhead should be optimised
	away, leaving a standard Haskell pattern match.
        .
	If you're just reading the documentation for this library for
	the first time, start with "Data.Pattern".

Cabal-Version:       >= 1.6
Category:            Data
Build-Type:          Simple
Stability:           experimental
homepage:            https://github.com/reinerp/first-class-patterns
bug-reports:         https://github.com/reinerp/first-class-patterns/issues

source-repository head
  type:                 git
  location:             git://github.com/reinerp/first-class-patterns.git

library
  Build-Depends:       base >= 4.5 && < 5, transformers >= 0.1.0 && < 0.2.3
  Exposed-modules:     Data.Pattern
                       Data.Pattern.Base
                       Data.Pattern.Base.TypeList
                       Data.Pattern.Base.Tuple
                       Data.Pattern.Common
  Other-modules:       Data.Pattern.Base.Difference
  Extensions:          TypeFamilies, 
                       GADTs, 
                       ScopedTypeVariables, 
                       TypeOperators, 
                       EmptyDataDecls, 
                       Rank2Types, 
                       GeneralizedNewtypeDeriving, 
                       FlexibleInstances

  -- necessary to get all the patterns properly inlined. Note that putting
  -- {-# INLINE #-} pragmas every doesn't seem to work, due to some subtlety
  -- of the inliner.
  ghc-options:         
                     -funfolding-use-threshold=1000
                     -funfolding-creation-threshold=1000


package-hashes:
    MD5:39246067b5b01c41f69df086f1369cff
    SHA1:504156b513b9e5af24108f89e7a9de03a36a8697
    SHA256:9b23d408cac44359669583477c18a200c552d380f16398fbfd89e054daf62374
    SHA512:a883c49059fcc9960d7bb8f92e120b1986a01571657c3446ae9a050d2972c02c167df45f166e76cf7c872703bcf233a1a68d18d1f86e0a2b5ed97999b83a07f6
    Skein512_512:4457f60ba68589a8baa38f47f4bdff1bc9a4f3cd041d6226c63368c3f992b0bb6a6cb5d9312981296197c5ee56b5d3f232e2eda8f28d5a1f731d0355c9e085c9

package-locations:
    https://hackage.haskell.org/package/first-class-patterns-0.3.0/first-class-patterns-0.3.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/first-class-patterns-0.3.0.tar.gz

