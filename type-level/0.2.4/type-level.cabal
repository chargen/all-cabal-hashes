name:           type-level
version:        0.2.4
cabal-version:  >= 1.2
build-type:     Simple
license:        BSD3
license-file:   LICENSE
copyright:      
 Copyright (c) 2008 Alfonso Acosta, Oleg Kiselyov, Wolfgang Jeltsch
                    and KTH's SAM group
author:         Alfonso Acosta
maintainer:     alfonso.acosta@gmail.com
homepage:       http://code.haskell.org/type-level
stability:      alpha
package-url:    http://code.haskell.org/type-level
synopsis:       Type-level programming library
description:

 This library permits performing computations on the type-level. Type-level 
 functions are implemented using functional dependencies of multi
 parameter type classes. 

 To date, Booleans and Numerals (Naturals and Positives) are
 supported. With regard to Numerals, there is support for common
 arithmetic operations (addition, substraction, multiplication,
 division, exponientation, logarithm, maximum, comparison, GCD) 
 over natural numbers (using a decimal representation to make 
 compile-time errors friendlier).

 Although making use of type-level computations might seem devious and
 obfuscated at first sight, it is indeed useful in practice to implement 
 lightweight dependent types such us number-parameterized types (e.g. an array 
 type parameterized by the array's size or a modular group type Zn 
 parameterized by the modulus).

 Here is a tutorial on type-level numerals and how to use them to
 implement numerically-parameterized vectors: <http://www.ict.kth.se/forsyde/files/tutorial/tutorial.html#FSVec>


category:       Data
tested-with:    GHC==6.10.4
extra-source-files: LICENSE,
                    README

-- depends on ghc due to the use of infix type constructors and template haskell
Library
  build-depends:   base >=4 && <6, template-haskell > 2.0, syb
  hs-source-dirs:  src
  exposed-modules: Data.TypeLevel,
                   Data.TypeLevel.Bool,
                   Data.TypeLevel.Num,
                   Data.TypeLevel.Num.Reps,
                   Data.TypeLevel.Num.Aliases,
                   Data.TypeLevel.Num.Sets,
                   Data.TypeLevel.Num.Ops,
                   Data.TypeLevel.Num.Aliases.TH
  ghc-options:	-Wall
  if os(win32)
    -- The symbols for the zillion type level numbers overflows the Windows DLL symbol space.
    cpp-options: -DSLIM


package-hashes:
    MD5:4aca3b4fd0a56377ffa79464cf491509
    SHA1:3ec9cf2f9016852ce217f1d233d6462c7eba80da
    SHA256:3bbdca0507187b72675dc182bb05da68d7e080693fa1ffe9fb961f693c81f7b1
    SHA512:286bf7c8483cf4c739ad16e07305d971d73e1be9f6c3747704c7f451b6ed2bdffa2b5d6fef481270334c7bae6554bdfbc9399089ddf20bb80e248037b35725ab
    Skein512_512:edb491b717aedaa84173b30782773ce2ebd4339c134209238778dfb5a3baedb4d51e6db2f1fb393a7d7291f8510c80041511f4e291125fb3e162843dbff2ec5b

package-locations:
    https://hackage.haskell.org/package/type-level-0.2.4/type-level-0.2.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/type-level-0.2.4.tar.gz

