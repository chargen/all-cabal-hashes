name:           type-level
version:        0.2.3
cabal-version:  >= 1.2
build-type:     Simple
license:        BSD3
license-file:   LICENSE
copyright:      
 Copyright (c) 2008 Alfonso Acosta, Oleg Kiselyov, Wolfgang Jeltsch
                    and KTH's SAM group
author:         Alfonso Acosta
maintainer:     alfonso.acosta@gmail.com
homepage:       http://code.haskell.org/type-level
stability:      alpha
package-url:    http://code.haskell.org/type-level
synopsis:       Type-level programming library
description:

 This library permits performing computations on the type-level. Type-level 
 functions are implemented using functional dependencies of multi
 parameter type classes. 

 To date, Booleans and Numerals (Naturals and Positives) are
 supported. With regard to Numerals, there is support for common
 arithmetic operations (addition, substraction, multiplication,
 division, exponientation, logarithm, maximum, comparison, GCD) 
 over natural numbers (using a decimal representation to make 
 compile-time errors friendlier).

 Although making use of type-level computations might seem devious and
 obfuscated at first sight, it is indeed useful in practice to implement 
 lightweight dependent types such us number-parameterized types (e.g. an array 
 type parameterized by the array's size or a modular group type Zn 
 parameterized by the modulus).

 Here is a tutorial on type-level numerals and how to use them to
 implement numerically-parameterized vectors: <http://www.ict.kth.se/org/ict/ecs/sam/projects/forsyde/www/files/tutorial/tutorial.html#FSVec>


category:       Data
tested-with:    GHC==6.8.2
extra-source-files: LICENSE,
                    README

-- depends on ghc due to the use of infix type constructors and template haskell
Library
  build-depends:   base >=3 && <5, template-haskell > 2.0
  hs-source-dirs:  src
  exposed-modules: Data.TypeLevel,
                   Data.TypeLevel.Bool,
                   Data.TypeLevel.Num,
                   Data.TypeLevel.Num.Reps,
                   Data.TypeLevel.Num.Aliases,
                   Data.TypeLevel.Num.Sets,
                   Data.TypeLevel.Num.Ops,
                   Data.TypeLevel.Num.Aliases.TH
  ghc-options:	-Wall
  if os(win32)
    -- The symbols for the zillion type level numbers overflows the Windows DLL symbol space.
    cpp-options: -DSLIM


package-hashes:
    MD5:9616c5c0985fc9532271c30ce1e8ef3e
    SHA1:387348d7d86fa7530cb61a0ff72f7957824c0908
    SHA256:7e5d5a3407723b62c65bdd9e2aeeaf641b6a7add1b0b9613d3d08594868a060b
    SHA512:1608e101b0f483520853b392577e077156222355477720888bbfde2185b3890037ffdcc4c199bfc7eb079f04babddcf3413b42a4f4cd56a6f1b3bcb210457010
    Skein512_512:8bdb8f0b55383f858f729c65d882694b7ba8125308edd9dcb4fe4667a61b7373f182b28c65788e385641a6da1da3559f105c171d022d27efe0cf954820212cd8

package-locations:
    https://hackage.haskell.org/package/type-level-0.2.3/type-level-0.2.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/type-level-0.2.3.tar.gz

package-size: 13938
