-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:2f67bc20fd7ed8d70ed97c088b2cbbec
    SHA1:0f0484865380cb6893c23c34650dcf794ca862c2
    SHA256:60ed4c45aab4bca5e1718452ff14fc99347a32d4bbec74b42db3eb79f428d04a
    SHA512:3ebf4029ef0718e15b84b43801f3a34abd2f6a95e25c53bdc303b826f590f07e05df0d081effb9e52114d70ba2ad7ca3b6123a00abb9e8fedc1cb485aabc3e79
    Skein512_512:41babc0881ab8b397c6b61c889475d8d315992fc9bafc7b16be8e5ad5d91c05ad18200301e664a070d94c7821c543bb99cc696665cba576309b2d73e085fac94

package-locations:
    https://hackage.haskell.org/package/type-level-0.2.2/type-level-0.2.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/type-level-0.2.2.tar.gz

package-size: 14303
-- END Added by all-cabal-hashes-tool

name:           type-level
version:        0.2.2
cabal-version:  >= 1.2
build-type:     Simple
license:        BSD3
license-file:   LICENSE
copyright:      
 Copyright (c) 2008 Alfonso Acosta, Oleg Kiselyov, Wolfgang Jeltsch
                    and KTH's SAM group
author:         Alfonso Acosta
maintainer:     alfonso.acosta@gmail.com
homepage:       http://code.haskell.org/type-level
stability:      alpha
package-url:    http://code.haskell.org/type-level
synopsis:       Type-level programming library
description:

 This library permits performing computations on the type-level. Type-level 
 functions are implemented using functional dependencies of multi
 parameter type classes. 

 To date, Booleans and Numerals (Naturals and Positives) are
 supported. With regard to Numerals, there is support for common
 arithmetic operations (addition, substraction, multiplication,
 division, exponientation, logarithm, maximum, comparison, GCD) 
 over natural numbers (using a decimal representation to make 
 compile-time errors friendlier).

 Although making use of type-level computations might seem devious and
 obfuscated at first sight, it is indeed useful in practice to implement 
 lightweight dependent types such us number-parameterized types (e.g. an array 
 type parameterized by the array's size or a modular group type Zn 
 parameterized by the modulus).

 Here is a tutorial on type-level numerals and how to use them to
 implement numerically-parameterized vectors: <http://www.ict.kth.se/org/ict/ecs/sam/projects/forsyde/www/files/tutorial/tutorial.html#FSVec>


category:       Data
tested-with:    GHC==6.8.2
extra-source-files: LICENSE,
                    README

-- depends on ghc due to the use of infix type constructors and template haskell
Library
  build-depends:   base, template-haskell > 2.0
  hs-source-dirs:  src
  exposed-modules: Data.TypeLevel,
                   Data.TypeLevel.Bool,
                   Data.TypeLevel.Num,
                   Data.TypeLevel.Num.Reps,
                   Data.TypeLevel.Num.Aliases,
                   Data.TypeLevel.Num.Sets,
                   Data.TypeLevel.Num.Ops,
                   Data.TypeLevel.Num.Aliases.TH
  ghc-options:	-Wall
