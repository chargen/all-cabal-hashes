-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:6d6eee6125f992303629d17b55af040b
    SHA1:95e4ebe9429d97c4bf5c7b5491b71b2fd55abce0
    SHA256:cd41fe843b8690e0dafcdfa82e740a1c8e8de49f0b4ad90ee3bc24a4df5a9f73
    SHA512:c5f17ab42143e9204b0e337e65feb089fe7b3d11f181057d063616819dfca5561e09a6bbac7c22e1fec7c25f262705e968bcf5f6192de8a6a8467d70d1718e90
    Skein512_512:9a6f94366d219fe0a4be4282e96614349e4eb9797d5113756cd1a514e91699d5c7a74ce61967ee037785e3c88b185a6e105f54dcb3a56f65922f031603e84c0d

package-locations:
    https://hackage.haskell.org/package/hsx-0.6.0/hsx-0.6.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/hsx-0.6.0.tar.gz

package-size: 25570
-- END Added by all-cabal-hashes-tool

Name:                   hsx
Version:                0.6.0
License:                BSD3
License-File:           LICENSE
Author:                 Niklas Broberg, Joel Bj√∂rnson
Maintainer:             Niklas Broberg <nibro@cs.chalmers.se>

Stability:              Experimental
Category:               Language
Synopsis:               HSX (Haskell Source with XML) allows literal XML syntax to be used in Haskell source code.
Description:            HSX (Haskell Source with XML) allows literal XML syntax to be used in Haskell source code.
                        
                        The trhsx preprocessor translates .hsx source files into ordinary .hs files. Literal
                        XML syntax is translated into function calls for creating XML values of the appropriate
                        forms.
                        
                        trhsx transforms literal XML syntax into a series of function calls. Any project
                        can make use of the syntax by providing definitions for those functions, and the
                        XML values produced will be of the types specified. This works for any types, since
                        trhsx doesn't make any assumptions, or inserts any information depending on types.
                        
                        XMLGenerator defines a few typeclasses that together cover the functions injected by the
                        preprocessor. A project that uses these classes to provide the semantics for the injected
                        syntax will be able to use any functions written in terms of these, allowing better code 
                        reusability than if each project defines its own semantics for the XML syntax. Also, the classes
                        makes it possible to use the literal syntax at different types within the same module.
                        Achieving that is not as simple as it may seem, but the XMLGenerator module provides all the
                        necessary machinery.
                        
Homepage:               http://code.google.com/hsp

Build-Depends:          base>3 && <5, mtl, haskell-src-exts == 1.4.*, utf8-string
Build-Type:             Simple
Tested-With:            GHC==6.8.3, GHC==6.10.1
Cabal-Version: 		>= 1.6

Hs-Source-Dirs: src
Exposed-Modules:        HSX.XMLGenerator, HSX.Transform

Extensions:             MultiParamTypeClasses,
                        FunctionalDependencies,
                        OverlappingInstances,
                        UndecidableInstances,
                        FlexibleInstances,
                        GeneralizedNewtypeDeriving,
                        TypeFamilies,
                        TypeSynonymInstances,
                        FlexibleContexts,
                        TypeOperators,
                        CPP

Executable:             trhsx
Main-Is:                Trhsx.hs
Hs-Source-Dirs:         src
