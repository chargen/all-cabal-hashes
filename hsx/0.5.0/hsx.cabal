-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:f0ce6e9ee1331c915a5f5b6229dd8de9
    SHA1:3d8e95fac220490859b7310637638f671ae52703
    SHA256:a4064da7489b062a5d6c4ddb2f8c54d5bc7bb36a59d0e048e5747e0dcdba657b
    SHA512:500c2f4b514bdb033ee72e99c0194a7c821067627b6a2cb7045124154477f11e99e5ec21d6b2b7726ba05830c1e0c576dd23ec50de29769c2ea552a718167d40
    Skein512_512:b93aaf572f0c5f600fed64aa94052ea7519c4ee70c5b3a2dff75153f4e9dec849221e1230ef2f7ff010493b9953639cc006da1c4c921c94a4bfd976aaa60fefe

package-locations:
    https://hackage.haskell.org/package/hsx-0.5.0/hsx-0.5.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/hsx-0.5.0.tar.gz

package-size: 25375
-- END Added by all-cabal-hashes-tool

Name:                   hsx
Version:                0.5.0
License:                BSD3
License-File:           LICENSE
Author:                 Niklas Broberg, Joel Bj√∂rnson
Maintainer:             Niklas Broberg <nibro@cs.chalmers.se>

Stability:              Experimental
Category:               Language
Synopsis:               HSX (Haskell Source with XML) allows literal XML syntax to be used in Haskell source code.
Description:            HSX (Haskell Source with XML) allows literal XML syntax to be used in Haskell source code.
                        
                        The trhsx preprocessor translates .hsx source files into ordinary .hs files. Literal
                        XML syntax is translated into function calls for creating XML values of the appropriate
                        forms.
                        
                        trhsx transforms literal XML syntax into a series of function calls. Any project
                        can make use of the syntax by providing definitions for those functions, and the
                        XML values produced will be of the types specified. This works for any types, since
                        trhsx doesn't make any assumptions, or inserts any information depending on types.
                        
                        XMLGenerator defines a few typeclasses that together cover the functions injected by the
                        preprocessor. A project that uses these classes to provide the semantics for the injected
                        syntax will be able to use any functions written in terms of these, allowing better code 
                        reusability than if each project defines its own semantics for the XML syntax. Also, the classes
                        makes it possible to use the literal syntax at different types within the same module.
                        Achieving that is not as simple as it may seem, but the XMLGenerator module provides all the
                        necessary machinery.
                        
Homepage:               http://code.google.com/hsp

Build-Depends:          base>3 && <5, mtl, haskell-src-exts==0.5.2, utf8-string
Build-Type:             Simple
Tested-With:            GHC==6.8.3, GHC==6.10.1
Cabal-Version: 		>= 1.2.3

Hs-Source-Dirs: src
Exposed-Modules:        HSX.XMLGenerator, HSX.Transform

GHC-Options:            -Wall
Extensions:             MultiParamTypeClasses,
                        FunctionalDependencies,
                        OverlappingInstances,
                        UndecidableInstances,
                        FlexibleInstances,
                        GeneralizedNewtypeDeriving,
                        TypeFamilies,
                        TypeSynonymInstances,
                        FlexibleContexts,
                        TypeOperators,
                        CPP

Executable:             trhsx
Main-Is:                Trhsx.hs
Hs-Source-Dirs:         src
