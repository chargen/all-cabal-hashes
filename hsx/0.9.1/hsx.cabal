-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:31106461bc0978d774bed5dc648fba4a
    SHA1:3b5c1b78b6a2ec1a2745bb4c92317ed9a58668e2
    SHA256:32cdaa42064c264111e91180dc1f5853023ff01534d23ed1fb29face5acedc10
    SHA512:47a7680a1b469362a62d63d684092424ab115630c22cfe9d3e176d7f31f42103db92ee4ec50b7246b0de84c3777161fc826fedbabde0aba01c3436086436ab31
    Skein512_512:7420d4427845954490ae1f36195ae1200971bd819ddb3b47cdfe32e84df6b1e43dff5445e41c5db14b67dffd8c238dc3eeef011d0231c5e6766f565dd1ff8f8d

x-package-locations:
    https://hackage.haskell.org/package/hsx-0.9.1/hsx-0.9.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/hsx-0.9.1.tar.gz

x-package-size: 25840
-- END Added by all-cabal-hashes-tool

Name:                   hsx
Version:                0.9.1
License:                BSD3
License-File:           LICENSE
Author:                 Niklas Broberg, Joel Bjornson
Maintainer:             Niklas Broberg <niklas.broberg@chalmers.se>

Stability:              Experimental
Category:               Language
Synopsis:               HSX (Haskell Source with XML) allows literal XML syntax to be used in Haskell source code.
Description:            HSX (Haskell Source with XML) allows literal XML syntax to be used in Haskell source code.
                        
                        The trhsx preprocessor translates .hsx source files into ordinary .hs files. Literal
                        XML syntax is translated into function calls for creating XML values of the appropriate
                        forms.
                        
                        trhsx transforms literal XML syntax into a series of function calls. Any project
                        can make use of the syntax by providing definitions for those functions, and the
                        XML values produced will be of the types specified. This works for any types, since
                        trhsx doesn't make any assumptions, or inserts any information depending on types.
                        
                        XMLGenerator defines a few typeclasses that together cover the functions injected by the
                        preprocessor. A project that uses these classes to provide the semantics for the injected
                        syntax will be able to use any functions written in terms of these, allowing better code 
                        reusability than if each project defines its own semantics for the XML syntax. Also, the classes
                        makes it possible to use the literal syntax at different types within the same module.
                        Achieving that is not as simple as it may seem, but the XMLGenerator module provides all the
                        necessary machinery.
                        
Homepage:               http://code.haskell.com/HSP

Tested-With:            GHC==6.8.3, GHC==6.10.1
Cabal-Version: 		>= 1.2.3
Build-Type:             Simple

Flag base4

Library
  Build-depends:	mtl, haskell-src-exts >= 1.11, utf8-string
  if flag(base4)
    Build-depends:      base >= 4 && < 5
    cpp-options:        -DBASE4
  else
    Build-depends:      base >= 3 && < 4
  Hs-Source-Dirs: 	src
  Exposed-Modules:      HSX.XMLGenerator, HSX.Transform

  Extensions:           MultiParamTypeClasses,
                        FunctionalDependencies,
                        OverlappingInstances,
                        UndecidableInstances,
                        FlexibleInstances,
                        GeneralizedNewtypeDeriving,
                        TypeFamilies,
                        TypeSynonymInstances,
                        FlexibleContexts,
                        TypeOperators,
                        CPP

Executable trhsx
  Main-Is:                Trhsx.hs
  Hs-Source-Dirs:         src
