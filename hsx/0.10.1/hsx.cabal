-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:32369222720de94fd811343426c34ce2
    SHA1:a8e271b66141749268fc5cb991cae5f87cc52d85
    SHA256:f40bdbcdcda24a7e8bfe8e0cea7ebc9935878af224fd7138b3e793a778e112b9
    SHA512:e8c69b2ab6c8d730fb3ca79ca6543210446c75ab55299440c673e11dd4604d73b47a93990573a6123f1abdf6eaa32ffb97e7483ccdc0fa4054d6797dac802871
    Skein512_512:c25785b37be4b565687474aa815d3fdb0240817921fffbdfd38d77d62d9187d27d0ca4d74122b02d6eda1cef79e69c4a57eb100a940dd123136929c4e1c24dc7

package-locations:
    https://hackage.haskell.org/package/hsx-0.10.1/hsx-0.10.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/hsx-0.10.1.tar.gz

package-size: 26028
-- END Added by all-cabal-hashes-tool

Name:                   hsx
Version:                0.10.1
License:                BSD3
License-File:           LICENSE
Author:                 Niklas Broberg, Joel Bjornson
Maintainer:             Niklas Broberg <niklas.broberg@gmail.com>

Stability:              Experimental
Category:               Language
Synopsis:               HSX (Haskell Source with XML) allows literal XML syntax in Haskell source code.
Description:            HSX (Haskell Source with XML) allows literal XML syntax in Haskell source code.
                        
                        The trhsx preprocessor translates .hsx source files into ordinary .hs files. Literal
                        XML syntax is translated into function calls for creating XML values of the appropriate
                        forms.
                        
                        trhsx transforms literal XML syntax into a series of function calls. Any project
                        can make use of the syntax by providing definitions for those functions, and the
                        XML values produced will be of the types specified. This works for any types, since
                        trhsx doesn't make any assumptions, or inserts any information depending on types.
                        
                        XMLGenerator defines a few typeclasses that together cover the functions injected by the
                        preprocessor. A project that uses these classes to provide the semantics for the injected
                        syntax will be able to use any functions written in terms of these, allowing better code 
                        reusability than if each project defines its own semantics for the XML syntax. Also, the classes
                        makes it possible to use the literal syntax at different types within the same module.
                        Achieving that is not as simple as it may seem, but the XMLGenerator module provides all the
                        necessary machinery.
                        
Homepage:               http://patch-tag.com/r/nibro/hsx

Tested-With:            GHC==6.8.3, GHC==6.10.1
Cabal-Version: 		>= 1.6
Build-Type:             Simple

source-repository head
    type:     darcs
    location: http://patch-tag.com/r/nibro/hsx


Flag base4

Library
  Build-depends:	mtl, haskell-src-exts >= 1.11, utf8-string
  if flag(base4)
    Build-depends:      base >= 4 && < 5
    cpp-options:        -DBASE4
  else
    Build-depends:      base >= 3 && < 4
  Hs-Source-Dirs: 	src
  Exposed-Modules:      HSX.XMLGenerator, HSX.Transform

  Extensions:           MultiParamTypeClasses,
                        FunctionalDependencies,
                        OverlappingInstances,
                        UndecidableInstances,
                        FlexibleInstances,
                        GeneralizedNewtypeDeriving,
                        TypeFamilies,
                        TypeSynonymInstances,
                        FlexibleContexts,
                        TypeOperators,
                        CPP

Executable trhsx
  Main-Is:                Trhsx.hs
  Hs-Source-Dirs:         src
