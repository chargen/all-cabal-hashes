-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:f11a3fabfcd2cb86113fbeceb0cd39ba
    SHA1:3871d5fe24457d1abc29d405ec3a7019c1fea1a7
    SHA256:e9aab0a2a91e8a8d4140af7a6ef43e289f8fec2a8923a1642354ddaedbb92346
    SHA512:dedf50fbd0334cff7c160b994f2085ec422cd60570e64a7b127518942dd80b96590c9ba65254507b82017aa10acc51864cd262b292b89b8b77c550b2288b7cb3
    Skein512_512:0fc7ede42dd77014d2f5317ec33090651b5e040cfba9bc02fce29852810c0c3332dc35c5192b569785056383a62c31dbe8886bc883b5c69e5f06c5511ba245db

x-package-locations:
    https://hackage.haskell.org/package/hsx-0.4.5/hsx-0.4.5.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/hsx-0.4.5.tar.gz

x-package-size: 24772
-- END Added by all-cabal-hashes-tool

Name:                   hsx
Version:                0.4.5
License:                BSD3
License-File:           LICENSE
Author:                 Niklas Broberg, Joel Bj√∂rnson
Maintainer:             Niklas Broberg <nibro@cs.chalmers.se>

Stability:              Experimental
Category:               Language
Synopsis:               HSX (Haskell Source with XML) allows literal XML syntax to be used in Haskell source code.
Description:            HSX (Haskell Source with XML) allows literal XML syntax to be used in Haskell source code.
                        
                        The trhsx preprocessor translates .hsx source files into ordinary .hs files. Literal
                        XML syntax is translated into function calls for creating XML values of the appropriate
                        forms.
                        
                        trhsx transforms literal XML syntax into a series of function calls. Any project
                        can make use of the syntax by providing definitions for those functions, and the
                        XML values produced will be of the types specified. This works for any types, since
                        trhsx doesn't make any assumptions, or inserts any information depending on types.
                        
                        XMLGenerator defines a few typeclasses that together cover the functions injected by the
                        preprocessor. A project that uses these classes to provide the semantics for the injected
                        syntax will be able to use any functions written in terms of these, allowing better code 
                        reusability than if each project defines its own semantics for the XML syntax. Also, the classes
                        makes it possible to use the literal syntax at different types within the same module.
                        Achieving that is not as simple as it may seem, but the XMLGenerator module provides all the
                        necessary machinery.
                        
Homepage:               http://code.google.com/hsp

Build-Depends:          base>3, mtl, haskell-src-exts>=0.3.2, utf8-string
Build-Type:             Simple
Tested-With:            GHC==6.8.3

Hs-Source-Dirs: src
Exposed-Modules:        HSX.XMLGenerator, HSX.Transform

GHC-Options:            -Wall
Extensions:             MultiParamTypeClasses,
                        FunctionalDependencies,
                        OverlappingInstances,
                        UndecidableInstances,
                        FlexibleInstances,
                        GeneralizedNewtypeDeriving,
                        TypeFamilies,
                        TypeSynonymInstances,
                        FlexibleContexts,
                        TypeOperators,
                        CPP

Executable:             trhsx
Main-Is:                Trhsx.hs
Hs-Source-Dirs:         src
