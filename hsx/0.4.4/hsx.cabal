-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:ab8496fc93bbd4357c8865e263d56c59
    SHA1:964b1b2b35615a80472e2170a067c417efc57673
    SHA256:f0e023f878f4c96d1cd1e4969b27d237be31014c08c7a87bd0bf6e94030427f3
    SHA512:4e2feb423a1f595150053a49c98c4ae9f2f3dfe16a55c3bd3011007c20237fa85807113b88b7e6358f836a147543d8d64f85d9ec247d78e3221ed1beaab62c89
    Skein512_512:160ecdcd2e6ee1fd32720c30b5c00c94d5cd2c08c69235767f2b34a7c1e785cd168645967ccd829e1fe3ff395ff61303e1a8a62a9b693501ef1904bb7aa8cc15

package-locations:
    https://hackage.haskell.org/package/hsx-0.4.4/hsx-0.4.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/hsx-0.4.4.tar.gz

package-size: 24669
-- END Added by all-cabal-hashes-tool

Name:                   hsx
Version:                0.4.4
License:                BSD3
License-File:           LICENSE
Author:                 Niklas Broberg, Joel Bjornson
Maintainer:             Niklas Broberg <nibro@cs.chalmers.se>

Stability:              Experimental
Category:               Language
Synopsis:               HSX (Haskell Source with XML) allows literal XML syntax to be used in Haskell source code.
Description:            HSX (Haskell Source with XML) allows literal XML syntax to be used in Haskell source code.
                        
                        The trhsx preprocessor translates .hsx source files into ordinary .hs files. Literal
                        XML syntax is translated into function calls for creating XML values of the appropriate
                        forms.
                        
                        trhsx transforms literal XML syntax into a series of function calls. Any project
                        can make use of the syntax by providing definitions for those functions, and the
                        XML values produced will be of the types specified. This works for any types, since
                        trhsx doesn't make any assumptions, or inserts any information depending on types.
                        
                        XMLGenerator defines a few typeclasses that together cover the functions injected by the
                        preprocessor. A project that uses these classes to provide the semantics for the injected
                        syntax will be able to use any functions written in terms of these, allowing better code 
                        reusability than if each project defines its own semantics for the XML syntax. Also, the classes
                        makes it possible to use the literal syntax at different types within the same module.
                        Achieving that is not as simple as it may seem, but the XMLGenerator module provides all the
                        necessary machinery.
                        
Homepage:               http://code.google.com/hsp

Build-Depends:          base>3, mtl, haskell-src-exts>=0.3.2
Build-Type:             Simple
Tested-With:            GHC==6.8.3

Hs-Source-Dirs: src
Exposed-Modules:        HSX.XMLGenerator, HSX.Transform

GHC-Options:            -Wall
Extensions:             MultiParamTypeClasses,
                        FunctionalDependencies,
                        OverlappingInstances,
                        UndecidableInstances,
                        FlexibleInstances,
                        GeneralizedNewtypeDeriving,
                        TypeFamilies,
                        TypeSynonymInstances,
                        FlexibleContexts,
                        TypeOperators

Executable:             trhsx
Main-Is:                Trhsx.hs
Hs-Source-Dirs:         src
