-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:25369b96974bbc55a76342ec90e40a6b
    SHA1:21d9374a1e9ab4f930e033d4c89f646065f0698f
    SHA256:48c0e8b5496df39718c951cd2f205d490eb2ac1a71419b2f30b984c9d5f01d0d
    SHA512:2a1ae26adf7c659bcc42c8a56345b76bfc878fe4a87c912eee6bcbea3980a33dd6ed1dfe96741d77e29ac9f81a8b213ecdbfc8674d9b4213b46fcfa245d8d6c7
    Skein512_512:c6779156cdac0640a5349556167e70a09ca4c0be4848ca6e078481c2e9c2aae1ab26bba1dddc5f9814a6e6e1c26c6873eec242a2581cf4860f929b8309764b3a

x-package-locations:
    https://hackage.haskell.org/package/hsx-0.10.2/hsx-0.10.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/hsx-0.10.2.tar.gz

x-package-size: 26038
-- END Added by all-cabal-hashes-tool

Name:                   hsx
Version:                0.10.2
License:                BSD3
License-File:           LICENSE
Author:                 Niklas Broberg, Joel Bjornson
Maintainer:             Niklas Broberg <niklas.broberg@gmail.com>

Stability:              Experimental
Category:               Language
Synopsis:               HSX (Haskell Source with XML) allows literal XML syntax in Haskell source code.
Description:            HSX (Haskell Source with XML) allows literal XML syntax in Haskell source code.
                        
                        The trhsx preprocessor translates .hsx source files into ordinary .hs files. Literal
                        XML syntax is translated into function calls for creating XML values of the appropriate
                        forms.
                        
                        trhsx transforms literal XML syntax into a series of function calls. Any project
                        can make use of the syntax by providing definitions for those functions, and the
                        XML values produced will be of the types specified. This works for any types, since
                        trhsx doesn't make any assumptions, or inserts any information depending on types.
                        
                        XMLGenerator defines a few typeclasses that together cover the functions injected by the
                        preprocessor. A project that uses these classes to provide the semantics for the injected
                        syntax will be able to use any functions written in terms of these, allowing better code 
                        reusability than if each project defines its own semantics for the XML syntax. Also, the classes
                        makes it possible to use the literal syntax at different types within the same module.
                        Achieving that is not as simple as it may seem, but the XMLGenerator module provides all the
                        necessary machinery.
                        
Homepage:               http://patch-tag.com/r/nibro/hsx

Tested-With:            GHC==6.8.3, GHC==6.10.1
Cabal-Version: 		>= 1.6
Build-Type:             Simple

source-repository head
    type:     darcs
    location: http://patch-tag.com/r/nibro/hsx


Flag base4

Library
  Build-depends:	mtl, haskell-src-exts >= 1.13, utf8-string
  if flag(base4)
    Build-depends:      base >= 4 && < 5
    cpp-options:        -DBASE4
  else
    Build-depends:      base >= 3 && < 4
  Hs-Source-Dirs: 	src
  Exposed-Modules:      HSX.XMLGenerator, HSX.Transform

  Extensions:           MultiParamTypeClasses,
                        FunctionalDependencies,
                        OverlappingInstances,
                        UndecidableInstances,
                        FlexibleInstances,
                        GeneralizedNewtypeDeriving,
                        TypeFamilies,
                        TypeSynonymInstances,
                        FlexibleContexts,
                        TypeOperators,
                        CPP

Executable trhsx
  Main-Is:                Trhsx.hs
  Hs-Source-Dirs:         src
