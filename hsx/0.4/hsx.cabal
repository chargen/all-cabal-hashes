-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:82936cc5f72fdcda7f7aed7123794205
    SHA1:a0ec236ec4eef1c652f19819227ee2c46ae29b21
    SHA256:98663c2762d7b1dbfe69937c72be1601e1ed8caa3afb82e013013ca6d8a2f48d
    SHA512:5d86ca2893114d61361108aae0280a63839cb3e40529bf24c5773e3835748483387239c9ee42f1d39f65948ec46d017bdd6ac69f02a5df3823f608808f77b96c
    Skein512_512:feb3d3e76267d3a7da109f6ce6a8f7756d79ab7936af12c71b53445c54e328f3f9c47dc17bc8cc45061564b7a8533fa06ed7e5d88dfbe97fdbf806323fedb83d

x-package-locations:
    https://hackage.haskell.org/package/hsx-0.4/hsx-0.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/hsx-0.4.tar.gz

x-package-size: 3851
-- END Added by all-cabal-hashes-tool

Name:                   hsx
Version:                0.4
License:                BSD3
License-File:           LICENSE
Author:                 Niklas Broberg, Joel Bj√∂rnson
Maintainer:             Niklas Broberg <nibro@cs.chalmers.se>

Stability:              Experimental
Category:               Language
Synopsis:               HSX (Haskell Source with XML) allows literal XML syntax to be used in Haskell source code.
Description:            HSX (Haskell Source with XML) allows literal XML syntax to be used in Haskell source code.
			
			The trhsx preprocessor translates .hsx source files into ordinary .hs files. Literal
			XML syntax is translated into function calls for creating XML values of the appropriate
			forms.
			
			trhsx transforms literal XML syntax into a series of function calls. Any project
			can make use of the syntax by providing definitions for those functions, and the
			XML values produced will be of the types specified. This works for any types, since
			trhsx doesn't make any assumptions, or inserts any information depending on types.
			
			XMLGenerator defines a few typeclasses that together cover the functions injected by the
			preprocessor. A project that uses these classes to provide the semantics for the injected
			syntax will be able to use any functions written in terms of these, allowing better code 
			reusability than if each project defines its own semantics for the XML syntax. Also, the classes
			makes it possible to use the literal syntax at different types within the same module.
			Achieving that is not as simple as it may seem, but the XMLGenerator module provides all the
			necessary machinery.
			
Homepage:               http://code.google.com/hsp

Build-Depends:          base>3, mtl, haskell-src-exts>=0.3.2
Build-Type:             Simple
Tested-With:            GHC==6.8.3

Exposed-Modules:        HSX.XMLGenerator

GHC-Options:            -Wall
Extensions:             MultiParamTypeClasses,
                        FunctionalDependencies,
                        OverlappingInstances,
                        UndecidableInstances,
                        FlexibleInstances,
                        GeneralizedNewtypeDeriving,
                        TypeFamilies,
                        TypeSynonymInstances,
                        FlexibleContexts

Executable:             trhsx
Main-Is:                Trhsx.hs