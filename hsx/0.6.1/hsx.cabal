-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:e31dec6cdc587f6fe0e3f5117b418ac1
    SHA1:c4e99323583bd387b28747e1ed798b3920b2ec68
    SHA256:718b967f6eaec551df1481d8064f1c0697a2a9124213f11e331563d41d379a21
    SHA512:2903781afc9fac009cfafd44a23522152d183e9dadc743cc9eb60478bb6f0e7eeb8a79b1c7fcd3469ba935293e2cc5a06012faea01c3f479ffcec0503eb20a6c
    Skein512_512:2161e87bb0c842c63bb9a68bf8a13da9d098cc8799927ff82c2c6d7f5a5d4d54cbdbb09a653404f92a98ecb4c841d3d460e5b6fab5b9717f7103ccbf05bf8f8c

package-locations:
    https://hackage.haskell.org/package/hsx-0.6.1/hsx-0.6.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/hsx-0.6.1.tar.gz

package-size: 25570
-- END Added by all-cabal-hashes-tool

Name:                   hsx
Version:                0.6.1
License:                BSD3
License-File:           LICENSE
Author:                 Niklas Broberg, Joel Bj√∂rnson
Maintainer:             Niklas Broberg <nibro@cs.chalmers.se>

Stability:              Experimental
Category:               Language
Synopsis:               HSX (Haskell Source with XML) allows literal XML syntax to be used in Haskell source code.
Description:            HSX (Haskell Source with XML) allows literal XML syntax to be used in Haskell source code.
                        
                        The trhsx preprocessor translates .hsx source files into ordinary .hs files. Literal
                        XML syntax is translated into function calls for creating XML values of the appropriate
                        forms.
                        
                        trhsx transforms literal XML syntax into a series of function calls. Any project
                        can make use of the syntax by providing definitions for those functions, and the
                        XML values produced will be of the types specified. This works for any types, since
                        trhsx doesn't make any assumptions, or inserts any information depending on types.
                        
                        XMLGenerator defines a few typeclasses that together cover the functions injected by the
                        preprocessor. A project that uses these classes to provide the semantics for the injected
                        syntax will be able to use any functions written in terms of these, allowing better code 
                        reusability than if each project defines its own semantics for the XML syntax. Also, the classes
                        makes it possible to use the literal syntax at different types within the same module.
                        Achieving that is not as simple as it may seem, but the XMLGenerator module provides all the
                        necessary machinery.
                        
Homepage:               http://code.google.com/hsp

Build-Depends:          base>3 && <5, mtl, haskell-src-exts >= 1.5, utf8-string
Build-Type:             Simple
Tested-With:            GHC==6.8.3, GHC==6.10.1
Cabal-Version: 		>= 1.2.3

Hs-Source-Dirs: src
Exposed-Modules:        HSX.XMLGenerator, HSX.Transform

Extensions:             MultiParamTypeClasses,
                        FunctionalDependencies,
                        OverlappingInstances,
                        UndecidableInstances,
                        FlexibleInstances,
                        GeneralizedNewtypeDeriving,
                        TypeFamilies,
                        TypeSynonymInstances,
                        FlexibleContexts,
                        TypeOperators,
                        CPP

Executable:             trhsx
Main-Is:                Trhsx.hs
Hs-Source-Dirs:         src
