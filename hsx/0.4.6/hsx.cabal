-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:60eb236d01ee6ad11c6312fd86917a82
    SHA1:ea2f9fba9eb4fafcb4cdabff09d41c77e37f0a60
    SHA256:fd3271e175597db6279bbe4786d8a65056957c167f3b3be838c112c38d2b3d6d
    SHA512:1da008debc7123d62b63ca2fae8b23f56f7b7e6912a83c80bd6d9f56a2478f5c22750e86db7dce34055fd475dbd7b52c0efcde6ce32df37586a618624d331604
    Skein512_512:9294843f55ee3a7803ce601e881114558b8ef8d62f492cdb0ce18325e5f71ed2272f8fdddd890b0ee428da881feb1ff538120b769d21d6ff6ef6fae49c29438d

x-package-locations:
    https://hackage.haskell.org/package/hsx-0.4.6/hsx-0.4.6.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/hsx-0.4.6.tar.gz

x-package-size: 24478
-- END Added by all-cabal-hashes-tool

Name:                   hsx
Version:                0.4.6
License:                BSD3
License-File:           LICENSE
Author:                 Niklas Broberg, Joel Bj√∂rnson
Maintainer:             Niklas Broberg <nibro@cs.chalmers.se>

Stability:              Experimental
Category:               Language
Synopsis:               HSX (Haskell Source with XML) allows literal XML syntax to be used in Haskell source code.
Description:            HSX (Haskell Source with XML) allows literal XML syntax to be used in Haskell source code.
                        
                        The trhsx preprocessor translates .hsx source files into ordinary .hs files. Literal
                        XML syntax is translated into function calls for creating XML values of the appropriate
                        forms.
                        
                        trhsx transforms literal XML syntax into a series of function calls. Any project
                        can make use of the syntax by providing definitions for those functions, and the
                        XML values produced will be of the types specified. This works for any types, since
                        trhsx doesn't make any assumptions, or inserts any information depending on types.
                        
                        XMLGenerator defines a few typeclasses that together cover the functions injected by the
                        preprocessor. A project that uses these classes to provide the semantics for the injected
                        syntax will be able to use any functions written in terms of these, allowing better code 
                        reusability than if each project defines its own semantics for the XML syntax. Also, the classes
                        makes it possible to use the literal syntax at different types within the same module.
                        Achieving that is not as simple as it may seem, but the XMLGenerator module provides all the
                        necessary machinery.
                        
Homepage:               http://code.google.com/hsp

Build-Depends:          base>3, mtl, haskell-src-exts==0.4.*, utf8-string
Build-Type:             Simple
Tested-With:            GHC==6.8.3

Hs-Source-Dirs: src
Exposed-Modules:        HSX.XMLGenerator, HSX.Transform

GHC-Options:            -Wall
Extensions:             MultiParamTypeClasses,
                        FunctionalDependencies,
                        OverlappingInstances,
                        UndecidableInstances,
                        FlexibleInstances,
                        GeneralizedNewtypeDeriving,
                        TypeFamilies,
                        TypeSynonymInstances,
                        FlexibleContexts,
                        TypeOperators,
                        CPP

Executable:             trhsx
Main-Is:                Trhsx.hs
Hs-Source-Dirs:         src
