name:                priority-sync
version:             0.1.0.1
license:             BSD3
license-file:        LICENSE
author:              Christopher Lane Hinson
maintainer:          Christopher Lane Hinson <lane@downstairspeople.org>
stability:           Unstable

category:            Concurrency
synopsis:            Cooperative task prioritization.
description:         In a simple use case, we want to run some expensive tasks in prioritized order, so that only one task is running on each
                     CPU (or hardware thread) at any time.   For this simple case, four operations are needed: 'simpleTaskPool', 
                     'schedule', 'claim', and 'startQueue'.
                     .
                     @
                     let expensiveTask = threadDelay 1000000
                     pool <- simpleTaskPool
                     forkIO $ claim Acquire (schedule pool 1) $ putStrLn \"Task 1 started . . .\" >> expensiveTask >> putStrLn \"Task 1 completed.\"
                     forkIO $ claim Acquire (schedule pool 3) $ putStrLn \"Task 3 started . . .\" >> expensiveTask >> putStrLn \"Task 3 completed.\"
                     forkIO $ claim Acquire (schedule pool 2) $ putStrLn \"Task 2 started . . .\" >> expensiveTask >> putStrLn \"Task 2 completed.\"
                     threadDelay 100000  -- contrive to wait for all tasks to become enqueued
                     putStrLn \"Starting pool: \"
                     startQueue pool
                     threadDelay 4000000 -- contrive to wait for all tasks to become dequeued
                     @
                     .
                     A 'TaskPool' combines 'Room's and 'Queue's in an efficient easy-to-use-interface.
                     .
                     'Room's provide fully reentrant synchronization to any number of threads based on arbitrary resource constraints.
                     For example, the 'Room' from a 'simpleTaskPool' is constrained by 'GHC.numCapabilities'.
                     .
                     'Queue's provide task prioritization.  A 'Queue' systematically examines (to a configurable depth) all waiting threads with their
                     priorities and resource constraints and wakes the most eagerly prioritized thread whose constraints can be satisfied.
                     .
                     'TaskPool's are not thread pools.  The concept is similar to IO Completion Ports.  There are no worker threads.  If a number of threads are waiting,
                     the thread that is most likely to be processed next is woken and temporarily serves as a working thread.  
                     .
                     'Room's, 'Queue's, and 'TaskPool's are backed by carefully written STM (software transactional memory) transactions.
                     .
                     A salient feature is that, because any thread can participate, a 'TaskPool' supports both bound threads and threads created with 'forkOnIO'.
                     .
                     The git repository is available at <http://www.downstairspeople.org/git/priority-sync.git>.

cabal-version:       >= 1.2
build-type:          Simple
tested-with:         GHC==6.10.1

Library
  exposed-modules:     Control.Concurrent.Priority.Room,
                       Control.Concurrent.Priority.Queue, 
                       Control.Concurrent.Priority.RoomConstraint,
                       Control.Concurrent.Priority.Schedule, 
                       Control.Concurrent.Priority.TaskPool
  other-modules:       Control.Concurrent.Priority.RoomCore
  ghc-options:         -Wall -fno-warn-type-defaults
  ghc-prof-options:    -prof -auto-all
  build-depends:       base>3, containers >= 0.1.0.1, heap, parallel >= 1.0.0.0, stm >= 2.1.1.2, random

Executable _Control_Concurrent_Priority_Tests
  Main-Is:             Tests.hs
  ghc-options:         -Wall -threaded -fno-warn-type-defaults
  ghc-prof-options:    -prof -auto-all
  build-depends:       base>3


package-hashes:
    MD5:9dfa1f9d452b4cb59d6303d5fdf5956e
    SHA1:f76e3361d506f3e1199a2dea48aec3a757e8118d
    SHA256:839e46ec317445be6e5cd6dd11be18e4379edef23645a9cbb6b0b4788ef29418
    SHA512:2abe415d601b177d731a617927a6be3278426d9e4a93931e3107d924dfbba7d07f739d357ff82e6c0d9264b07e45641dc2ae3a5173f09fedd4416e8f6375bb9f
    Skein512_512:efd801166ccb3d830b379f06acbebd4e7958cda1ec27f60b7c541837f9e23af4c1f5f92c2431103cf61a4442fca956766c47c7b579e40b5e16a43adb3d469b00

package-locations:
    https://hackage.haskell.org/package/priority-sync-0.1.0.1/priority-sync-0.1.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/priority-sync-0.1.0.1.tar.gz

package-size: 12768
