-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:e5da4fa74a56ba55632d7a8e5fa18531
    SHA1:b8fda1c8eb41a8be0efacc1cb700143923aff431
    SHA256:2b5445f19ff97e93f0f63027da2a4b76009fc7d5370ccbceeaf97fde03ada7dc
    SHA512:64890b786e90270db338615089b09bd058c4e41194db8f9cfff9a0de275b70c393e9d0fcbf239803f7ae5679db51b55fdf791f2d35611129ac06b9bc297d8344
    Skein512_512:dcc12515935fb95778d25386a895e66506e3c7873ed5eb7bb5c5edaea1845b672ba6d922818ec7826198f61c2a86891806f1e6d2c2e8a4b0048537e088a576a7

package-locations:
    https://hackage.haskell.org/package/sbv-0.9.7/sbv-0.9.7.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/sbv-0.9.7.tar.gz

package-size: 226608
-- END Added by all-cabal-hashes-tool

Name:          sbv
Version:       0.9.7
Category:      Formal Methods, Theorem Provers, Bit vectors, Symbolic Computation, Math
Synopsis:      Symbolic Bit Vectors: Prove bit-precise program properties using SMT solvers.
Description:   Express properties about bit-precise Haskell programs and automatically prove
               them using SMT solvers. The SBV library adds support for symbolic bit vectors,
               allowing formal models of bit-precise programs to be created.
               .
               >   $ ghci -XScopedTypeVariables
               >   Prelude> :m Data.SBV
               >   Prelude Data.SBV> prove $ \(x::SWord8) -> x `shiftL` 2 .== 4*x
               >   Q.E.D.
               >   Prelude Data.SBV> prove $ forAll ["x"] $ \(x::SWord8) -> x `shiftL` 2 .== x
               >   Falsifiable. Counter-example:
               >     x = 128 :: SWord8
               .
               The library introduces the following types and concepts:
               .
                 * 'SBool': Symbolic Booleans (bits)
               .
                 * 'SWord8', 'SWord16', 'SWord32', 'SWord64': Symbolic Words (unsigned)
               .
                 * 'SInt8',  'SInt16',  'SInt32',  'SInt64': Symbolic Ints (signed)
               .
                 * 'SArray', 'SFunArray': Flat arrays of symbolic values
               .
                 * Symbolic polynomials over GF(2^n), and polynomial arithmetic
               .
                 * Uninterpreted constants and functions over symbolic values
               .
               Predicates (i.e., functions that return 'SBool') built out of
               these types can be:
               .
                 * proven correct via an external SMT solver (the 'prove' function)
               .
                 * checked for satisfiability (the 'sat' and 'allSat' functions)
               .
                 * quick-checked
               .
               In addition to the library, the installation will create the
               executable @SBVUnitTests@. You should run it once the installation is complete,
               to make sure the unit tests are run and all is well.
               .
               SBV is hosted at GitHub: <http://github.com/LeventErkok/sbv>. Comments,
               bug reports, and patches are always welcome.

Copyright:     Levent Erkok, 2011
License:       BSD3
License-file:  LICENSE
Stability:     Experimental
Author:        Levent Erkok
Homepage:      http://github.com/LeventErkok/sbv
Maintainer:    Levent Erkok (erkokl@gmail.com)
Build-Type:    Custom
Cabal-Version: >= 1.6
Data-Files: SBVUnitTest/GoldFiles/*.gold
Extra-Source-Files: INSTALL, README, COPYRIGHT

Flag test
  Description: Run the unit-test suite after build
  Default    : False

Library
  ghc-options     : -Wall
  ghc-prof-options: -auto-all -caf-all
  Build-Depends   : base                >= 3 && < 5
                  , deepseq             >= 1.1.0.2
                  , process             >= 1.0.1.3
                  , containers          >= 0.3.0.0
                  , QuickCheck          >= 2.4.0.1
                  , strict-concurrency  >= 0.2.4.1
                  , old-time            >= 1.0.0.5
                  , mtl                 >= 2.0.1.0
                  , array               >= 0.3.0.1
                  , HUnit               >= 1.2.2.3
                  , directory           >= 1.0.1.1
                  , filepath            >= 1.1.0.4
  Exposed-modules : Data.SBV
                  , Data.SBV.Internals
                  , Data.SBV.Examples.BitPrecise.BitTricks
                  , Data.SBV.Examples.BitPrecise.Legato
                  , Data.SBV.Examples.Polynomials.Polynomials
                  , Data.SBV.Examples.Puzzles.DogCatMouse
                  , Data.SBV.Examples.Puzzles.MagicSquare
                  , Data.SBV.Examples.Puzzles.NQueens
                  , Data.SBV.Examples.Puzzles.Sudoku
                  , Data.SBV.Examples.Puzzles.U2Bridge
                  , Data.SBV.Examples.Uninterpreted.AUF
                  , Data.SBV.Examples.Uninterpreted.Function
  Other-modules   : Data.SBV.BitVectors.Data
                  , Data.SBV.BitVectors.Bit
                  , Data.SBV.BitVectors.Model
                  , Data.SBV.BitVectors.Splittable
                  , Data.SBV.BitVectors.Polynomial
                  , Data.SBV.BitVectors.PrettyNum
                  , Data.SBV.SMT.SMT
                  , Data.SBV.SMT.SMTLib
                  , Data.SBV.Provers.Prover
                  , Data.SBV.Provers.SExpr
                  , Data.SBV.Provers.Yices
                  , Data.SBV.Utils.Boolean
                  , Data.SBV.Utils.TDiff
                  , Data.SBV.Utils.SBVTest
                  , Data.SBV.Examples.Arrays.Memory
                  , Data.SBV.Examples.Basics.BasicTests
                  , Data.SBV.Examples.Basics.Higher
                  , Data.SBV.Examples.Basics.Index
                  , Data.SBV.Examples.Basics.ProofTests
                  , Data.SBV.Examples.Basics.QRem
                  , Data.SBV.Examples.Basics.UnsafeFunctionEquality
                  , Data.SBV.Examples.CRC.CCITT
                  , Data.SBV.Examples.CRC.CCITT_Unidir
                  , Data.SBV.Examples.CRC.GenPoly
                  , Data.SBV.Examples.CRC.Parity
                  , Data.SBV.Examples.CRC.USB5
                  , Data.SBV.Examples.PrefixSum.PrefixSum
                  , Data.SBV.Examples.Puzzles.PowerSet
                  , Data.SBV.Examples.Puzzles.Temperature
                  , Data.SBV.Examples.Uninterpreted.Uninterpreted
                  , Data.SBV.TestSuite.Arrays.Memory
                  , Data.SBV.TestSuite.Basics.BasicTests
                  , Data.SBV.TestSuite.Basics.Higher
                  , Data.SBV.TestSuite.Basics.Index
                  , Data.SBV.TestSuite.Basics.ProofTests
                  , Data.SBV.TestSuite.Basics.QRem
                  , Data.SBV.TestSuite.Basics.UnsafeFunctionEquality
                  , Data.SBV.TestSuite.BitPrecise.BitTricks
                  , Data.SBV.TestSuite.BitPrecise.Legato
                  , Data.SBV.TestSuite.CRC.CCITT
                  , Data.SBV.TestSuite.CRC.CCITT_Unidir
                  , Data.SBV.TestSuite.CRC.GenPoly
                  , Data.SBV.TestSuite.CRC.Parity
                  , Data.SBV.TestSuite.CRC.USB5
                  , Data.SBV.TestSuite.PrefixSum.PrefixSum
                  , Data.SBV.TestSuite.Polynomials.Polynomials
                  , Data.SBV.TestSuite.Puzzles.DogCatMouse
                  , Data.SBV.TestSuite.Puzzles.MagicSquare
                  , Data.SBV.TestSuite.Puzzles.NQueens
                  , Data.SBV.TestSuite.Puzzles.PowerSet
                  , Data.SBV.TestSuite.Puzzles.Sudoku
                  , Data.SBV.TestSuite.Puzzles.U2Bridge
                  , Data.SBV.TestSuite.Puzzles.Temperature
                  , Data.SBV.TestSuite.Uninterpreted.AUF
                  , Data.SBV.TestSuite.Uninterpreted.Uninterpreted
                  , Data.SBV.TestSuite.Uninterpreted.Function

Executable SBVUnitTests
  main-is         : SBVUnitTest/SBVUnitTest.hs
  if flag(test)
    x-run-unittests: True
  else
    x-run-unittests: False
