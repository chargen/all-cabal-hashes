-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:d6be91ed330003d7d76dd50b2d1d6410
    SHA1:d6c21e871b8b540f24a6da319b4995065b5f1050
    SHA256:541966833028f1476c7d89a100f4bced4d80d073c8400dc6564b320321f4624e
    SHA512:34d68c1384937dcd3e949d28d545e30abe2d361e4511cf305a1725e15c1e505713be83c62d6bc422ce521378b3b1d947b84d9172145fa42236fba012ae47e6e5
    Skein512_512:d050fb9d81da49df89edca967ec10c7154395100a6753aca009496ba3abd5f67e8b88693271118566830646efe41f76eb0c04e222c9f2aed6f1813813a4c2818

package-locations:
    https://hackage.haskell.org/package/yarr-1.4.0.1/yarr-1.4.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/yarr-1.4.0.1.tar.gz

package-size: 41221
-- END Added by all-cabal-hashes-tool

Name:                yarr
Version:             1.4.0.1
Synopsis:            Yet another array library
Description:
    Yarr is a new blazing fast dataflow framework (array library),
    mainly intented to process @Storable@s (including all \"primitive\" numeric types)
    and @fixed-vector@s of them, for example coordinates,
    color components, complex numbers.
    .
    Yarr framework is inspired by @repa@ library and inherits its features,
    including shape-polymorphism and auto-parallelism.
    Additionaly, the framework is polymorphic over type and arity
    of fixed-size vectors and supports neat flow operations over them.
    For example, you can convert colored image to greyscale like this:
    .
    > let greyImage = zipElems (\r g b -> 0.21 * r + 0.71 * g + 0.07 * b) image
    .
    In some cases the library is considerably faster than @repa@.
    See benchmark results: <https://github.com/leventov/yarr/blob/master/tests/bench-results.md>
    .
    Shortcoming by design: lack of pure indexing interface.
    .
    To start with, read documentation in the root module: "Data.Yarr".
    .
    [@Yarr!@] 

License:             MIT
License-file:        LICENSE
Author:              Roman Leventov
Maintainer:          Dominic Steinitz <dominic@steinitz.org>
Bug-reports:         https://github.com/leventov/yarr/issues
Category:            Data Structures, Data Flow, Graphics
Build-type:          Simple
Cabal-version:       >= 1.8

tested-with:         GHC == 7.8.3

extra-source-files: changelog.md

source-repository head
    type:     git
    location: https://github.com/leventov/yarr.git
    subdir:   yarr

Library
    build-depends:
        base >=4.6 && <4.8,
        ghc-prim         == 0.3.*,
        deepseq          == 1.3.*,
        fixed-vector     >= 0.8 && < 0.9,
        primitive        == 0.6,
        template-haskell >= 2.8 && < 2.10,
        missing-foreign  == 0.1.1

    extensions:
        TypeFamilies, MultiParamTypeClasses, FunctionalDependencies,
        FlexibleContexts,
        EmptyDataDecls,
        FlexibleInstances, TypeSynonymInstances,
        UndecidableInstances, OverlappingInstances,
        GeneralizedNewtypeDeriving, StandaloneDeriving,
        RankNTypes, ScopedTypeVariables,
        MagicHash, BangPatterns, UnboxedTuples,
        TemplateHaskell, CPP

    exposed-modules:
        Data.Yarr
        Data.Yarr.Base
        Data.Yarr.Fusion
        Data.Yarr.Eval
        Data.Yarr.Flow
        Data.Yarr.Walk
        Data.Yarr.Shape
        Data.Yarr.Repr.Foreign
        Data.Yarr.Repr.Boxed
        Data.Yarr.Repr.Delayed
        Data.Yarr.Repr.Separate
        Data.Yarr.Convolution
        Data.Yarr.IO.List
        Data.Yarr.Utils.FixedVector
        Data.Yarr.Utils.Fork
        Data.Yarr.Utils.Parallel
        Data.Yarr.Utils.Split
        Data.Yarr.Utils.Primitive
        Debug.Yarr

    other-modules:
        -- re-exported in Utils.FixedVector
        Data.Yarr.Utils.FixedVector.Arity
        Data.Yarr.Utils.FixedVector.VecTuple
        Data.Yarr.Utils.FixedVector.VecTupleInstances
        Data.Yarr.Utils.FixedVector.InlinableArity
        Data.Yarr.Utils.FixedVector.InlinableArityInstances

        -- re-exported in Data.Yarr.Convolution
        Data.Yarr.Convolution.Repr
        Data.Yarr.Convolution.Eval
        Data.Yarr.Convolution.StaticStencils

        -- re-exported in Data.Yarr.Shape
        Data.Yarr.WorkTypes

        Data.Yarr.Walk.Internal
        Data.Yarr.Utils.LowLevelFlow
