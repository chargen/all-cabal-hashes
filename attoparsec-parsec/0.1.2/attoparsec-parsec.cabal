-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:6cb5de45d8cb460f426ea2a27c240bb1
    SHA1:ba436bbd0e440f5e02c09e8e39e4143fdf72ba2c
    SHA256:f315c504cf1f66caf93f75b6c0d8ddbcfff26855cd936af5d4a031d69971d74f
    SHA512:9df7b7bd43fda35f06db33fe61f8befb6a84de9bc299f49a278e5c26a89f0366367850e874d4f9b135ffec0f1b592492ca486b69a7a4bebf32ed8da9f6603d52
    Skein512_512:5308b56be96a8b386a8f1f0f292f84a807fb94347a311053ee8feabd0361862a33143eabff11b0f2985699c28865302cbae408405cff76d5afaebd1404e6bd50

x-package-locations:
    https://hackage.haskell.org/package/attoparsec-parsec-0.1.2/attoparsec-parsec-0.1.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/attoparsec-parsec-0.1.2.tar.gz

x-package-size: 5207
-- END Added by all-cabal-hashes-tool

name:             attoparsec-parsec
version:          0.1.2
license:          MIT
license-file:     LICENSE
copyright:        (c) 2011, 2012 Simon Hengel
author:           Simon Hengel <sol@typeful.net>
maintainer:       Simon Hengel <sol@typeful.net>
build-type:       Simple
cabal-version:    >= 1.8
category:         Parsing
synopsis:         An Attoparsec compatibility layer for Parsec
description:      This package provides an implementation of
                  "Data.Attoparsec.Text" in terms of Parsec.
                  It can be used to write parsers that can be compiled against
                  both Attoparsec and Parsec.
                  .
                  Attoparsec is an awesome and very fast library, but it still
                  has a weak point: It does not generate very useful error
                  messages on parse errors.  Compiling an Attoparsec parser
                  against Parsec can be useful for at least two scenarios.
                  .
                  - Parsec can be used while developing Attoparsec parsers, so
                    that you get better error messages on failing test cases.
                  .
                  - You can use Attoparsec for parsing, so that you benefit
                    from it's speed.  And on parse errors you can re-parse the
                    input with Parsec, so that you can display a useful error
                    message to the user.
                  .
                  A simple usage example is here:
                  <https://github.com/sol/attoparsec-parsec#readme>

source-repository head
  type: git
  location: https://github.com/sol/attoparsec-parsec

library
  ghc-options:
      -Wall
  hs-source-dirs:
      src
  build-depends:
      base == 4.*
    , parsec >= 3.1.2
    , text
    , attoparsec >= 0.10.0.0
  exposed-modules:
      Data.Attoparsec.Text.Parsec

test-suite spec
  type:
      exitcode-stdio-1.0
  ghc-options:
      -Wall -Werror
  hs-source-dirs:
      test
  main-is:
      Spec.hs
  build-depends:
      base
    , attoparsec-parsec
    , text
    , hspec >= 1.5
    , QuickCheck

test-suite readme-parsec
  type:
      exitcode-stdio-1.0
  ghc-options:
      -Wall -Werror -pgmL markdown-unlit
  main-is:
      README.lhs
  build-depends:
      base, attoparsec-parsec, text, markdown-unlit

test-suite readme-attoparsec
  type:
      exitcode-stdio-1.0
  ghc-options:
      -Wall -Werror -pgmL markdown-unlit
  cpp-options:
      -DUSE_ATTOPARSEC
  main-is:
      README.lhs
  build-depends:
      base, attoparsec, text, markdown-unlit
