-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:f8a265869da9a2877bd4cc4d940b2fc1
    SHA1:7480582e8274631d4a39d4a08fca3d42daf82c86
    SHA256:fffed22817e4ce5d59ca12bf8561730ac4de961d22b34b0149b68ba2643782e2
    SHA512:886aca0ddd46dea96538ed6509e30cc7d7fb82671127f7cfffa9e2bf31b28e44008b854f6945f110f7902022ef58697206d38c72125a25e727889913c76cb3fd
    Skein512_512:c030aa67acf7fbc52d78537a2f120d1698c729d3c66757a76f21d90992611a705259c752ac7e916579cd6d7d667c55b8aef50c3eb3d34d50715631198daafcb0

package-locations:
    https://hackage.haskell.org/package/attoparsec-parsec-0.0.2/attoparsec-parsec-0.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/attoparsec-parsec-0.0.2.tar.gz

package-size: 5017
-- END Added by all-cabal-hashes-tool

name:             attoparsec-parsec
version:          0.0.2
license:          MIT
license-file:     LICENSE
copyright:        (c) 2011, 2012 Simon Hengel
author:           Simon Hengel <sol@typeful.net>
maintainer:       Simon Hengel <sol@typeful.net>
build-type:       Simple
cabal-version:    >= 1.8
category:         Parsing
synopsis:         An Attoparsec compatibility layer for Parsec
description:      This package provides an implementation of
                  "Data.Attoparsec.Text" in terms of Parsec.
                  It can be used to write parsers that can be compiled against
                  both Attoparsec and Parsec.
                  .
                  Attoparsec is an awesome and very fast library, but it still
                  has a weak point: It does not generate very useful error
                  messages on parse errors.  Compiling an Attoparsec parser
                  against Parsec can be useful for at least two scenarios.
                  .
                  - Parsec can be used while developing Attoparsec parsers, so
                    that you get better error messages on failing test cases.
                  .
                  - You can use Attoparsec for parsing, so that you benefit
                    from it's speed.  And on parse errors you can re-parse the
                    input with Parsec, so that you can display a useful error
                    message to the user.
                  .
                  A simple usage example is here:
                  <https://github.com/sol/attoparsec-parsec#readme>

source-repository head
  type: git
  location: https://github.com/sol/attoparsec-parsec

library
  ghc-options:
      -Wall
  hs-source-dirs:
      src
  build-depends:
      base == 4.*
    , parsec >= 3.1.2
    , text
    , attoparsec >= 0.10.0.0
  exposed-modules:
      Data.Attoparsec.Text.Parsec

test-suite spec
  type:
      exitcode-stdio-1.0
  ghc-options:
      -Wall -Werror
  hs-source-dirs:
      test
  main-is:
      Spec.hs
  build-depends:
      base
    , attoparsec-parsec
    , text
    , hspec >= 1.3
    , QuickCheck

test-suite readme-parsec
  type:
      exitcode-stdio-1.0
  ghc-options:
      -Wall -Werror -pgmL markdown-unlit
  main-is:
      README.lhs
  build-depends:
      base, attoparsec-parsec, text, markdown-unlit

test-suite readme-attoparsec
  type:
      exitcode-stdio-1.0
  ghc-options:
      -Wall -Werror -pgmL markdown-unlit
  cpp-options:
      -DUSE_ATTOPARSEC
  main-is:
      README.lhs
  build-depends:
      base, attoparsec, text, markdown-unlit
