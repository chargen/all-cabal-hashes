-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:11845ee2a8507121c3f78b4cf2a8842d
    SHA1:e49729aaef2758f61688026f7e1b34602c3af1c7
    SHA256:33ba4ebd1125bdcc1dea9800131b3817c21c6c3df42a020e24fdc06e8bdc8344
    SHA512:24c743830f64be4fcb89652dcfeb1f6f6db145e2fcb5948926bd48139bb5815ef9ac1c633c4f612bd050baf1e19b73092a1504420b4325ff73deef4c3b9d7f08
    Skein512_512:2b33c4a1a336404f6b45b0ef2e5370379e4f28be910d334e686c86a0d2d7c56b6399f51727290094893a9134aa9fc60e25f625bd6c4d3a2eec06a5b71f78449a

x-package-locations:
    https://hackage.haskell.org/package/attoparsec-parsec-0.0.1/attoparsec-parsec-0.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/attoparsec-parsec-0.0.1.tar.gz

x-package-size: 5011
-- END Added by all-cabal-hashes-tool

name:             attoparsec-parsec
version:          0.0.1
license:          MIT
license-file:     LICENSE
copyright:        (c) 2011, 2012 Simon Hengel
author:           Simon Hengel <sol@typeful.net>
maintainer:       Simon Hengel <sol@typeful.net>
build-type:       Simple
cabal-version:    >= 1.8
category:         Parsing
synopsis:         An Attoparsec compatibility layer for Parsec
description:      This package provides an implementation of
                  "Data.Attoparsec.Text" in terms of Parsec.
                  It can be used to write parsers that can be compiled against
                  both Attoparsec and Parsec.
                  .
                  Attoparsec is an awesome and very fast library, but it still
                  has a weak point: It does not generate very useful error
                  messages on parse errors.  Compiling an Attoparsec parser
                  against Parsec can be useful for at least two scenarios.
                  .
                  - Parsec can be used while developing Attoparsec parsers, so
                    that you get better error messages on failing test cases.
                  .
                  - You can use Attoparsec for parsing, so that you benefit
                    from it's speed.  And on parse errors you can re-parse the
                    input with Parsec, so that you can display a useful error
                    message to the user.
                  .
                  A simple usage example is here:
                  <https://github.com/sol/attoparsec-parsec#readme>

source-repository head
  type: git
  location: https://github.com/sol/attoparsec-parsec

library
  ghc-options:
      -Wall
  hs-source-dirs:
      src
  build-depends:
      base == 4.*
    , parsec >= 3.1.2
    , text
    , attoparsec >= 0.10.0.0
  exposed-modules:
      Data.Attoparsec.Text.Parsec

test-suite spec
  type:
      exitcode-stdio-1.0
  ghc-options:
      -Wall -Werror
  hs-source-dirs:
      test
  main-is:
      Spec.hs
  build-depends:
      base, attoparsec-parsec, text, hspec-shouldbe, hspec-discover, QuickCheck

test-suite readme-parsec
  type:
      exitcode-stdio-1.0
  ghc-options:
      -Wall -Werror -pgmL pandoc-unlit
  main-is:
      README.lhs
  build-depends:
      base, attoparsec-parsec, text

test-suite readme-attoparsec
  type:
      exitcode-stdio-1.0
  ghc-options:
      -Wall -Werror -pgmL pandoc-unlit
  cpp-options:
      -DUSE_ATTOPARSEC
  main-is:
      README.lhs
  build-depends:
      base, attoparsec, text
