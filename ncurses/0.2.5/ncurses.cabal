-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:249b030c4c53882a22a8bf3158c3811a
    SHA1:ae282a37f8c6ea00e11b5feefafc2dbc9492648c
    SHA256:52635e42c8a07abcccdc3107611715c1e7e34e2a7a3b3d324ae8593bdf673985
    SHA512:4796d23ec0e827aaa9efee04917ea3987055935b6a5623e51e2a926b37feb55bb778cb9a5f625da01d592b6f6ba37e9543134932cb411b1b86ad4681cad50c28
    Skein512_512:13757a70c364528f00daae0570fa1c0c4f1d330e4dbe6704a81177d16a2f195b4be50fcfc6cd88d210dcac12fc2e11af2cf8fb6653dc5555b04e6ed645fad2aa

package-locations:
    https://hackage.haskell.org/package/ncurses-0.2.5/ncurses-0.2.5.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/ncurses-0.2.5.tar.gz

package-size: 25197
-- END Added by all-cabal-hashes-tool

name: ncurses
version: 0.2.5
license: GPL-3
license-file: license.txt
author: John Millikin <jmillikin@gmail.com>
maintainer: John Millikin <jmillikin@gmail.com>
build-type: Simple
cabal-version: >= 1.6
category: User Interfaces, Foreign
stability: experimental
homepage: https://john-millikin.com/software/haskell-ncurses/
bug-reports: mailto:jmillikin@gmail.com

synopsis: Modernised bindings to GNU ncurses
description:
  GNU ncurses is a library for creating command-line application with
  pseudo-graphical interfaces. This package is a nice, modern binding
  to GNU ncurses.
  .
  The following example is a program that display the message
  \"Hello world!\" until the user hits Q:
  .
  @
  import UI.NCurses
  .
  main :: IO ()
  main = runCurses $ do
  &#x20;   setEcho False
  &#x20;   w <- defaultWindow
  &#x20;   updateWindow w $ do
  &#x20;       moveCursor 1 10
  &#x20;       drawString \"Hello world!\"
  &#x20;       moveCursor 3 10
  &#x20;       drawString \"(press q to quit)\"
  &#x20;       moveCursor 0 0
  &#x20;   render
  &#x20;   waitFor w (\\ev -> ev == EventCharacter \'q\' || ev == EventCharacter \'Q\')
  .
  waitFor :: Window -> (Event -> Bool) -> Curses ()
  waitFor w p = loop where
  &#x20;   loop = do
  &#x20;       ev <- getEvent w Nothing
  &#x20;       case ev of
  &#x20;           Nothing -> loop
  &#x20;           Just ev' -> if p ev' then return () else loop
  @

extra-source-files:
  cbits/hsncurses-shim.c
  cbits/hsncurses-shim.h

source-repository head
  type: git
  location: https://john-millikin.com/code/haskell-ncurses/

source-repository this
  type: git
  location: https://john-millikin.com/code/haskell-ncurses/
  tag: haskell-ncurses_0.2.5

library
  hs-source-dirs: lib
  ghc-options: -Wall -O2
  include-dirs: .

  build-depends:
      base >= 4.0 && < 5.0
    , containers >= 0.2
    , text >= 0.7
    , transformers >= 0.2

  build-tools:
    c2hs >= 0.15

  -- Do not use pkg-config to find ncurses libraries, because the .pc files
  -- are missing or broken in many installations.
  if os(darwin)
    -- MacOS has a version of ncurses where the narrow- and wide-character
    -- builds have been merged into a single header/dylib.
    cc-options: -DHSNCURSES_NARROW_HEADER
    extra-libraries: panel ncurses
  else
    extra-libraries: panelw ncursesw

  c-sources: cbits/hsncurses-shim.c

  exposed-modules:
    UI.NCurses
    UI.NCurses.Panel

  other-modules:
    UI.NCurses.Enums
    UI.NCurses.Types
