-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:5b17bfc25a6bbf25841525339e24fc75
    SHA1:0af59a7df5537e61748c24d6d8acb1a772f02f63
    SHA256:15d6ac1259763c8e6b565b82166a982a6c577d4b5e649f138183ea2f3c0edaab
    SHA512:9d29d588eed3faffca189bf4dcb49f9a8da120ebfad3d4d86e8895527fa8ae83b8c4786ea75097a0a0e4419a54999c71041511bcf4cd8780ea66cc200692626c
    Skein512_512:8421ec599425909f4aacb270a8d09cd7ed5fb52d480b5efeb6657e7efc4ec50a1c85aee6f6dfb064fcc9d5e6a46f7eb1f4b49ea6ff8c0c3d0f544e513b66750f

x-package-locations:
    https://hackage.haskell.org/package/hDFA-0.0.2/hDFA-0.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/hDFA-0.0.2.tar.gz

x-package-size: 13701
-- END Added by all-cabal-hashes-tool

Name: hDFA
Version: 0.0.2
Cabal-version: >= 1.6
Build-type: Simple
Copyright: 2010-2012 Peter Gammie, original minimisation algorithm implementation in C++ (C) Antti Valmari 2011
Maintainer: peteg42@gmail.com
Author: Peter Gammie
License: BSD3
License-file: LICENCE
Synopsis: A simple library for representing and minimising DFAs.
Category: Data
Description:

 hDFA provides a simple API for representing and minimizing
 deterministic finite automata (DFAs) using an explicit representation
 (a list of transitions). It includes a port of Antti Valmari's
 efficient DFA minimization algorithm from C++ to C. (See A. Valmari,
 "Fast brief practical DFA minimization" Information Processing
 Letters 112(6) 2012.)

extra-source-files: Makefile bitsets.c bitsets.h dfa.c dfa.h dfa-driver.c qsort.h

source-repository head
  type:     git
  location: git://github.com/peteg/hDFA.git

Library
  build-depends: base >= 2 && < 5, containers, directory, process
  extensions: ForeignFunctionInterface
  exposed-modules:
    Data.DFA
    Data.DFA.DOT
    Data.DFA.KISS2
    Data.DFA.STAMINA
  includes: dfa.h
  c-sources: bitsets.c dfa.c qsort.c
  cc-options: -Wall -std=c99 -pedantic -ggdb
  ghc-options: -Wall
