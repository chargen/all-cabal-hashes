-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:46dfaf0c485f281a0b706291cf5008b6
    SHA1:be6773b0c9f19cf66090ca9af0d132ce695c7a29
    SHA256:26c3fa64c9aace0bfc475319346df8edf2f4410d0b9e2567aeaee5820be038eb
    SHA512:1c6c250f856d5f04f4bb3fad1ac6a7551110f2c744351eec833f8d6d127b58985563b1cc4bd025bb81011bffc57a5f2eb6ae06527f1cab4d84f5035d8ddf4172
    Skein512_512:3fc65e2425bcc5d930f6006e89f145b647f314bea534ebc1c67e95ecef27aa65a92107d731e8361c8f3374fca41a073d013f6596b49d22010e100d2ba24ba2be

package-locations:
    https://hackage.haskell.org/package/quantum-arrow-0.0.4/quantum-arrow-0.0.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/quantum-arrow-0.0.4.tar.gz

package-size: 8809
-- END Added by all-cabal-hashes-tool

Name: quantum-arrow
Description:
    This module is a loose port of the Quantum::Entanglement
    Perl module, which endows its host language with quantum-computationesque
    effects.  In this Haskell version this is done using an
    arrow to take advantage of the arrow syntax for imperative-looking
    code.  The module has all the fun bells and whistles of quantum
    computation, including entanglement and interference, even through
    conditionals (which the Perl analog does not support).  The arrow
    is defined over any instance of MonadRandom, so if you want to
    get especially crazy, you can experiment with what quantum computation
    is like when observables include invoking continuations.

    See the included example.hs for some simple examples of what 
    using this module looks like.
Version: 0.0.4
Stability: experimental
Synopsis: An embedding of quantum computation as a Haskell arrow
License: LGPL
License-file: LICENSE
Category: Control
Author: Luke Palmer
Maintainer: lrpalmer@gmail.com
Build-Type: Simple
Build-Depends: base, mtl, random, MonadRandom
Exposed-Modules: Control.Arrow.Quantum
Extra-Source-Files: example.hs, Tests.hs
