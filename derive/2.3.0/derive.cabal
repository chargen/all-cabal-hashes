-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:483e9c45d06cb6145ee70b8bd7f27ff6
    SHA1:84ffa0bf85aa39b458b280f8fbe3839689240910
    SHA256:d7113d7d0f3116e4b5c3ca589241915075a60ceae56b70bacbf4add164bd0c9c
    SHA512:c90fe990bd4f87941c53a182d037091b74f17daf18014dded46f955482d41fcfb63a2c6f7eeecb8a653844de15f782668b839880a8085e5339ba1b222c35c312
    Skein512_512:24905fc2307f71ba112135eea187737e8b8643ffa0a40e38bbbe3880b1ecc990c26d89a13c76e2a032a151192d0db8cf7250c1cd3b05693771129c6ac1468aec

package-locations:
    https://hackage.haskell.org/package/derive-2.3.0/derive-2.3.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/derive-2.3.0.tar.gz

package-size: 61527
-- END Added by all-cabal-hashes-tool

Cabal-Version:  >= 1.6
Build-Type:     Default
Name:           derive
Version:        2.3.0
build-type:     Simple
Copyright:      2006-2010, Neil Mitchell
Maintainer:     ndmitchell@gmail.com
Homepage:       http://community.haskell.org/~ndm/derive/
License:        BSD3
License-File:   LICENSE
Author:         Neil Mitchell & Stefan O'Rear
Synopsis:       A program and library to derive instances for data types
Category:       Development
Description:
    Data.Derive is a library and a tool for deriving instances for Haskell programs.
    It is designed to work with custom derivations, SYB and Template Haskell mechanisms.
    The tool requires GHC, but the generated code is portable to all compilers.
    We see this tool as a competitor to DrIFT.

Extra-Source-Files:
    derive.htm

Executable derive
    Main-Is: Main.hs

    Other-Modules:
        Derive.Derivation
        Derive.Flags
        Derive.Generate
        Derive.Test
        Derive.Utils

    Build-Depends:
        directory, process, bytestring

Library
    Build-Depends:
        haskell-src-exts == 1.6.*, filepath, mtl,
        base == 4.*, syb, template-haskell, uniplate == 1.4.*, containers,
        pretty

    Exposed-Modules:
        Data.DeriveTH
        Data.DeriveDSL
        Data.Derive.All
        Data.Derive.DSL.Apply
        Data.Derive.DSL.Derive
        Data.Derive.DSL.DSL
        Data.Derive.DSL.HSE
        Data.Derive.DSL.SYB
        Data.Derive.Instance.Arities
        Data.Derive.Class.Arities
        Data.Derive.Class.Default
        Language.Haskell
        Language.Haskell.Convert
        Language.Haskell.TH.All
        Language.Haskell.TH.Compat
        Language.Haskell.TH.Data
        Language.Haskell.TH.ExpandSynonym
        Language.Haskell.TH.FixedPpr
        Language.Haskell.TH.Helper
        Language.Haskell.TH.Peephole
        Language.Haskell.TH.SYB
-- GENERATED START
        Data.Derive.Arbitrary
        Data.Derive.ArbitraryOld
        Data.Derive.Arities
        Data.Derive.Binary
        Data.Derive.BinaryDefer
        Data.Derive.Bounded
        Data.Derive.Data
        Data.Derive.DataAbstract
        Data.Derive.Default
        Data.Derive.Enum
        Data.Derive.EnumCyclic
        Data.Derive.Eq
        Data.Derive.Fold
        Data.Derive.Foldable
        Data.Derive.From
        Data.Derive.Functor
        Data.Derive.Has
        Data.Derive.Is
        Data.Derive.JSON
        Data.Derive.LazySet
        Data.Derive.Monoid
        Data.Derive.NFData
        Data.Derive.Ord
        Data.Derive.Read
        Data.Derive.Ref
        Data.Derive.Serial
        Data.Derive.Serialize
        Data.Derive.Set
        Data.Derive.Show
        Data.Derive.Traversable
        Data.Derive.Typeable
        Data.Derive.UniplateDirect
        Data.Derive.UniplateTypeable
        Data.Derive.Update
-- GENERATED STOP

        -- Mainly internal but some still people use them
        -- to implement derivations outside
        Data.Derive.Internal.Derivation
    Other-Modules:
        Data.Derive.Internal.Instance
        Data.Derive.Internal.Traversal
