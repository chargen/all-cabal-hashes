-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:894691f940d60b35c3044298791a5aaa
    SHA1:114a818d8f0cd012bf53c1f99d3d6f9108334bf4
    SHA256:b8c60e6ad35c53a77c4e72b255562b0aebb6a1f26c33ed51ab528fd8d9b0c925
    SHA512:8c4df8a267a881dd47448cce330a389336192148bd63d5aa754c589294942863fa7fa3a4960362d8fbe0a02266837a6ce95ccfcfc7802a7d06b780b5a1dbc2b1
    Skein512_512:4145ac02ea3004fd4ad44ba49873dd8b3a34da688f7a44349d5312911c3ecc53174705758c1294860a9b60f6bf6eca00fc23c5b69c035ff6093546e86089ed0b

x-package-locations:
    https://hackage.haskell.org/package/transformers-supply-0.1.0/transformers-supply-0.1.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/transformers-supply-0.1.0.tar.gz

x-package-size: 6132
-- END Added by all-cabal-hashes-tool

Name:                transformers-supply
Version:             0.1.0

Homepage:            
Bug-Reports:         https://bitbucket.org/merijnv/transformers-supply/issues

Author:              Merijn Verstraaten
Maintainer:          Merijn Verstraaten <merijn@inconsistent.nl>
Copyright:           Copyright Â© 2013 Merijn Verstraaten

License:             BSD3
License-File:        LICENSE

Category:            System
Cabal-Version:       >= 1.10
Build-Type:          Simple
Tested-With:         GHC == 7.6.3

Synopsis:            Supply applicative, monad, applicative transformer and
                     monad transformer.

Description:
    The @Supply@ monad represents a computation that consumes values from a
    provided supply.
    .
    This package comes with two separate implementations,
    @Control.Applicative.Supply@ and @Control.Monad.Trans.Supply@. The former
    provides an applicative and applicative transformer, the latter a monad and
    monad transformer.
    .
    The reason for providing two separate implementations is that the
    @Applicative@ instance of @Control.Monad.Trans.Supply.SupplyT@ incurs a
    @Monad@ constraint on the wrapped type, meaning it's not possible to
    (usefully) wrap a type that only has an @Applicative@ instance.
    .
    The implementation of @Control.Applicative.Supply.SupplyT@ has an
    @Applicative@ instance for wrapped types that are only @Applicative@, but
    this implementation cannot be made an instance of @Monad@, meaning it is
    less powerful than the version from @Control.Monad.Trans.Supply@.
    .
    In general, use @Control.Monad.Trans.Supply@ unless you're wrapping a type
    that has no @Monad@ instance, in which case you can fall back to
    @Control.Applicative.Supply@.

Library
  Default-Language:     Haskell2010
  GHC-Options:          -Wall
  GHC-Prof-Options:     -auto-all -caf-all -rtsopts
  Exposed-Modules:      Control.Applicative.Supply
                        Control.Monad.Trans.Supply

  if impl(ghc)
    Exposed-Modules:    Control.Monad.Supply
                        Control.Monad.Supply.Class

  Build-Depends:        base >= 4 && < 5
               ,        transformers >= 0.3
               ,        mtl >= 2.1

Source-Repository head
  Type:     mercurial
  Location: https://bitbucket.org/merijnv/transformers-supply

Source-Repository head
  Type:     mercurial
  Location: git+ssh://github.com:merijn/transformers-supply.git
