name:                RefSerialize
version:             0.2.7
synopsis:            Write to and read from Strings maintaining internal memory references
description:
                     Read, Show and Data.Binary do not check for internal data references to the same address.
                     As a result, the data is duplicated when serialized. This is a waste of space in the filesystem
                     and  also a waste of serialization time. but the worst consequence is that, when the serialized data is read,
                     it allocates multiple copies for the same object when referenced multiple times. Because multiple referenced
                     data is very typical in a pure language such is Haskell, this means that the resulting data loose the beatiful
                     economy of space and processing time that referential transparency permits.
                     .
                     Every instance of Show/Read can be an instance of Data.RefSerialize.
                     .
                     This package allows the serialization and deserialization of large data structures without duplication of data, with
                     the result of optimized performance and memory usage. Since the serialized data is also human readable, It is also
                     useful for debugging purposes.
                     .
                     The deserializer contains a subset of Parsec.Token for defining deserializing parsers.
                     .
                     the serialized string has the form:
                     .
                     @expr( var1, ...varn) where  var1=value1,..valn=valueN @
                     .
                     so that the string can agree with the haskell syntax.
                     .
                     See demo.hs and tutorial.
                     .
                     in this release:
                            .
                            *  bug in 0.2.5 corrected: empty lists were written with two indirections (insertVar . insertVar). That caused an error in readp
                            .
                            *  bug in 0.2.6 corrected for lists
                            .
                            *  removed the problematic instance (Show a, Read a) => Serialize a
                            .
                            *  Added   instances for standard datatypes. More "deeper" instances favouring more variable usage
                            .
                            *  instance of Serialize [a] changed
                     .
                     To do:
                     .
                                 -derived instances for Data.Binary
                     .
                                 -serialization to/from ByteStings
                     

category:           Parsing, Data, Database
license:             BSD3
license-file:        LICENSE
author:              Alberto GÃ³mez Corona
maintainer:          agocorona@gmail.com
Tested-With:         GHC == 6.8.2
Build-Type:          Simple
build-Depends:       base >=3 && <4,containers
Cabal-Version:       >= 1.2

exposed-modules:     Data.RefSerialize, Data.Parser, Data.Serialize
ghc-options:    -O2


package-hashes:
    MD5:d5ded90b0a1102b196e28db571f103a3
    SHA1:1d6007d98abe45c9a3de1e1a1bdba42aa2a9e057
    SHA256:7bb13381523c4f570ccdc086142119bff8f3a4cd720b2e45d2d52d5b37beb6f6
    SHA512:9faa3aab80c9b367e4f1f5332901031e32472830c2be9ecbe4085f584d5496e0fe351472211893f425de37ed47e6ed72481e7497d17a104e379c78341506addd
    Skein512_512:9a0905657d99f9419f45e63c5ed6998284709da5b68846aa2fa74903404ef370666e3ee38583d94b7fd52e7f784433223734d26e19f41d006303ac37b85592c0

package-locations:
    https://hackage.haskell.org/package/RefSerialize-0.2.7/RefSerialize-0.2.7.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/RefSerialize-0.2.7.tar.gz

