-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:012e87cebe35a125b887244f86ddfb41
    SHA1:ab4222de306ba637896094b1f955daa9c2d30e4a
    SHA256:d825eb43c50cd1ed1cb6ca82413b4eb5b426f9c93d8ba0fa831070fdd90a2b9b
    SHA512:7ae550bcfe63a51f65da8f7c28b6c6ea6d7227429d887715231c1a112c0c8a949e8af92b9f516c8e01ea25d042051698b859e335ce9b978c62c4daec51d09584
    Skein512_512:199ec038cab3e04571991b7e8d7063ef41202bfea42f5a27c806357712759b75df95f24c2f5a6513504e01ff3aa237035b30e6d32e624855c5111da9a4a443de

x-package-locations:
    https://hackage.haskell.org/package/RefSerialize-0.2.8.1/RefSerialize-0.2.8.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/RefSerialize-0.2.8.1.tar.gz

x-package-size: 11452
-- END Added by all-cabal-hashes-tool

name:                RefSerialize
version:             0.2.8.1
synopsis:            Write to and read from Strings maintaining internal memory references
description:
                     Read, Show and Data.Binary do not check for internal data references to the same address.
                     As a result, the data is duplicated when serialized. This is a waste of space in the filesystem
                     and  also a waste of serialization time. but the worst consequence is that, when the serialized data is read,
                     it allocates multiple copies for the same object when referenced multiple times. Because multiple referenced
                     data is very typical in a pure language such is Haskell, this means that the resulting data loose the beatiful
                     economy of space and processing time that referential transparency permits.
                     .
                     Every instance of Show/Read can be an instance of Data.RefSerialize.
                     .
                     This package allows the serialization and deserialization of large data structures without duplication of data, with
                     the result of optimized performance and memory usage. Since the serialized data is also human readable, It is also
                     useful for debugging purposes.
                     .
                     The deserializer contains a subset of Parsec.Token for defining deserializing parsers.
                     .
                     the serialized string has the form:
                     .
                     @expr( var1, ...varn) where  var1=value1,..valn=valueN @
                     .
                     so that the string can agree with the haskell syntax.
                     .
                     See demo.hs and tutorial.
                     .
                     in this release:
                            .
                            * 0.2.8.1 fixed problem with showHex  Show constraint in the latter version of Numeric
                            .
                            * Serialization instance now includes an internal wiriter
                            .
                            * Solved a criitical bug only appearing in structures with many references, when StableNames started to be
                               freed by the gartbage colllector before serialization was completed, which gave erroneous references
                            .
                            *  Bug in 0.2.5 fixed: empty lists were written with two indirections (insertVar . insertVar). That caused an error in readp
                            .
                            *  Bug in 0.2.6 fixed for lists
                            .
                            *  Added   instances for standard datatypes. More "deeper" instances favouring more variable usage
                            .
                            *  Instance of Serialize [a] changed
                             .
                            *  Derived Serialize instances for Data.Binary instances: readpBinary, showpBinary
                             .
                            *- Serialization now is to/from ByteStings
                     

category:             Parsing, Data, Database
license:                BSD3
license-file:            LICENSE
author:                Alberto GÃ³mez Corona
maintainer:           agocorona@gmail.com
Tested-With:        GHC == 6.8.2
Build-Type:          Simple
build-Depends:      binary,bytestring, base >=4 && <5,containers


exposed-modules:     Data.RefSerialize, Data.RefSerialize.Parser, Data.RefSerialize.Serialize
ghc-options:    -O2
