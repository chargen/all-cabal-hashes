-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:1510298a7adf97a745335dc3a62d7a93
    SHA1:44723df41dfc55ef3c2a66307a39ac9a57df1e3e
    SHA256:b3ed8cd2e62b17ac93ffe585537223f97c84ba7f42797225418ee193b9d7bbcc
    SHA512:e5561cf9ff04599a223f8cf7b769c63685d899e8ee4af543a9e6e534ef2803f9a3758f49f388437463e978fa9a5dbd37382c149c8cd1a9d7691a4790fc8ee00b
    Skein512_512:30467e155d464a93a6b424f204616d602eec22d31ba30ca4c09e619114fdf2b9889652a5d24361bca7629e357fe13258d7edd45447fcb4c1097129548982edc6

package-locations:
    https://hackage.haskell.org/package/RefSerialize-0.2.5/RefSerialize-0.2.5.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/RefSerialize-0.2.5.tar.gz

package-size: 9047
-- END Added by all-cabal-hashes-tool

name:                RefSerialize
version:             0.2.5
synopsis:            Write to and read from Strings maintaining internal memory references
description:
                     Read, Show and Data.Binary do not check for repeated references to the same address.
                     As a result, the data is duplicated when serialized. This is a waste of space in the filesystem
                     and  also a waste of serialization time. but the worst consequence is that, when the serialized data is read,
                     it allocates multiple copies for the same object when referenced multiple times. Because multiple referenced
                     data is very typical in a pure language such is Haskell, this means that the resulting data loose the beatiful
                     economy of space and processing time that referential transparency permits.
                     .
                     Every instance of Show/Read is also a instance of Data.RefSerialize.
                     .
                     This package allows the serialization and deserialization of large data structures without duplication of data, with
                     the result of optimized performance and memory usage. It is also useful for debugging purposes.
                     .
                     There are automatic derived instances for instances of Read/Show. Lists of non-chars have its own instance.
                     The deserializer contains a subset of Parsec.Token for defining deserializing parsers.
                     .
                     the serialized string has the form:
                     .
                     @expr( var1, ...varn) where  var1=value1,..valn=valueN @
                     .
                     so that the string can be EVALuated.
                     .
                     See demo.hs and tutorial.
                     .
                     in this release:
                            .
                            *  Proper trailing withespace handlling for instances of Read
                            .
                            *  Error handllig for instances of Read.
                     .
                     To do:
                     .
                                 -derived instances for Data.Binary
                     .
                                 -serialization to/from ByteStings
                     

category:           Parsing, Data, Database
license:             BSD3
license-file:        LICENSE
author:              Alberto GÃ³mez Corona
maintainer:          agocorona@gmail.com
Tested-With:         GHC == 6.8.2
Build-Type:          Simple
build-Depends:       base >=3 && <4,containers
Cabal-Version:       >= 1.2

exposed-modules:     Data.RefSerialize, Data.Parser, Data.Serialize
ghc-options:    -O2
