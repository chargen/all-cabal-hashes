-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:1ba142bbb9b4b2df6821d78935cbb6ba
    SHA1:c30ee84dd4312d4c63b447bae1ac24d06896e138
    SHA256:5caa249b24fc029f3ca07ccddda4c52204d3b66c673e034ac316ddad28d9cbd8
    SHA512:8ec37d6a881031f98ca738c49a8038deb4a8840fc04b8080c8e29ea508ae3fac816b5d72c2cd2dab997e167ef66f087ac2193bce02df8a279997b70ac81596d1
    Skein512_512:02e4c7c21edf285dacb1e7eb00e3b5153bf1059575caf4e8683a3659cbb6651b45c6a16df1300d4fbc1accba14808f267cf8a4e56d69f14958ac700dad182217

package-locations:
    https://hackage.haskell.org/package/speculation-0.3.0/speculation-0.3.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/speculation-0.3.0.tar.gz

package-size: 6876
-- END Added by all-cabal-hashes-tool

name:           speculation
version:        0.3.0
license:        BSD3
license-file:   LICENSE
author:         Edward A. Kmett
maintainer:     Edward A. Kmett <ekmett@gmail.com>
stability:      experimental
homepage:       http://github.com/ekmett/speculation
category:       Concurrency
synopsis:       A framework for safe, programmable, speculative parallelism
description:
 A framework for safe, programmable, speculative parallelism, loosely based on
 <http://research.microsoft.com/pubs/118795/pldi026-vaswani.pdf>
 .
 This package provides speculative function application and speculative folds. And speculative STM actions take the place
 of the transactional rollback machinery from the paper.
 .
 For example:
 . 
 @'spec' g f a@ evaluates @f g@ while forcing @a@, if @g == a@ then @f g@ is returned, otherwise @f a@ is evaluated and returned. Furthermore, if the argument has already been evaluated, we skip the @f g@ computation entirely. If a good guess at the value of @a@ is available, this is one way to induce parallelism in an otherwise sequential task. However, if the guess isn\'t available more cheaply than the actual answer, then this saves no work and if the guess is wrong, you risk evaluating the function twice.
 .
 The best-case timeline looks like:
 .
 > [---- f g ----]
 >    [----- a -----]
 > [-- spec g f a --]
 .
 The worst-case timeline looks like:
 .
 > [---- f g ----]
 >    [----- a -----]
 >                  [---- f a ----]
 > [------- spec g f a -----------]
 .
 Compare these to the timeline of @f $! a@:
 .
 > [---- a -----]
 >              [---- f a ----]
 .
 'specSTM' provides a similar time table for STM actions, but also rolls back side-effects.
 . 
 /Changes in 0.3.0:/
 . 
 * Speculative folds moved to 'Data.Foldable.Speculation' and expanded to cover all of the 
   'Data.Foldable' combinators.
 * specBy and specOn variants added.

copyright:          (c) 2010 Edward A. Kmett
build-type:         Simple
cabal-version:      >=1.2
tested-with:        GHC==6.12.1
extra-source-files: README.markdown

library
  ghc-options: -Wall

  build-depends:
    base >= 4 && < 6,
    parallel >= 2.2 && < 2.3,
    stm >= 2.1 && < 2.2

  exposed-modules:
    Control.Concurrent.Speculation
    Control.Concurrent.STM.Speculation
    Data.Foldable.Speculation
