-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:70eeb9258c229a9b1b4a5f21e0da6b3a
    SHA1:54a139ba7830b2331d8898bebbfc4f3c64d2dc94
    SHA256:dcfd51a4c1cbb90b8584e289388375ca72cf19b227f69730994ccfd867ceee4b
    SHA512:0105711c2ef0800eb8db98946e473bc2ec7f13274b00d17c4dce590ec339c00a30eb158ad61cdcf8f142a633a7826f757ea867c60112fa2dea05686770071842
    Skein512_512:1571292ec5b5087f73fc69db101dffddbca1b889b06e464159d6ca8d1d7144952346efae8e91c65835130f02b4c3a23d126e04dcc1140a7da020cd226510c31d

package-locations:
    https://hackage.haskell.org/package/speculation-0.7.0/speculation-0.7.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/speculation-0.7.0.tar.gz

package-size: 7680
-- END Added by all-cabal-hashes-tool

name:           speculation
version:        0.7.0
license:        BSD3
license-file:   LICENSE
author:         Edward A. Kmett
maintainer:     Edward A. Kmett <ekmett@gmail.com>
stability:      experimental
homepage:       http://github.com/ekmett/speculation
category:       Concurrency
synopsis:       A framework for safe, programmable, speculative parallelism
description:
 A framework for safe, programmable, speculative parallelism, loosely based on:
 .
 *  Prakash Prabhu, G. Ramalingam, and Kapil Vaswani, \"/Safe Programmable Speculative Parallelism/\",
    In the proceedings of Programming Language Design and Implementation (PLDI) Vol 45, Issue 6 (June 2010) pp 50-61.
    <http://research.microsoft.com/pubs/118795/pldi026-vaswani.pdf>
 .
 This package provides speculative function application and speculative folds. Speculative STM transactions take the place
 of the transactional rollback machinery from the paper.
 .
 For example:
 . 
 @'spec' g f a@ evaluates @f g@ while forcing @a@, if @g == a@ then @f g@ is returned, otherwise @f a@ is evaluated and returned. Furthermore, if the argument has already been evaluated, we skip the @f g@ computation entirely. If a good guess at the value of @a@ is available, this is one way to induce parallelism in an otherwise sequential task. However, if the guess isn\'t available more cheaply than the actual answer, then this saves no work and if the guess is wrong, you risk evaluating the function twice. 
 .
 The best-case timeline looks like:
 .
 > [---- f g ----]
 >    [----- a -----]
 > [-- spec g f a --]
 .
 The worst-case timeline looks like:
 .
 > [---- f g ----]
 >    [----- a -----]
 >                  [---- f a ----]
 > [------- spec g f a -----------]
 .
 Compare these to the timeline of @f $! a@:
 .
 > [---- a -----]
 >              [---- f a ----]
 .
 'specSTM' provides a similar time table for STM actions, but also rolls back side-effects.
 . 
 /Changes in 0.7.0:/
 .
 * Changed @'throw' 'SpeculationException'@ to 'retry'
 * Removed 'SpeculationException'
 .
 /Changes in 0.6.0:/
 .
 * Upgraded the comparisons used by the STM combinators to STM actions, so they can check other STM state
 .
 /Changes in 0.5.1:/
 . 
 * Exposed 'unsafeGetTagBits' and 'unsafeIsEvaluated'

copyright:          (c) 2010 Edward A. Kmett
build-type:         Simple
cabal-version:      >=1.2
tested-with:        GHC==6.12.1
extra-source-files: README.markdown

library
  ghc-options: -Wall

  build-depends:
    base >= 4 && < 6,
    parallel >= 2.2 && < 2.3,
    stm >= 2.1 && < 2.2

  exposed-modules:
    Control.Concurrent.Speculation
    Data.Foldable.Speculation
