-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:d20c3e1937261507df542de19ec54a82
    SHA1:36be13eafc9dbba886a040fb7a76c56ed4464b2e
    SHA256:6adc118afedfde9c448d84710f9ce30a6ee522609d796581ba97b9a70088b5aa
    SHA512:8a4f20cc99da3d91600211ee17a290178c71dc177b8485037d95afd886081dd6f6c826467c118c8ba0d04a866e89194fac5ce0f6e9df6d61b8875bfe18d496e3
    Skein512_512:9e2ac2da4123d976b22d82265f75e11e131bc1eccbc610b3494d8dbcd8e441e3b818a9a3bad4f182f5b1b6d7669a4b2174414529e46bf2fea556c50eeb9a842f

x-package-locations:
    https://hackage.haskell.org/package/approximate-equality-1.1/approximate-equality-1.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/approximate-equality-1.1.tar.gz

x-package-size: 5971
-- END Added by all-cabal-hashes-tool

Name:                approximate-equality
Version:             1.1
License:             BSD3
License-file:        LICENSE
Author:              Gregory Crosswhite
Maintainer:          Gregory Crosswhite <gcross@phys.washington.edu>
Stability:           Provisional
Homepage:            http://github.com/gcross/approximate-equality
Synopsis:            Newtype wrappers for approximate equality
Description:         The purpose of this module is to provide newtype wrappers that allow one to effectively override the equality operator of a value so that it is /approximate/ rather than /exact/.  The wrappers use type annotations to specify the tolerance; the 'Digits' type constructor has been provided for specifying the tolerance using type-level natural numbers.  Instances for all of the classes in the numerical hierarchy have been provided for the wrappers, so the wrapped values can mostly be used in the same way as the original values. (In fact, most of the time one doesn't even have to wrap the starting values, since expressions such as @(1+sqrt 2/3)@ are automatically wrapped thanks to the 'fromIntegral' method of the 'Num' typeclass.) 

                     See the documentation for Data.Eq.Approximate for more detailed information on how to use this package.

                     New in version 1.1:  Added explicit Show constraints to the Show instances, as the Num class in the newest version of GHC (wisely) no longer includes Show as a constraint.
Cabal-version:       >=1.2.3
Build-type:          Simple
Category:	          Data

Library
    Build-depends:   base >= 3 && < 4.6,
                     type-level-natural-number >= 1.0 && < 1.1
    Exposed-modules: Data.Eq.Approximate
