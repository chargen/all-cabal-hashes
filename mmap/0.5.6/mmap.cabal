-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:642ecd97d88229ba4cd0a6d14b43f113
    SHA1:30d7032276f7bd42d19f1407a59ba0ef3ad796ce
    SHA256:c2457c663baaab662662b35c653c6fdc3d3c59b5f4c11ffeebbce6ad1bbcc362
    SHA512:ed324fb3dfe294e78b93489dee1f5385653ef861a8a0efc6d7571b6c4cb8d5a20e13bb610b9dc803589d4e649a52b52e17dda9f275d0bb2f2ace4e13f56d1a57
    Skein512_512:e08f2ad274f2613afd88ff4b20dd0bb600fc5f9e4ea6fd0fddb3f07c7acb41ceb7ff9ef0fd5eb5f74bb0a9ec6aaea87feac97668436ad71754c51fb28f5dfad8

package-locations:
    https://hackage.haskell.org/package/mmap-0.5.6/mmap-0.5.6.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/mmap-0.5.6.tar.gz

package-size: 11680
-- END Added by all-cabal-hashes-tool

Name: mmap
Version: 0.5.6
x-revision: 1
Stability: alpha
License: BSD3
License-File: LICENSE
Copyright: 2008, Gracjan Polak
Author: Gracjan Polak <gracjanpolak@gmail.com>
Maintainer: Gracjan Polak <gracjanpolak@gmail.com>
Synopsis: Memory mapped files for POSIX and Windows
Description:
    This library provides a wrapper to mmap(2) or MapViewOfFile,
    allowing files or devices to be lazily loaded into memory as
    strict or lazy ByteStrings, ForeignPtrs or plain Ptrs, using
    the virtual memory subsystem to do on-demand loading.
    Modifications are also supported.
Cabal-version: >= 1.2
Category: System
Build-type: Simple
Extra-Source-Files: cbits/HsMmap.h

Flag mmaptest
  Description: Generate mmaptest executable
  Default: False

Library
  Build-depends: base<4.6, bytestring
  Extensions: ForeignFunctionInterface
  Exposed-modules: System.IO.MMap
  Hs-source-dirs: .
  Include-dirs: cbits
  if os(mingw32)
      C-sources: cbits/win32.c
  else
      C-sources: cbits/posix.c

Executable mmaptest
  Main-is: tests/mmaptest.hs
  if flag(mmaptest)
      Buildable: True
  else
      Buildable: False
  Build-depends: base<5, bytestring, HUnit, directory
  Extensions: ForeignFunctionInterface, ScopedTypeVariables, CPP
  Hs-source-dirs: .
  CC-options: -Wall -D_DEBUG
  Include-dirs: cbits
  if os(mingw32)
      cpp-options: -DWINDOWS
      C-sources: cbits/win32.c
      Build-depends: Win32
  else
      C-sources: cbits/posix.c

