-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:737e0f0a82dcfbc71e69c1b7b52de07e
    SHA1:42deb6a6836ad8838953fb68982a973a15c026a1
    SHA256:fed460c4ded1953f027fccf705c7c09bc0a8e94bb14b024391387beb4b5afa9f
    SHA512:6c8b526ec9fedba195ce021f86eeb3fa35f7c95b9299d17503ad7d7e91b9485b3d9980e0ccbdc3876ec465ec8aa07cf9d0521c62e2c8a652a36df11b9badffb5
    Skein512_512:6403f3c055ff2c209db360efb22a90fb0a4bf6e72f82b3ec1aca95fed63d9685675a6f063652eae4ac07121052068be70fe68b1cb8a1220eae376aede7864551

package-locations:
    https://hackage.haskell.org/package/mmap-0.5.8/mmap-0.5.8.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/mmap-0.5.8.tar.gz

package-size: 11657
-- END Added by all-cabal-hashes-tool

Name: mmap
Version: 0.5.8
Stability: stable
License: BSD3
License-File: LICENSE
Copyright: 2008-2012, Gracjan Polak
Author: Gracjan Polak <gracjanpolak@gmail.com>
Maintainer: Gracjan Polak <gracjanpolak@gmail.com>
Synopsis: Memory mapped files for POSIX and Windows
Description:
    This library provides a wrapper to mmap(2) or MapViewOfFile,
    allowing files or devices to be lazily loaded into memory as
    strict or lazy ByteStrings, ForeignPtrs or plain Ptrs, using
    the virtual memory subsystem to do on-demand loading.
    Modifications are also supported.
Cabal-version: >= 1.6
Category: System
Build-type: Simple
Extra-Source-Files: cbits/HsMmap.h

Flag mmaptest
  Description: Generate mmaptest executable
  Default: False

Source-repository head
  Type:     darcs
  Location: http://code.haskell.org/mmap

Library
  Build-depends: base<5, bytestring
  Extensions: ForeignFunctionInterface
  Exposed-modules: System.IO.MMap
  Hs-source-dirs: .
  Include-dirs: cbits
  if os(mingw32)
      C-sources: cbits/win32.c
  else
      C-sources: cbits/posix.c

Executable mmaptest
  Main-is: tests/mmaptest.hs
  if flag(mmaptest)
      Buildable: True
      Build-depends: base<5, bytestring, HUnit, directory
  else
      Buildable: False
  Extensions: ForeignFunctionInterface, ScopedTypeVariables, CPP
  Hs-source-dirs: .
  CC-options: -Wall -D_DEBUG
  Include-dirs: cbits
  if os(mingw32)
      cpp-options: -DWINDOWS
      C-sources: cbits/win32.c
      Build-depends: Win32
  else
      C-sources: cbits/posix.c
