-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:bab71277ee80e2e7b53b762a146644dc
    SHA1:c4d38568594d699fc3a3e5d26ed791723e545596
    SHA256:cd6467ef340c88eb1b01c83e19fc5767b6efd85e5a102e08c282adf796af5d8b
    SHA512:87c81debc8e6813d988c0c1994eaf6ecbb50da42c62d8b60f874c71abc4fa59e99042da247b6234a925ef37b028a43c3265af11ba9cc1f0f960599748c518f51
    Skein512_512:3f71622705d1f08083b80990dbfb8f8e70628109d4d370b63f0cdf2950ba5e3d20558f59d059a97bc958acf8645a14ff5c908a4046a4784a23e523ac03e8b4bd

x-package-locations:
    https://hackage.haskell.org/package/urlpath-0.0.6/urlpath-0.0.6.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/urlpath-0.0.6.tar.gz

x-package-size: 4341
-- END Added by all-cabal-hashes-tool

Name:                   urlpath
Version:                0.0.6
Author:                 Athan Clark <athan.clark@gmail.com>
Maintainer:             Athan Clark <athan.clark@gmail.com>
License:                MIT
License-File:           LICENSE
Category:               Web
Synopsis:               Painfully simple URL writing combinators
Description:
  Simple URL DSL for Haskell.
  .
  Use raw combinators (kinda useless) ...
  .
  >  render $ "foo.php" <?> ("key1","bar") <&> ("key2","baz")
  >
  >  ↪ "foo.php?key1=bar&key2=baz"
  .
  ... or use the MonadReader instance for a configurable root ...
  .
  >  let url = runReader $ expandAbsolute $ "foo.php" <?> ("key1","bar") <&> ("key2","baz")
  >  url "example.com"
  >
  >  ↪ "example.com/foo.php?key1=bar&key2=baz"
  .
  ... in Lucid ...
  .
  >  (runReader $ renderTextT $
  >    (\a -> do
  >      foo <- lift $ expandAbsolute a
  >      script_ [src_ foo] "" )
  >    ("foo" <?> ("bar","baz"))
  >  ) "example.com"
  >
  >  ↪ "<script src=\"example.com/foo?bar=baz\"></script>"
  .
  ... and in Scotty ...
  .
  >  main :: IO ()
  >  main = scottyT 3000
  >      rootConf
  >      rootConf
  >      run
  >  
  >    where
  >      rootConf = flip runReaderT "http://example.com"
  >  
  >      run :: ( MonadIO m
  >             , MonadReader T.Text m ) =>
  >             ScottyT LT.Text m ()
  >      run = get "/" $ do
  >        path <- lift $ expandAbsolute $ "foo" <?> ("bar","baz")
  >        text $ LT.fromStrict path
  >
  >  λ> curl localhost:3000/
  >  ↪ "http://example.com/foo?bar=baz"
  

Cabal-Version:          >= 1.10
Build-Type:             Simple

Library
  Default-Language:     Haskell2010
  HS-Source-Dirs:       src
  GHC-Options:          -Wall
  Exposed-Modules:      UrlPath
                        UrlPath.Types
  Build-Depends:        base >= 4 && < 5
                      , mtl
                      , text
                      , transformers

Source-Repository head
  Type:                 git
  Location:             https://github.com/athanclark/urlpath.git
