-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:6339e72a1569ddae15d37d43d117b4da
    SHA1:2e2985fe2c7bb84fb363b416682f1c3f5592b565
    SHA256:c3d606a37215433cd688293408709b038991142a5db00ac05307886e251de10c
    SHA512:715a4967af832a7f6c767d5ce801b7fce480a7e39560ea27852dbdcf90b8a6f8108e76960e6aa8c05e95bd5a09be89038798d138193dd65fd2c3c774bcfa2b2f
    Skein512_512:68559811a99a0addd95a2a6564517de49c6f858c4ac486f3442103c710a7017e81aaef7d27f5af4825d6ebc9411bd54ca31d322e133ca56f5c7d0006a18f1eb7

package-locations:
    https://hackage.haskell.org/package/network-fancy-0.1.1/network-fancy-0.1.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/network-fancy-0.1.1.tar.gz

package-size: 8406
-- END Added by all-cabal-hashes-tool

Name:                network-fancy
Version:             0.1.1
Synopsis:            Networking support with a cleaner API
Description:         Networking support with a cleaner API
License:             BSD3
License-file:        COPYING
Copyright:           Taru Karttunen <taruti@taruti.net>
Author:              Taru Karttunen
Category:            Network
Maintainer:          taruti@taruti.net
Build-Type:          Simple
Cabal-version:       >= 1.6

Executable network-fancy-test
    Main-Is:             test.hs
    Other-Modules:       Network.Fancy
    GHC-Options:         -threaded
    C-Sources:           cbits.c
    Build-depends:	 base == 4.*, bytestring, random, directory
    Extensions:          TypeSynonymInstances, ForeignFunctionInterface, CPP, DeriveDataTypeable
    if os(windows) {
      CPP-Options:       -DWINDOWS=WINDOWS -DCALLCONV=stdcall -DSAFE_ON_WIN=safe
      CC-Options:        -DWINDOWS=WINDOWS -DCALLCONV=stdcall -DSAFE_ON_WIN=safe
      Extra-Libraries:   ws2_32
    } else {
      if os(solaris) {
        Extra-Libraries: socket
      }
      CPP-Options:       -DCALLCONV=ccall -DSAFE_ON_WIN=unsafe
      CC-Options:        -DCALLCONV=ccall -DSAFE_ON_WIN=unsafe
    }

Library
    Build-Depends:       base == 4.*, bytestring
    Exposed-modules:     Network.Fancy
    C-Sources:           cbits.c
    GHC-Options:         -Wall
    Extensions:          TypeSynonymInstances, ForeignFunctionInterface, CPP, DeriveDataTypeable
    if os(windows) {
      CPP-Options:       -DWINDOWS=WINDOWS -DCALLCONV=stdcall -DSAFE_ON_WIN=safe
      CC-Options:        -DWINDOWS=WINDOWS -DCALLCONV=stdcall -DSAFE_ON_WIN=safe
      Extra-Libraries:   ws2_32
    } else {
      if os(solaris) {
        Extra-Libraries: socket
      }
      CPP-Options:       -DCALLCONV=ccall -DSAFE_ON_WIN=unsafe
      CC-Options:        -DCALLCONV=ccall -DSAFE_ON_WIN=unsafe
    }
