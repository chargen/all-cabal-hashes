-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:732fdfa5c670871817ee791da9e77c6b
    SHA1:c494fec5d5bc171d298aa88542f280c91f37ccf3
    SHA256:0a203ac9864e497d4128022ca5e6529e4bfe721ddf64751bedae46f0adf83c7f
    SHA512:f9581e63c3bbd167f2ad2db208142288790f438afaddcd88c01642efc82a2b31e23eb935f5866debebfa7632b1d48730d7da292fa686fdf26553db1cb5c88d1f
    Skein512_512:70224a9551ab15573933b72a760a4636e8b6e6f637518455542d11280e6c7ca4b604090d5c8f1c163f58200e8bc2f555f2082b5fff4e8350908c76342ee80702

x-package-locations:
    https://hackage.haskell.org/package/wraxml-0.4.2/wraxml-0.4.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/wraxml-0.4.2.tar.gz

x-package-size: 35205
-- END Added by all-cabal-hashes-tool

Name:           wraxml
Version:        0.4.2
License:        GPL
License-File:   LICENSE
Author:         Henning Thielemann <haskell@henning-thielemann.de>
Maintainer:     Henning Thielemann <haskell@henning-thielemann.de>
Homepage:       http://darcs.haskell.org/wraxml/
Category:       Text
Build-Depends:
  polyparse >=1.2 && <1.4,
  tagsoup >=0.6 && <0.7,
  tagchup >=0.3 && <0.4,
  xml-basic >=0.1 && <0.2,
  HaXml >=1.19.4 && <1.20,
  hxt >=8.1.0 && <9,
  hxt-filter >=8.1.1 && <9,
  transformers >=0.1 && <0.2,
  utility-ht >=0.0.4 && <0.1,
  explicit-exception >=0.1.3 && <0.2,
  data-accessor >=0.2 && <0.3,
  containers >=0.1 && <0.3,
  base >=3 && <4
Synopsis:   Lazy wrapper to HaXML, HXT, TagSoup via custom XML tree structure
Description:
  This is a wrapper to HaXML and HXT (Haskell XML Toolbox).
  It's my work-around for the unfortunate situation that both toolboxes
  have different functionality,
  none is the superset of the other.
  Both of them rely on data structures, which look unnatural to me.
  Additionally they provide combinator functions that are actually weakly typed,
  they are all of type @(a -> [a])@,
  instead of being differentiated into @(a -> Bool)@, @(a -> a)@ and @(a -> [a])@.
  HXT is even weaker in type safety than HaXML
  since it allows complete XML trees even in attribute values.
  I didn't want to write another XML toolbox with parsers, HTML support and so on,
  however in the meantime I came close to it.
  .
  I decided to do some wrapping in order to use as much as possible functionality
  from HaXML and HXT.
  I provide my own XML tree data structure with according operations.
  Conversions between HaXML or HXT trees and my own ones are implemented.
  So I can use the parser and pretty printer of both HaXML and HXT
  while processing trees the way I find more natural.
  TagSoups can also be converted to XML trees.
  All conversions are lazy.
  .
  I have a special XML string structure.
  ("Text.XML.WraXML.String")
  XML strings consist of ASCII characters and XML references.
  My XML tree is built on top of a very general tree structure,
  which distinguishs between leafs and inner branches.
  ("Data.Tree.BranchLeafLabel")
  Each element of a tree is labeled with some information.
  Branches are then used for tags,
  leafs for XML strings and special tags,
  and the labels for pointers to positions in the source file.
  ("Text.XML.WraXML.Tree")
GHC-Options:    -Wall
Build-Type:     Simple
Hs-source-dirs: src
Exposed-modules:
  Data.Tree.BranchLeafLabel
  Data.Tree.BranchLeaf
  Text.HTML.WraXML.Document
  Text.HTML.WraXML.Table
  Text.HTML.WraXML.Tree
  Text.HTML.WraXML.Tree.HXT
  Text.HTML.WraXML.String
  Text.HTML.WraXML.Entity
  Text.XML.WraXML.Position.HaXml
  Text.XML.WraXML.String
  Text.XML.WraXML.String.HaXml
  Text.XML.WraXML.String.HXT
  Text.XML.WraXML.Element
  Text.XML.WraXML.Tree
  Text.XML.WraXML.Tree.HaXml
  Text.XML.WraXML.Tree.HXT
  Text.XML.WraXML.Tree.TagSoup
  Text.XML.WraXML.Tree.Tagchup
  Text.XML.WraXML.Tree.Literal
  Text.XML.WraXML.Document
  Text.XML.WraXML.Document.TagSoup
  Text.XML.WraXML.Document.Tagchup
Other-Modules:
  Text.XML.WraXML.Utility
  Text.XML.WraXML.Tree.LazyParser
