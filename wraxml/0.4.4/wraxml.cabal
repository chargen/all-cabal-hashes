-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:957ff4eff2f238951104779bed7d9332
    SHA1:329b8a857921966541138475797eaa767fcee641
    SHA256:2347454654a07e8865c14986db9df95b323ba0170310933d52731b0cb6c214c1
    SHA512:b741cba6c8fc287af54159d057bd0d865e7d6c5b3cb47b0387c3292a0b629a22943fac1dd653223e265a195d27ef4e95a09f988e0f886cf7eb74d4dfb5b67d2b
    Skein512_512:3d9f62d5d0c2ab2432985e2e62ee7ff2e048469998662e053de005dfafd333b4126f42472f701e86d3276221a65ca07afa1a3d8a2eddcf69f2027275fdfd648f

package-locations:
    https://hackage.haskell.org/package/wraxml-0.4.4/wraxml-0.4.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/wraxml-0.4.4.tar.gz

package-size: 37003
-- END Added by all-cabal-hashes-tool

Name:           wraxml
Version:        0.4.4
License:        GPL
License-File:   LICENSE
Author:         Henning Thielemann <haskell@henning-thielemann.de>
Maintainer:     Henning Thielemann <haskell@henning-thielemann.de>
Homepage:       http://code.haskell.org/~thielema/wraxml/
Category:       XML
Synopsis:   Lazy wrapper to HaXML, HXT, TagSoup via custom XML tree structure
Description:
  This is a wrapper to HaXML and HXT (Haskell XML Toolbox).
  It's my work-around for the unfortunate situation that both toolboxes
  have different functionality,
  none is the superset of the other.
  Both of them rely on data structures, which look unnatural to me.
  Additionally they provide combinator functions that are actually weakly typed,
  they are all of type @(a -> [a])@,
  instead of being differentiated into @(a -> Bool)@, @(a -> a)@ and @(a -> [a])@.
  HXT is even weaker in type safety than HaXML
  since it allows complete XML trees even in attribute values.
  I didn't want to write another XML toolbox with parsers, HTML support and so on,
  however in the meantime I came close to it.
  .
  I decided to do some wrapping in order to use as much as possible functionality
  from HaXML and HXT.
  I provide my own XML tree data structure with according operations.
  Conversions between HaXML or HXT trees and my own ones are implemented.
  So I can use the parser and pretty printer of both HaXML and HXT
  while processing trees the way I find more natural.
  TagSoups can also be converted to XML trees.
  All conversions are lazy.
  .
  I have a special XML string structure.
  ("Text.XML.WraXML.String")
  XML strings consist of ASCII characters and XML references.
  My XML tree is built on top of a very general tree structure,
  which distinguishs between leafs and inner branches.
  ("Data.Tree.BranchLeafLabel")
  Each element of a tree is labeled with some information.
  Branches are then used for tags,
  leafs for XML strings and special tags,
  and the labels for pointers to positions in the source file.
  ("Text.XML.WraXML.Tree")
Build-Type:     Simple
Cabal-Version:   >= 1.6

Source-Repository head
   Type:     darcs
   Location: http://code.haskell.org/~thielema/wraxml/

Source-Repository this
   Type:     darcs
   Location: http://code.haskell.org/~thielema/wraxml/
   Tag:      0.4.4

Flag buildExamples
   description: Build example executables
   default:     False

Library
  Build-Depends:
    polyparse >=1.2 && <1.9,
    tagsoup >=0.8 && <0.13,
    tagchup >=0.4 && <0.5,
    xml-basic >=0.1 && <0.2,
    HaXml >=1.23 && <1.24,
    hxt >=8.5.0 && <8.6,
    hxt-filter >=8.1.1 && <9,
    transformers >=0.2 && <0.4,
    utility-ht >=0.0.4 && <0.1,
    explicit-exception >=0.1.3 && <0.2,
    data-accessor >=0.2 && <0.3,
    containers >=0.1 && <0.6,
    base >=3 && <5
  GHC-Options:    -Wall
  Hs-source-dirs: src
  Exposed-modules:
    Data.Tree.BranchLeafLabel
    Data.Tree.BranchLeaf
    Text.HTML.WraXML.Document
    Text.HTML.WraXML.Table
    Text.HTML.WraXML.Tree
    Text.HTML.WraXML.Tree.HXT
    Text.HTML.WraXML.Element
    Text.HTML.WraXML.String
    Text.HTML.WraXML.Entity
    Text.XML.WraXML.Position.HaXml
    Text.XML.WraXML.String
    Text.XML.WraXML.String.HaXml
    Text.XML.WraXML.String.HXT
    Text.XML.WraXML.Element
    Text.XML.WraXML.Tree
    Text.XML.WraXML.Tree.HaXml
    Text.XML.WraXML.Tree.HXT
    Text.XML.WraXML.Tree.TagSoup
    Text.XML.WraXML.Tree.Tagchup
    Text.XML.WraXML.Tree.Literal
    Text.XML.WraXML.Document
    Text.XML.WraXML.Document.TagSoup
    Text.XML.WraXML.Document.Tagchup
  Other-Modules:
    Text.XML.WraXML.Utility
    Text.XML.WraXML.Tree.LazyParser

Executable escape-tidy-html
  If !flag(buildExamples)
    Buildable: False
  GHC-Options:    -Wall
  Hs-Source-Dirs: src, example
  Main-Is:        Escape.hs
