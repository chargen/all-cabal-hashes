Name:           wraxml
Version:        0.4.0.1
License:        GPL
License-File:   LICENSE
Author:         Henning Thielemann <haskell@henning-thielemann.de>
Maintainer:     Henning Thielemann <haskell@henning-thielemann.de>
Homepage:       http://darcs.haskell.org/wraxml/
Category:       Text
Build-Depends:
  polyparse >=1.1 && <1.2,
  tagsoup >=0.6 && <0.7,
  tagchup >=0.3 && <0.4,
  xml-basic >=0.1 && <0.2,
  HaXml >=1.19.4, hxt >=8.1.0 && <9,
  hxt-filter >=8.1.1 && <9,
  transformers >=0.1 && <0.2,
  utility-ht >=0.0.4 && <0.1,
  explicit-exception >=0.1.3 && <0.2,
  data-accessor >=0.2 && <0.3,
  containers >=0.1 && <0.3,
  base >=3 && <4
Synopsis:   Lazy wrapper to HaXML, HXT, TagSoup via custom XML tree structure
Description:
  This is a wrapper to HaXML and HXT (Haskell XML Toolbox).
  It's my work-around for the unfortunate situation that both toolboxes
  have different functionality,
  none is the superset of the other.
  Both of them rely on data structures, which look unnatural to me.
  Additionally they provide combinator functions that are actually weakly typed,
  they are all of type @(a -> [a])@,
  instead of being differentiated into @(a -> Bool)@, @(a -> a)@ and @(a -> [a])@.
  HXT is even weaker in type safety than HaXML
  since it allows complete XML trees even in attribute values.
  I didn't want to write another XML toolbox with parsers, HTML support and so on,
  however in the meantime I came close to it.
  .
  I decided to do some wrapping in order to use as much as possible functionality
  from HaXML and HXT.
  I provide my own XML tree data structure with according operations.
  Conversions between HaXML or HXT trees and my own ones are implemented.
  So I can use the parser and pretty printer of both HaXML and HXT
  while processing trees the way I find more natural.
  TagSoups can also be converted to XML trees.
  All conversions are lazy.
  .
  I have a special XML string structure.
  ("Text.XML.WraXML.String")
  XML strings consist of ASCII characters and XML references.
  My XML tree is built on top of a very general tree structure,
  which distinguishs between leafs and inner branches.
  ("Data.Tree.BranchLeafLabel")
  Each element of a tree is labeled with some information.
  Branches are then used for tags,
  leafs for XML strings and special tags,
  and the labels for pointers to positions in the source file.
  ("Text.XML.WraXML.Tree")
GHC-Options:    -Wall
Build-Type:     Simple
Hs-source-dirs: src
Exposed-modules:
  Data.Tree.BranchLeafLabel
  Data.Tree.BranchLeaf
  Text.HTML.WraXML.Document
  Text.HTML.WraXML.Table
  Text.HTML.WraXML.Tree
  Text.HTML.WraXML.Tree.HXT
  Text.HTML.WraXML.String
  Text.HTML.WraXML.Entity
  Text.XML.WraXML.Position.HaXml
  Text.XML.WraXML.String
  Text.XML.WraXML.String.HaXml
  Text.XML.WraXML.String.HXT
  Text.XML.WraXML.Element
  Text.XML.WraXML.Tree
  Text.XML.WraXML.Tree.HaXml
  Text.XML.WraXML.Tree.HXT
  Text.XML.WraXML.Tree.TagSoup
  Text.XML.WraXML.Tree.Tagchup
  Text.XML.WraXML.Tree.Literal
  Text.XML.WraXML.Document
  Text.XML.WraXML.Document.TagSoup
  Text.XML.WraXML.Document.Tagchup
Other-Modules:
  Text.XML.WraXML.Utility
  Text.XML.WraXML.Tree.LazyParser


package-hashes:
    MD5:437b70315aff37c55dc67e609e6e1468
    SHA1:2e33f4a13e7442e689d763e39e3d0f7943b84926
    SHA256:ff581bdb3bfddfd83ee3dc2f13c60caef0e530d6fa1cb3a4d31e15d8f3cf1b64
    SHA512:26eb5db341aa079abd3da1fd67b3bcd1035b67c0b820398b2f33842a6db8849214a41c6ca7cb7035f6753bd9971011b8eabaa68a66e79b67704026eaadcd7600
    Skein512_512:4d97810aa4cf9489f09cf039aa41c7f6a2fd6e112305c32b0d4ce44764d4fc9c6aa7dd97e98358b83e657d88e1b6f1e336b6face5ab432ebf0f628414f54991d

package-locations:
    https://hackage.haskell.org/package/wraxml-0.4.0.1/wraxml-0.4.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/wraxml-0.4.0.1.tar.gz

