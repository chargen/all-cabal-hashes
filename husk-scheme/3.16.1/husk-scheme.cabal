-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:b126c60810ae5ccdf975eb9d15be2911
    SHA1:2970932aeb79e94a9083439998e03ea8252f52e4
    SHA256:e7ebf80576b066737471d319f86f988efa193df1be0d69d8f3fd5c35cc4403fa
    SHA512:7cff5326fb9cd283b993ea1e38a60260bbd9f37bc52c0073c435ca09c60564fe6ff1b5c8be801b53f046ae9a8d2e9f7dc86b4bc24b981338a007b37d3467f9bb
    Skein512_512:c310a5cb568582219e4be5a7b236cfbe418dbca8235e7a698018a8d9c6a6876e33d250011fbdbaddfe93b1e8cd4b3ac1c3b262dcff7149cd2352c78542b7613e

package-locations:
    https://hackage.haskell.org/package/husk-scheme-3.16.1/husk-scheme-3.16.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/husk-scheme-3.16.1.tar.gz

package-size: 141001
-- END Added by all-cabal-hashes-tool

Name:                husk-scheme
Version:             3.16.1
Synopsis:            R5RS Scheme interpreter, compiler, and library.
Description:         
  <<https://github.com/justinethier/husk-scheme/raw/master/docs/husk-scheme.png>>
  .
  Husk is a dialect of Scheme written in Haskell that implements a superset of 
  the R5RS standard. Advanced features are provided including:
  .
  * First-class continuations of unlimited extent
  .
  * Hygienic macros based on syntax-rules
  .
  * Low-level explicit renaming macros 
  .
  * Library syntax from the R7RS standard
  .
  * A foreign function interface (FFI) to Haskell
  .
  * Full numeric tower providing support for real, rational, and complex numbers
  .
  * Proper tail recursion and lexical scoping
  .
  * Read-Eval-Print-Loop (REPL) interpreter, with input driven by Haskeline to provide a rich user experience
  .
  * Standard library of Scheme functions, and support for many popular SRFI's
  .
  Husk may be used as either a stand-alone interpreter or as an extension language within a larger Haskell application. By closely following the R5RS standard, the intent is to develop a Scheme that is as compatible as possible with other R5RS Schemes. Husk is mature enough for use in production, however it is not optimized for performance-critical applications. 
  .
  Scheme is one of two main dialects of Lisp. Scheme follows a minimalist design philosophy: the core language consists of a small number of fundamental forms which may be used to implement other built-in forms. Scheme is an excellent language for writing small, elegant programs, and may also be used to write scripts or embed scripting functionality within a larger application.
  .
  For documentation and examples, see 
  <http://justinethier.github.io/husk-scheme/documentation.html>.
  .
  For detailed information on each release, see 
  <http://justinethier.github.io/husk-scheme/news.html>.

License:             MIT
License-file:        LICENSE
Author:              Justin Ethier
Maintainer:          Justin Ethier <github.com/justinethier>
Homepage:            http://justinethier.github.com/husk-scheme
Bug-Reports:         http://github.com/justinethier/husk-scheme/issues
Cabal-Version:       >= 1.8
Build-Type:          Simple
Category:            Compilers/Interpreters, Language
Tested-with:         GHC == 7.2.2, GHC == 7.0.2, GHC == 6.12.3, GHC == 6.10.4

Extra-Source-Files:  README.markdown
                     ChangeLog.markdown
                     LICENSE
                     AUTHORS
Data-Files:          lib/*.scm lib/husk/*.sld lib/husk/*.scm lib/scheme/*.sld lib/srfi/*.scm lib/srfi/*.sld

Source-Repository head
    Type:            git
    Location:        git://github.com/justinethier/husk-scheme.git

flag useffi
    description: Haskell Foreign Function Interface (FFI). Allows husk to import and call into Haskell code directly from Scheme code. Turn off FFI to decrease build times and minimize executable sizes
    default: False

flag uselibraries
    description: R7RS-style libraries. 
    default: True

flag useptrs
    description: Turn off pointers to increase performance at the expense of severely restricting the functionality of mutable variables. Setting this flag to false will revert back to the behavior from previous versions of husk.
    default: True

Library
  Build-Depends:   base >= 2.0 && < 5, array, containers, haskeline, transformers, mtl, parsec, directory, bytestring, utf8-string, time, process, knob
  Extensions:      ExistentialQuantification
  Hs-Source-Dirs:  hs-src
  Exposed-Modules: Language.Scheme.Core
                   Language.Scheme.Environments
                   Language.Scheme.Types
                   Language.Scheme.Variables
                   Language.Scheme.Compiler
                   Language.Scheme.Compiler.Libraries
                   Language.Scheme.Compiler.Types
                   Language.Scheme.Plugins.CPUTime
                   Language.Scheme.Macro
                   Language.Scheme.Macro.ExplicitRenaming
                   Language.Scheme.Macro.Matches
                   Language.Scheme.Libraries
                   Language.Scheme.Numerical
                   Language.Scheme.Parser
                   Language.Scheme.Primitives
                   Language.Scheme.Util
  Other-Modules:   Paths_husk_scheme

  if flag(useffi)
    Build-Depends: ghc, ghc-paths
    Exposed-Modules:  Language.Scheme.FFI
    cpp-options: -DUseFfi

  if flag(uselibraries)
    cpp-options: -DUseLibraries

  if flag(useptrs)
    cpp-options: -DUsePointers

Executable         huski
  Build-Depends:   husk-scheme, base >= 2.0 && < 5, array, containers, haskeline, transformers, mtl, parsec, directory, process
  if flag(useffi)
    Build-Depends: ghc, ghc-paths
    cpp-options: -DUseFfi
  Extensions:      ExistentialQuantification
  Main-is:         shell.hs
  Hs-Source-Dirs:  hs-src/Interpreter

Executable huskc
  Build-Depends: husk-scheme, base >= 2.0 && < 5, array, containers, haskeline, transformers, mtl, parsec, directory, ghc-paths, process, filepath
  if flag(useffi)
    Build-Depends: ghc, ghc-paths
    cpp-options: -DUseFfi
  if flag(useptrs)
    cpp-options: -DUsePointers
  Extensions:      ExistentialQuantification
  Main-is: huskc.hs
  Hs-Source-Dirs: hs-src/Compiler
