-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:42ddc75ffee2cd658a220f0757da9d5a
    SHA1:44d571d111f1d8780fb271ed58dc5925da425396
    SHA256:984ed68cd6cf77ef3ec081abce1f14b1f4d6441e3eddf8fbe7b5372e7e4ef919
    SHA512:2d19a5aad5ce652d4421b990222a1ee76de24f7a6b22749ed46d6101dcee161e904007f032071128d01a5a5e2691a2e7c41c58aaf00a898ceb8bc9e0d2e494b7
    Skein512_512:4803cd641d1cdee8cd753c64aa45ea30bad4352f405d65401365259edbb4249ea69ce09e13ad67fd060fa81435cb32364c04c06c9c1d75a3b87dd2a2ac688b9d

package-locations:
    https://hackage.haskell.org/package/husk-scheme-3.6.2/husk-scheme-3.6.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/husk-scheme-3.6.2.tar.gz

package-size: 96556
-- END Added by all-cabal-hashes-tool

Name:                husk-scheme
Version:             3.6.2
Synopsis:            R5RS Scheme interpreter, compiler, and library.
Description:         
  <<https://github.com/justinethier/husk-scheme/raw/master/docs/husk-scheme.png>>
  .
  A dialect of R5RS Scheme written in Haskell. Advanced 
  features are provided including:
  .
  * First-class continuations of unlimited extent
  .
  * Hygienic macros based on syntax-rules
  .
  * Low-level explicit renaming macros 
  .
  * A foreign function interface (FFI) to Haskell
  .
  * Full numeric tower providing support for real, rational, and complex numbers
  .
  * Proper tail recursion and lexical scoping
  .
  * Read-Eval-Print-Loop (REPL) interpreter, with input driven by Haskeline to provide a rich user experience
  .
  * Standard library of Scheme functions, and support for many popular SRFI's
  .
  Husk may be used as either a stand-alone interpreter or as an extension language within a larger Haskell application. By closely following the R5RS standard, the intent is to develop a Scheme that is as compatible as possible with other R5RS Schemes. Husk is mature enough for use in production applications, however it is not optimized for performance-critical applications. 
  .
  Scheme is one of two main dialects of Lisp. Scheme follows a minimalist design philosophy: the core language consists of a small number of fundamental forms which may be used to implement other built-in forms. Scheme is an excellent language for writing small, elegant programs, and may also be used to write scripts or embed scripting functionality within a larger application.

License:             MIT
License-file:        LICENSE
Author:              Justin Ethier
Maintainer:          Justin Ethier <github.com/justinethier>
Homepage:            http://justinethier.github.com/husk-scheme
Cabal-Version:       >= 1.8
Build-Type:          Simple
Category:            Compilers/Interpreters, Language
Tested-with:         GHC == 7.2.2, GHC == 7.0.2, GHC == 6.12.3, GHC == 6.10.4

Extra-Source-Files:  README.markdown
                     ChangeLog.markdown
                     LICENSE
                     AUTHORS
Data-Files:          lib/stdlib.scm lib/srfi/*.scm

Source-Repository head
    Type:            git
    Location:        git://github.com/justinethier/husk-scheme.git

flag useffi
    description: Turn off FFI to decrease build times and minimize executable sizes
    default: True

flag useptrs
    description: Turn off pointers to increase performance at the expense of severely restricting the functionality of mutable variables. Setting this flag to false will revert back to the behavior from previous versions of husk.
    default: True

Library
  Build-Depends:   base >= 2.0 && < 5, array, containers, haskeline, transformers, mtl, parsec, directory
  Extensions:      ExistentialQuantification
  Hs-Source-Dirs:  hs-src
  Exposed-Modules: Language.Scheme.Core
                   Language.Scheme.Types
                   Language.Scheme.Variables
                   Language.Scheme.Compiler
                   Language.Scheme.Plugins.CPUTime
-- Other-Modules:
                   Language.Scheme.Macro
                   Language.Scheme.Macro.ExplicitRenaming
                   Language.Scheme.Macro.Matches
                   Language.Scheme.Numerical
                   Language.Scheme.Parser
                   Language.Scheme.Primitives
  if flag(useffi)
    Build-Depends: ghc, ghc-paths
    Exposed-Modules:  Language.Scheme.FFI
    cpp-options: -DUseFfi

  if flag(useptrs)
    cpp-options: -DUsePointers

Executable         huski
  Build-Depends:   husk-scheme, base >= 2.0 && < 5, array, containers, haskeline, transformers, mtl, parsec, directory
  if flag(useffi)
    Build-Depends: ghc, ghc-paths
    cpp-options: -DUseFfi
  Extensions:      ExistentialQuantification
  Main-is:         shell.hs
  Hs-Source-Dirs:  hs-src/Interpreter

Executable huskc
  Build-Depends: husk-scheme, base >= 2.0 && < 5, array, containers, haskeline, transformers, mtl, parsec, directory, ghc-paths, process, filepath
  if flag(useffi)
    Build-Depends: ghc, ghc-paths
    cpp-options: -DUseFfi
  if flag(useptrs)
    cpp-options: -DUsePointers
  Extensions:      ExistentialQuantification
  Main-is: huskc.hs
  Hs-Source-Dirs: hs-src/Compiler
