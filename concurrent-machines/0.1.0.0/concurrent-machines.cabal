-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:0474c8086291e364c04dbabf4a4746cb
    SHA1:6488038b8bd9a2cdd755629ce47af9d299e63fd7
    SHA256:846fd1bcb15551750da36f525050fc0a5f03c752ccd421fb90dfc92f595a9de6
    SHA512:f2798a6d0ef7fb2c645fa4f3651f854384ee79631d7fe40562f3e52ee848323c8e8f004f9fbeed91cff9820a569de434678a574face743a3dc3ca08f05725992
    Skein512_512:fba87a8e34c86e7e593ede50f934860bda8b94d5665524b40c7f9663cd10a1f775e9480b32375c9165e2d4f8d269503c2ab8d011b221130ce88fd0f88ba9d345

x-package-locations:
    https://hackage.haskell.org/package/concurrent-machines-0.1.0.0/concurrent-machines-0.1.0.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/concurrent-machines-0.1.0.0.tar.gz

x-package-size: 12165
-- END Added by all-cabal-hashes-tool

name:                concurrent-machines
version:             0.1.0.0
synopsis:            Concurrent networked stream transducers

description: A simple use-case for this library is to run the stages
             of a pipelined streaming computation concurrently. If
             data is streaming through multiple processing stages, you
             might build a machine like
             .
             @
             step1 >~> step2 >~> step3
             @
             .
             The @>~>@ operator connects the machines on
             either side with a one-element buffer. This means that
             data is pulled from upstream sources eagerly (perhaps
             pulling one more value than will be consumed by
             downstream), but it also means that each stage can be
             working simultaneously, increasing throughput of the
             entire pipeline.
             .
             A few small examples are available in the @examples@
             directory of the source repository.

license:             BSD3
license-file:        LICENSE
author:              Anthony Cowley
maintainer:          acowley@gmail.com
copyright:           Copyright (C) 2014 Anthony Cowley
category:            Concurrency, Control
build-type:          Simple
-- extra-source-files:  
cabal-version:       >=1.10

source-repository head
  type:     git
  location: http://github.com/acowley/concurrent-machines.git

library
  exposed-modules:     Data.Machine.Concurrent,
                       Data.Machine.Fanout,
                       Data.Machine.Regulated,
                       Data.Machine.Concurrent.AsyncStep,
                       Data.Machine.Concurrent.Buffer,
                       Data.Machine.Concurrent.Fanout,
                       Data.Machine.Concurrent.Scatter,
                       Data.Machine.Concurrent.Tee,
                       Data.Machine.Concurrent.Wye
  -- other-modules:       
  other-extensions:    GADTs, FlexibleContexts, RankNTypes, TupleSections, 
                       ScopedTypeVariables
  build-depends:       base >= 4.6 && < 5, 
                       monad-control >= 1.0 && < 1.1,
                       transformers >= 0.4 && < 0.5,
                       time >= 1.4 && < 1.6,
                       containers >= 0.5 && < 0.6,
                       transformers-base >= 0.4 && < 0.5,
                       machines >= 0.5 && < 0.6,
                       async >= 2.0.1 && < 2.1,
                       lifted-async >= 0.1 && < 0.8,
                       semigroups >= 0.8 && < 0.17
  hs-source-dirs:      src
  default-language:    Haskell2010

test-suite tests
  type: exitcode-stdio-1.0
  hs-source-dirs: tests
  main-is: AllTests.hs
  ghc-options: -Wall -O0
  default-language: Haskell2010
  build-depends: base >= 4.6 && < 5, concurrent-machines, machines,
                 tasty, tasty-hunit, transformers, time
