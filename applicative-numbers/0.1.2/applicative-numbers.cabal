name:                applicative-numbers
version:             0.1.2
cabal-version:       >= 1.2
synopsis:            Applicative-based numeric instances
category:            Data, Numerical
description:
  Any applicative functor can be given numeric instances in a boilerplate way.
  The /applicative-numbers/ package provides an include file that makes it a
  snap to define these instances.
  See "Data.Numeric.Function" for an example.
  .
  Project wiki page: <http://haskell.org/haskellwiki/applicative-numbers>
  .
  Copyright 2009-2013 Conal Elliott; BSD3 license.
  .
  .
  Instances of @Num@ classes for applicative functors.  To be @#include@'d after
  defining @APPLICATIVE@ as the applicative functor name and @CONSTRAINTS@ as a
  list of constraints, which must carry its own trailing comma if non-empty.
  The @APPLICATIVE@ symbol gets @#undef@'d at the end of the include file, so
  that multiple includes are convenient.
  .
  For instance,
  .
  @
      -- Generate Ord & Enum, but not Eq & Show
      #define INSTANCE_Ord
      #define INSTANCE_Enum
  .
      #define APPLICATIVE Vec2
      #include \"ApplicativeNumeric-inc.hs\"
  .
      #define APPLICATIVE Vec3
      #include \"ApplicativeNumeric-inc.hs\"
  .
      #define APPLICATIVE Vec4
      #include \"ApplicativeNumeric-inc.hs\"
  @
  .
  You'll also have to import 'pure' and 'liftA2' from "Control.Applicative"
  and specify @the FlexibleContexts@ language extension (due to an implementation hack).
  .
  Some instances are generated only if a corresponding CPP symbol is
  defined: @INSTANCE_Eq@, @INSTANCE_Ord@, @INSTANCE_Show@, @INSTANCE_Enum@
author:              Conal Elliott 
maintainer:          conal@conal.net
homepage:            http://haskell.org/haskellwiki/applicative-numbers
package-url:         http://code.haskell.org/applicative-numbers
copyright:           (c) 2009-2011 by Conal Elliott
license:             BSD3
license-file:        COPYING
stability:           experimental
build-type:          Simple

Library
  hs-source-dirs:      src
  include-dirs:        src

  extensions:
  build-depends:       base<5, wl-pprint
  exposed-modules:     
                       Data.Numeric.Function
  install-includes:    ApplicativeNumeric-inc.hs
                       ApplicativeNumeric-inc.lhs

--                        T1.hs
--                        T1.lhs

-- T1 is for testing

  ghc-options:         -Wall

 ghc-prof-options:    -prof -auto-all 


package-hashes:
    MD5:2584f373bbd5ac2d38a6f90894c57c1b
    SHA1:21f39d39f05ffa044ab1f28a4a655b5df8b777be
    SHA256:cfbc81edda7d1df1ff0b7c37154cd2bddfbeed3244022d37d5f9a37e2aefdfe2
    SHA512:276e7ed7de02a9d0c46d7cce32f0095b74fafcad18daa09bbe4e272f2e26736a82852ee334f506590bdd882f1388cdb2095b81fca61d09535293bb4dda3666e3
    Skein512_512:b12585d46f2b018564e6b2f913ece1e6507f09053c2b2e7049921a6b960ff0bd39355ccdf9a14b804a79999233000d8753e0f5629eb7975d4812d16bb21fff3c

package-locations:
    https://hackage.haskell.org/package/applicative-numbers-0.1.2/applicative-numbers-0.1.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/applicative-numbers-0.1.2.tar.gz

