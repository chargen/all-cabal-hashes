-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:5dd64b0388445a9ecf3b407c44ea5a60
    SHA1:b7f33053c5c701f6706f8442c5c7255dc5524b91
    SHA256:80abc54b03853dbdcc10a53ae19f9938381f42727037092226ea59f3fda1d266
    SHA512:a6c66a2eac6b8d916c88192df62b22f203ba0b73d6283926ddafebd85747c383881c80db3040784d08502b1b4a06ff37dbd0ff3b5869f1796fb71247f3ebcf99
    Skein512_512:6b70ca0edee115b763d10b7fcf8d3e83b67d57086b15b8aa45ec068076ffce604166c8f8c1976f226b019c34c4c1673c7f28995a1f9f2ddd6ad7fa54718dd6a3

x-package-locations:
    https://hackage.haskell.org/package/applicative-numbers-0.1.3/applicative-numbers-0.1.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/applicative-numbers-0.1.3.tar.gz

x-package-size: 4129
-- END Added by all-cabal-hashes-tool

name:                applicative-numbers
version:             0.1.3
cabal-version:       >= 1.2
synopsis:            Applicative-based numeric instances
category:            Data, Numerical
description:
  Any applicative functor can be given numeric instances in a boilerplate way.
  The /applicative-numbers/ package provides an include file that makes it a
  snap to define these instances.
  See "Data.Numeric.Function" for an example.
  .
  Project wiki page: <http://haskell.org/haskellwiki/applicative-numbers>
  .
  Copyright 2009-2013 Conal Elliott; BSD3 license.
  .
  .
  Instances of @Num@ classes for applicative functors.  To be @#include@'d after
  defining @APPLICATIVE@ as the applicative functor name and @CONSTRAINTS@ as a
  list of constraints, which must carry its own trailing comma if non-empty.
  The @APPLICATIVE@ symbol gets @#undef@'d at the end of the include file, so
  that multiple includes are convenient.
  .
  For instance,
  .
  @
      -- Generate Ord & Enum, but not Eq & Show
      #define INSTANCE_Ord
      #define INSTANCE_Enum
  .
      #define APPLICATIVE Vec2
      #include \"ApplicativeNumeric-inc.hs\"
  .
      #define APPLICATIVE Vec3
      #include \"ApplicativeNumeric-inc.hs\"
  .
      #define APPLICATIVE Vec4
      #include \"ApplicativeNumeric-inc.hs\"
  @
  .
  You'll also have to import 'pure' and 'liftA2' from "Control.Applicative"
  and specify @the FlexibleContexts@ language extension (due to an implementation hack).
  .
  Some instances are generated only if a corresponding CPP symbol is
  defined: @INSTANCE_Eq@, @INSTANCE_Ord@, @INSTANCE_Show@, @INSTANCE_Enum@
author:              Conal Elliott 
maintainer:          conal@conal.net
homepage:            http://haskell.org/haskellwiki/applicative-numbers
package-url:         http://code.haskell.org/applicative-numbers
copyright:           (c) 2009-2011 by Conal Elliott
license:             BSD3
license-file:        COPYING
stability:           experimental
build-type:          Simple

Library
  hs-source-dirs:      src
  include-dirs:        src

  extensions:
  build-depends:       base<5
  exposed-modules:     
                       Data.Numeric.Function
  install-includes:    ApplicativeNumeric-inc.hs
                       ApplicativeNumeric-inc.lhs

--                        T1.hs
--                        T1.lhs

-- T1 is for testing

  ghc-options:         -Wall

 ghc-prof-options:    -prof -auto-all 
