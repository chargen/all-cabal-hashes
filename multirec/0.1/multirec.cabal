-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:53f00c0e42ccb6289a1991db019092b6
    SHA1:c3ebd527c45717f4c020b22b6133d2e48a87d4e1
    SHA256:df31251c8d78d5122c4ffe2fe167a8c7ba1f6e0bee75ffbd1f305f7539c62be7
    SHA512:c0e42dfad6bc84fb8159bcb716214a4ea8cfab458faed7b7dca5cb0d730e50f63b6fcf2c6b055ef15dad6ad32c5c32d8c73cbc5d3f14db8535decb9434d4c1af
    Skein512_512:9f29c512eebb82479bc789a75f019e7e3f418e8b66c8fd803dd811b6870b4ebe7208d1c77f89fdc28f4beccd8915e6e0e9030ae1430614b952552d2ec82d78d2

x-package-locations:
    https://hackage.haskell.org/package/multirec-0.1/multirec-0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/multirec-0.1.tar.gz

x-package-size: 6566
-- END Added by all-cabal-hashes-tool

name:			multirec
version:		0.1
license:		BSD3
license-file:		LICENSE
author:			Alexey Rodriguez,
                        Stefan Holdermans,
                        Andres Löh,
                        Johan Jeuring
maintainer:		generics@haskell.org
category:		Generics
synopsis:		Generic programming with systems of recursive datatypes
homepage:		http://www.cs.uu.nl/wiki/GenericProgramming/Multirec
description:
  Many generic programs require information about the recursive positions
  of a datatype. Examples include the generic fold, generic rewriting or
  the Zipper data structure. Several generic programming systems allow to
  write such functions by viewing datatypes as fixed points of a pattern
  functor. Traditionally, this view has been limited to so-called regular
  datatypes such as lists and binary trees. In particular, systems of
  mutually recursive datatypes have been excluded.
  .
  With the multirec library, we provide a mechanism to talk about fixed
  points of systems of datatypes that may be mutually recursive. On top
  of this representations, generic functions such as the fold or the zipper
  can then be defined.
  .
  We expect that the library will be especially interesting for compiler
  writers, because ASTs are typically systems of mutually recursive datatypes,
  and with multirec it becomes easy to write generic functions on ASTs.
  .
  The library is based on ideas described in the paper:
  .
  *  Alexey Rodriguez, Stefan Holdermans, Andres Löh, Johan Jeuring.
     /Generic programming with fixed points for mutually recursive datatypes/.
     Technical Report, Universiteit Utrecht
     (<http://www.cs.uu.nl/research/techreps/repo/CS-2008/2008-019.pdf>).
 
stability:		experimental
build-type:		Simple
cabal-version:		>= 1.2.1
tested-with:		GHC == 6.8.3
hs-source-dirs:		src
exposed-modules:	Generics.MultiRec

			-- Base
                        Generics.MultiRec.Base

			-- Generic functions
			Generics.MultiRec.HFunctor
			Generics.MultiRec.Fold
			Generics.MultiRec.Compos
			Generics.MultiRec.Eq

extra-source-files:	examples/AST.hs
			examples/ASTExamples.hs
			CREDITS
build-depends:		base >= 3.0 
