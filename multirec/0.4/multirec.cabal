-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:9ea5f40a18105873be994f81df125c26
    SHA1:78604bffb4e343690eb97eeac55f9c160b85e344
    SHA256:ad7a6ae90e1880b3fd79686ce8012e531b738f8f1d10ba836550fc91cfe3695e
    SHA512:577291973fe46853d0d700609785042fa7b2d0aa0a224074c8a30f25c5a666e32a7eac64edf61229b4d9c07d0564e98ab9bf2a23dfba6ddc4bbda1ee6f2124fa
    Skein512_512:41285df4e2e8b3f6fbbdd8c384c4e0d3a8ff0b84215dae14dcf34002e9e346f1fdb63e05cfe57f0beef6bedd93c887c5e10f03cbc8573f48fc4e02fea7424779

x-package-locations:
    https://hackage.haskell.org/package/multirec-0.4/multirec-0.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/multirec-0.4.tar.gz

x-package-size: 14273
-- END Added by all-cabal-hashes-tool

name:			multirec
version:		0.4
license:		BSD3
license-file:		LICENSE
author:			Alexey Rodriguez,
                        Stefan Holdermans,
                        Andres Löh,
                        Johan Jeuring
maintainer:		generics@haskell.org
category:		Generics
synopsis:		Generic programming for families of recursive datatypes
homepage:		http://www.cs.uu.nl/wiki/GenericProgramming/Multirec
description:
  Many generic programs require information about the recursive positions
  of a datatype. Examples include the generic fold, generic rewriting or
  the Zipper data structure. Several generic programming systems allow to
  write such functions by viewing datatypes as fixed points of a pattern
  functor. Traditionally, this view has been limited to so-called regular
  datatypes such as lists and binary trees. In particular, families of
  mutually recursive datatypes have been excluded.
  .
  With the multirec library, we provide a mechanism to talk about fixed
  points of families of datatypes that may be mutually recursive. On top
  of this representations, generic functions such as the fold or the Zipper
  can then be defined.
  .
  We expect that the library will be especially interesting for compiler
  writers, because ASTs are typically families of mutually recursive datatypes,
  and with multirec it becomes easy to write generic functions on ASTs.
  .
  The library is based on ideas described in the paper:
  .
  *  Alexey Rodriguez, Stefan Holdermans, Andres Löh, Johan Jeuring.
     /Generic programming with fixed points for mutually recursive datatypes/.
     ICFP 2009.
 
stability:		experimental
build-type:		Simple
cabal-version:		>= 1.2.1
tested-with:		GHC == 6.8.3, GHC == 6.10.3
hs-source-dirs:		src
exposed-modules:	Generics.MultiRec

			-- Base
                        Generics.MultiRec.Base
			Generics.MultiRec.Constructor
                        Generics.MultiRec.TH

			-- Generic functions
			Generics.MultiRec.ConNames
			Generics.MultiRec.HFunctor
			Generics.MultiRec.HFix
			Generics.MultiRec.Fold
			Generics.MultiRec.FoldK
			Generics.MultiRec.FoldAlg
			Generics.MultiRec.FoldAlgK
			Generics.MultiRec.Compos
			Generics.MultiRec.Eq
			Generics.MultiRec.Show

			-- Extra
			Generics.MultiRec.TEq

extra-source-files:	examples/AST.hs
                        examples/ASTUse.hs
                        examples/ASTTHUse.hs
			examples/ASTExamples.hs
			examples/Single.hs
			examples/SingleUse.hs
			examples/SingleTHUse.hs
			examples/SingleExamples.hs
			CREDITS
build-depends:		base >= 3.0 && < 5,
                        template-haskell >= 2.2 && < 2.4
