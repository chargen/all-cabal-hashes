-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:f6943aa1011422efce6f5866b63b3ca6
    SHA1:afe8ce8cff83ca76e49515f49aa2d2d955e74807
    SHA256:66f748245020437ad30dbc25e2decae7d49c6d968c014b316c0961539892083c
    SHA512:c7066dfd7141d266b0560cf2a6f3a2e35e5d4dda44de99214714cde3793a7cfc370645d3db87962c77320e6d516d7189bb96b1a7f1f8a50b36ab08f05572309e
    Skein512_512:13b865d9d3e8d3574235637663c80c46a4448e64783a79031a52556575ef5e1f3efa79b7ed8f434067b6d9ec059f122a0d2641ba4f76b5fddb3aea0f1ae55b68

x-package-locations:
    https://hackage.haskell.org/package/multirec-0.2/multirec-0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/multirec-0.2.tar.gz

x-package-size: 13923
-- END Added by all-cabal-hashes-tool

name:			multirec
version:		0.2
license:		BSD3
license-file:		LICENSE
author:			Alexey Rodriguez,
                        Stefan Holdermans,
                        Andres Löh,
                        Johan Jeuring
maintainer:		generics@haskell.org
category:		Generics
synopsis:		Generic programming with systems of recursive datatypes
homepage:		http://www.cs.uu.nl/wiki/GenericProgramming/Multirec
description:
  Many generic programs require information about the recursive positions
  of a datatype. Examples include the generic fold, generic rewriting or
  the Zipper data structure. Several generic programming systems allow to
  write such functions by viewing datatypes as fixed points of a pattern
  functor. Traditionally, this view has been limited to so-called regular
  datatypes such as lists and binary trees. In particular, systems of
  mutually recursive datatypes have been excluded.
  .
  With the multirec library, we provide a mechanism to talk about fixed
  points of systems of datatypes that may be mutually recursive. On top
  of this representations, generic functions such as the fold or the Zipper
  can then be defined.
  .
  We expect that the library will be especially interesting for compiler
  writers, because ASTs are typically systems of mutually recursive datatypes,
  and with multirec it becomes easy to write generic functions on ASTs.
  .
  The library is based on ideas described in the paper:
  .
  *  Alexey Rodriguez, Stefan Holdermans, Andres Löh, Johan Jeuring.
     /Generic programming with fixed points for mutually recursive datatypes/.
     Technical Report, Universiteit Utrecht
     (<http://www.cs.uu.nl/research/techreps/repo/CS-2008/2008-019.pdf>).
 
stability:		experimental
build-type:		Simple
cabal-version:		>= 1.2.1
tested-with:		GHC == 6.8.3, GHC == 6.10.1
hs-source-dirs:		src
exposed-modules:	Generics.MultiRec

			-- Base
                        Generics.MultiRec.Base
			Generics.MultiRec.Constructor
                        Generics.MultiRec.TH

			-- Generic functions
			Generics.MultiRec.ConNames
			Generics.MultiRec.HFunctor
			Generics.MultiRec.HFix
			Generics.MultiRec.Fold
			Generics.MultiRec.FoldK
			Generics.MultiRec.FoldAlg
			Generics.MultiRec.FoldAlgK
			Generics.MultiRec.Compos
			Generics.MultiRec.Eq
			Generics.MultiRec.Show

extra-source-files:	examples/AST.hs
                        examples/ASTUse.hs
                        examples/ASTTHUse.hs
			examples/ASTExamples.hs
			examples/Single.hs
			examples/SingleUse.hs
			examples/SingleTHUse.hs
			examples/SingleExamples.hs
			CREDITS
build-depends:		base >= 3.0 && < 4,
                        template-haskell >= 2.2 && < 2.4
