-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:527a9fa405833eafeefa859f9db55dcb
    SHA1:2b9262422cfdf70d493cd2b57b6f1b2fdf5b70c3
    SHA256:d9fc5389cf8807301bc448e5e587100d25f029137f8a54011e6ee4e39f8f79f1
    SHA512:bc8a032e429f9dab8b5992243c36258cf93858c938cf4cd7d4f8a3a7bdccd67b8ec2ea451a4a20bf8d2152371cd39a8ce637ade0da2a237a72e52a050afc5518
    Skein512_512:90793b7a5a551d89bdb7f1bd0675faf039d739e39d53517d6adbacdaa43c322c1fc1403aec3c68b297947ace43700de96405f37e230d3f0f0ae8adccf0fb09b7

x-package-locations:
    https://hackage.haskell.org/package/multirec-0.4.1/multirec-0.4.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/multirec-0.4.1.tar.gz

x-package-size: 14317
-- END Added by all-cabal-hashes-tool

name:                 multirec
version:              0.4.1
license:              BSD3
license-file:         LICENSE
author:               Alexey Rodriguez,
                      Stefan Holdermans,
                      Andres Löh,
                      Johan Jeuring
maintainer:           generics@haskell.org
category:             Generics
synopsis:             Generic programming for families of recursive datatypes
homepage:             http://www.cs.uu.nl/wiki/GenericProgramming/Multirec
description:
  Many generic programs require information about the recursive positions
  of a datatype. Examples include the generic fold, generic rewriting or
  the Zipper data structure. Several generic programming systems allow to
  write such functions by viewing datatypes as fixed points of a pattern
  functor. Traditionally, this view has been limited to so-called regular
  datatypes such as lists and binary trees. In particular, families of
  mutually recursive datatypes have been excluded.
  .
  With the multirec library, we provide a mechanism to talk about fixed
  points of families of datatypes that may be mutually recursive. On top
  of this representations, generic functions such as the fold or the Zipper
  can then be defined.
  .
  We expect that the library will be especially interesting for compiler
  writers, because ASTs are typically families of mutually recursive datatypes,
  and with multirec it becomes easy to write generic functions on ASTs.
  .
  The library is based on ideas described in the paper:
  .
  *  Alexey Rodriguez, Stefan Holdermans, Andres Löh, Johan Jeuring.
     /Generic programming with fixed points for mutually recursive datatypes/.
     ICFP 2009.
 
stability:            experimental
build-type:           Simple
cabal-version:        >= 1.2.1
tested-with:          GHC == 6.8.3, GHC == 6.10.3, GHC == 6.12.1
hs-source-dirs:       src
exposed-modules:      Generics.MultiRec

                      -- Base
                      Generics.MultiRec.Base
                      Generics.MultiRec.Constructor
                      Generics.MultiRec.TH

                      -- Generic functions
                      Generics.MultiRec.ConNames
                      Generics.MultiRec.HFunctor
                      Generics.MultiRec.HFix
                      Generics.MultiRec.Fold
                      Generics.MultiRec.FoldK
                      Generics.MultiRec.FoldAlg
                      Generics.MultiRec.FoldAlgK
                      Generics.MultiRec.Compos
                      Generics.MultiRec.Eq
                      Generics.MultiRec.Show

                      -- Extra
                      Generics.MultiRec.TEq

extra-source-files:   examples/AST.hs
                      examples/ASTUse.hs
                      examples/ASTTHUse.hs
                      examples/ASTExamples.hs
                      examples/Single.hs
                      examples/SingleUse.hs
                      examples/SingleTHUse.hs
                      examples/SingleExamples.hs
                      CREDITS
build-depends:        base >= 3.0 && < 5, template-haskell >= 2.2 && < 2.5
