-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:c2832483f8326af9639bcc2cc09009b5
    SHA1:2ecd8fbb0cf59fe39b8b493e2e1d2d8f8c178ffc
    SHA256:54800909bd4e3868a42b0e11fd5a905c66c264f3c5dbe0864ae9005ac57ac278
    SHA512:88fc499165e3132a41630895f5238b6fab246494cda60a468b1cd09ff1206b919e14d1249a455a25b1ecd74bbf18a0a78e58149b72b4d61d66a7996330e8ee83
    Skein512_512:5838d6035692bce8772918d5fba99e8261b1d399ba53b31748f7ee11891f0cad5b349b54bd830c595fad5e1bd79c1a65a654375c3e187254d598a84db7c7a77a

package-locations:
    https://hackage.haskell.org/package/multirec-0.5.1/multirec-0.5.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/multirec-0.5.1.tar.gz

package-size: 15907
-- END Added by all-cabal-hashes-tool

name:                 multirec
version:              0.5.1
license:              BSD3
license-file:         LICENSE
author:               Alexey Rodriguez,
                      Stefan Holdermans,
                      Andres Löh,
                      Johan Jeuring
maintainer:           generics@haskell.org
category:             Generics
synopsis:             Generic programming for families of recursive datatypes
homepage:             http://www.cs.uu.nl/wiki/GenericProgramming/Multirec
description:
  Many generic programs require information about the recursive positions
  of a datatype. Examples include the generic fold, generic rewriting or
  the Zipper data structure. Several generic programming systems allow to
  write such functions by viewing datatypes as fixed points of a pattern
  functor. Traditionally, this view has been limited to so-called regular
  datatypes such as lists and binary trees. In particular, families of
  mutually recursive datatypes have been excluded.
  .
  With the multirec library, we provide a mechanism to talk about fixed
  points of families of datatypes that may be mutually recursive. On top
  of this representations, generic functions such as the fold or the Zipper
  can then be defined.
  .
  We expect that the library will be especially interesting for compiler
  writers, because ASTs are typically families of mutually recursive datatypes,
  and with multirec it becomes easy to write generic functions on ASTs.
  .
  The library is based on ideas described in the paper:
  .
  *  Alexey Rodriguez, Stefan Holdermans, Andres Löh, Johan Jeuring.
     /Generic programming with fixed points for mutually recursive datatypes/.
     ICFP 2009.
 
stability:            experimental
build-type:           Simple
cabal-version:        >= 1.2.1
tested-with:          GHC == 6.10.4, GHC == 7.0.1
extra-source-files:   examples/AST.hs
                      examples/ASTUse.hs
                      examples/ASTTHUse.hs
                      examples/ASTExamples.hs
                      examples/Single.hs
                      examples/SingleUse.hs
                      examples/SingleTHUse.hs
                      examples/SingleExamples.hs
                      CREDITS

library
  hs-source-dirs:     src
  exposed-modules:    Generics.MultiRec

                      -- Base
                      Generics.MultiRec.Base
                      Generics.MultiRec.Constructor
                      Generics.MultiRec.TH

                      -- Generic functions
                      Generics.MultiRec.ConNames
                      Generics.MultiRec.HFunctor
                      Generics.MultiRec.HFix
                      Generics.MultiRec.Fold
                      Generics.MultiRec.FoldK
                      Generics.MultiRec.FoldAlg
                      Generics.MultiRec.FoldAlgK
                      Generics.MultiRec.Compos
                      Generics.MultiRec.Eq
                      Generics.MultiRec.Read
                      Generics.MultiRec.Show

                      -- Extra
                      Generics.MultiRec.TEq

  build-depends:      base >= 3.0 && < 5, template-haskell >= 2.2 && < 2.7
