-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:f5131541ca71042068f3ae2fe538392b
    SHA1:b48cf11cee1ed1dbf5d6948c2fcfc134281c664c
    SHA256:5e45ddefafb13dfa44473f000fa737ea9ce557cb26891e9443d3baf7303629d8
    SHA512:8f1c09bdd8b5e924f259d3d464ff0913dc3d80fa2fb1876c8aefaf5c8e35cefeafae6868cd6c6e7174222813cde44c3a343d7e5a7477391498a2463f8623aa90
    Skein512_512:7605ee012ae527300ecb2f6d81c35be10506a9ded410c6ddb2cfb7659edac6205b49ee0bcbb7cfa7d6aaf1a68c00526b2d6e59b4af536c5240c4a024f51f64cb

package-locations:
    https://hackage.haskell.org/package/multirec-0.7/multirec-0.7.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/multirec-0.7.tar.gz

package-size: 17495
-- END Added by all-cabal-hashes-tool

name:                 multirec
version:              0.7
license:              BSD3
license-file:         LICENSE
author:               Alexey Rodriguez,
                      Stefan Holdermans,
                      Andres Löh,
                      Johan Jeuring
maintainer:           generics@haskell.org
category:             Generics
synopsis:             Generic programming for families of recursive datatypes
homepage:             http://www.cs.uu.nl/wiki/GenericProgramming/Multirec
bug-reports:          https://github.com/kosmikus/multirec/issues
description:
  Many generic programs require information about the recursive positions
  of a datatype. Examples include the generic fold, generic rewriting or
  the Zipper data structure. Several generic programming systems allow to
  write such functions by viewing datatypes as fixed points of a pattern
  functor. Traditionally, this view has been limited to so-called regular
  datatypes such as lists and binary trees. In particular, families of
  mutually recursive datatypes have been excluded.
  .
  With the multirec library, we provide a mechanism to talk about fixed
  points of families of datatypes that may be mutually recursive. On top
  of this representations, generic functions such as the fold or the Zipper
  can then be defined.
  .
  We expect that the library will be especially interesting for compiler
  writers, because ASTs are typically families of mutually recursive datatypes,
  and with multirec it becomes easy to write generic functions on ASTs.
  .
  The library is based on ideas described in the paper:
  .
  *  Alexey Rodriguez, Stefan Holdermans, Andres Löh, Johan Jeuring.
     /Generic programming with fixed points for mutually recursive datatypes/.
     ICFP 2009.
 
stability:            experimental
build-type:           Simple
cabal-version:        >= 1.6
tested-with:          GHC == 7.0.4
extra-source-files:   examples/AST.hs
                      examples/ASTUse.hs
                      examples/ASTTHUse.hs
                      examples/ASTExamples.hs
                      examples/Single.hs
                      examples/SingleUse.hs
                      examples/SingleTHUse.hs
                      examples/SingleExamples.hs
                      CREDITS

source-repository head
  type:               git
  location:           https://github.com/kosmikus/multirec

library
  hs-source-dirs:     src
  -- ghc-options:        -Wall -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-matches
  exposed-modules:    Generics.MultiRec

                      -- Base
                      Generics.MultiRec.Base
                      Generics.MultiRec.Constructor
                      Generics.MultiRec.TH

                      -- Generic functions
                      Generics.MultiRec.ConNames
                      Generics.MultiRec.HFunctor
                      Generics.MultiRec.HFix
                      Generics.MultiRec.Fold
                      Generics.MultiRec.FoldK
                      Generics.MultiRec.FoldAlg
                      Generics.MultiRec.FoldAlgK
                      Generics.MultiRec.Compos
                      Generics.MultiRec.Eq
                      Generics.MultiRec.Read
                      Generics.MultiRec.Show

                      -- Extra
                      Generics.MultiRec.TEq

  build-depends:      base >= 3.0 && < 5,
                      template-haskell >= 2.4 && < 2.7
