Name:          csound-expression
Version:       3.3.1
Cabal-Version: >= 1.6
License:       BSD3
License-file:  LICENSE
Author:	       Anton Kholomiov
Synopsis:      library to make electronic music
Stability:     Experimental
Tested-With:   GHC==7.6
Build-Type:    Simple
Category:      Music, Sound
Maintainer:    <anton.kholomiov@gmail.com>

Description:   
    Let's make music with text! We can use Csound to describe our music. Csound has so many fantastic sound generators.
    It's very efficient. But sometimes Csound is too low level. So many details: integer identifiers for instruments 
    and arrays, should I use control rate or audio rate signals, lack of abstractions, no nested expressions and it has limited set of types. 
    This library embeds Csound in Haskell. We can use powerful Csound's primitives and glue them
    together with Haskell abstractions. The module "Csound.Base" exports all types and functions.
    .
    Tutorials:
    .
    * Quickstart guide <http://github.com/anton-k/csound-expression/blob/master/tutorial/QuickStart.markdown>
    .
    * Overview of the library <http://github.com/anton-k/csound-expression/blob/master/tutorial/Overview.markdown>
    .
    * Introduction to Csound and library for Haskell users <http://github.com/anton-k/csound-expression/blob/master/tutorial/CsoundInstro.markdown>
    .
    * There are examples in the source code archive <http://github.com/anton-k/csound-expression/tree/master/examples>. 
    .
    Key principles
    .
    * Keep it simple and compact (as functional as possible).
    .
    * Make it open (No dependency on Score-generation libraries. Score (or list of events) 
    is represented with type class. You can use your favorite Score-generation library 
    if you provide an instance for the CsdSco type class. 
    Currently there is support for temporal-music-notation library (see temporal-csound package). 
    .
    How to install (for Csound and Haskell users)
    .
    To use the library we need:
    .
    *   GHC - haskell compiler. This library uses GHC-specific features (<www.haskell.org/ghc>).
    .
    *   cabal-install to install haskell packages (<www.haskell.org/cabal>).
    .
    *   Csound compiler (version 5.13 or higher). You must get it installed on your system.
    Since we are going to generate the csound code we need to compile it to sound somehow.
    We can find out how to install the Csound on <www.csounds.com>. 
    To test whether csound is installed open the command line and type:
    .
    > csound
    .
    It should print a long message with version and available flags and libraries.
    .
    If everything is installed to install the library we can open the command line terminal and type:
    .
    > cabal install csound-expression
    .
    Acknowledgements (I'd like to mention those who supported me a lot with their music and ideas):
    .
    * music: entertainment for the braindead, ann's'annat & alizbar, toe, iamthemorning, atoms for piece / radiohead, loscil, boards of canada,
    Hozan Yamamoto, Tony Scott and Shinichi Yuize. 
    .
    * ideas: Conal Elliott, Oleg Kiselyov, Paul Hudak, Gabriel Gonzalez, Rich Hickey and Csound's community.
    .
    WARNING: the library works best within ghci. The real-time sound rendering function dac spawns
    a child process in the background which may continue to execute after you stop the main process that runs the programm.
    It's not so in vim but it happens in the Sublime Editor and when you invoke runhaskell. So the best
    is to write you program in the separate file and then load it in the ghci and invoke the function main (which
    runs the sound rendering with the function dac). 
   
Extra-Source-Files : 
    examples/README.txt
    
    examples/Test.hs
    examples/Heartbeat.hs
    
    examples/Color.hs
    examples/Gm.hs
    examples/Tibetan.hs
    examples/Wind.hs

    examples/Midi.hs
    examples/Events.hs
    examples/DubBass.hs

    examples/Gui/Button.hs      
    examples/Gui/Envelope.hs  
    examples/Gui/Harmonics.hs  
    examples/Gui/Osc.hs
    examples/Gui/EnvelopeAndHarmonics.hs  
    examples/Gui/Filter.hs    
    examples/Gui/Key.hs        
    examples/Gui/Waves.hs

Homepage:        https://github.com/anton-k/csound-expression
Bug-Reports:     https://github.com/anton-k/csound-expression/issues

Source-repository head
    Type: git
    Location: https://github.com/anton-k/csound-expression


Library
  Ghc-Options:    -Wall
  Build-Depends:
        base >= 4, base < 5, process, data-default, Boolean >= 0.1.0,
        csound-expression-typed >= 0.0.5.1, csound-expression-opcodes
  Hs-Source-Dirs:      src/
  Exposed-Modules:
        Csound.Base

        Csound.Air

        Csound.Types
        Csound.Tab
        Csound.SigSpace
        Csound.IO
        Csound.Options

        Csound.Control
        Csound.Control.Evt
        Csound.Control.Instr
        Csound.Control.SE

        Csound.Control.Gui
        Csound.Control.Gui.Widget
        Csound.Control.Gui.Props
        Csound.Control.Gui.Layout

--        Csound.LowLevel
  Other-Modules:
        Csound.Control.Overload
        Csound.Control.Overload.Outs
        Csound.Control.Overload.MidiInstr
        Csound.Control.Overload.SpecInstr



package-hashes:
    MD5:7f2a8760f1bf52a6df201c6e58f1a60e
    SHA1:e47123c5e0f018d50358d5d4547ac4c363be741d
    SHA256:5be6c02f16abdd8d9263d667c8b2ff250d744d786dda9ae1bf9c94255a11895d
    SHA512:01b6a58d0d6ceae7bd6d6e78b052bb8e58b7747a21036b6fc526fdd94b6e61fa581142acb5a1067f029904b7cca8312df8e26e8e97b193986b51f6e70ec4c136
    Skein512_512:9fe0dd0ff1dca7528ab04d3ed4d446d5a1eb8ec7cfa4607f4e6c5bfe126418036063949c04bd04903ac49ef20aaaee7b3abed84f65d84d0f24eb99b39b479a8c

package-locations:
    https://hackage.haskell.org/package/csound-expression-3.3.1/csound-expression-3.3.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/csound-expression-3.3.1.tar.gz

package-size: 40841
