-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:e8b06f57216532c4d3d4093aeca32814
    SHA1:58606c415171e80b79ed3fc701dc576ac60cdd5c
    SHA256:1fe7f1d3655595fa76035f2847757aa1d2420af1481ef4b7be2a112854290a5b
    SHA512:eed8cd6376357fdf3ff9022e7d58cd9ff0d4c0aeab80b385b3e567d3c42b735acb6e3ae7d8c899e5a705148c533d694b09940e86734d92ef8287bd7647060c16
    Skein512_512:8a910e21c784d9db4befee58738d4a0e4f05a8f8f0ecfb498da595e4d43cdf24620b5e50d5a97bbb3b48ac8bb296a2d9883118b6e81c9f4fd61748e80f167520

x-package-locations:
    https://hackage.haskell.org/package/explicit-exception-0.1.0.1/explicit-exception-0.1.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/explicit-exception-0.1.0.1.tar.gz

x-package-size: 11098
-- END Added by all-cabal-hashes-tool

Name:             explicit-exception
Version:          0.1.0.1
License:          BSD3
License-File:     LICENSE
Author:           Henning Thielemann <haskell@henning-thielemann.de>
Maintainer:       Henning Thielemann <haskell@henning-thielemann.de>
Homepage:         http://www.haskell.org/haskellwiki/Exception
Category:         Control
Stability:        Experimental
Synopsis:         Exceptions which are explicit in the type signature.
Description:
   Synchronous and Asynchronous exceptions which are explicit in the type signature.
   The first ones are very similar to 'Either' and 'Control.Monad.Error.ErrorT'.
   The second ones are used for 'System.IO.readFile' and 'System.IO.hGetContents'.
   This package is a proposal for improved exception handling in Haskell.
   It strictly separates between handling of
   exceptional situations (file not found, invalid user input,
   see <http://www.haskell.org/haskellwiki/Exception>) and
   (programming) errors (division by zero, index out of range,
   see <http://www.haskell.org/haskellwiki/Error>).
   Handling of the first one is called \"exception handling\",
   whereas handling of errors is better known as \"debugging\".
   .
   For an application see the @midi@ package.
   .
   Although I'm not happy with the identifier style of the Monad Template Library
   (partially intended for unqualified use)
   I have tried to adopt it for this library,
   in order to let Haskell programmers get accustomed easily to it.
   .
   To do:
   Because many people requested it,
   we will provide a @bracket@ function that frees a resource
   both when an exception and an error occurs,
   that is, it combines exception handling and debugging.
   However note that freeing resources in case of an error is dangerous
   and may cause further damage.
Tested-With:       GHC==6.8.2
Cabal-Version:     >=1.6
Build-Type:        Simple

Source-Repository head
  type:     darcs
  location: http://code.haskell.org/explicit-exception/

Source-Repository this
  type:     darcs
  location: http://code.haskell.org/explicit-exception/
  tag:      0.1.0.1

Library
  Build-Depends: base >= 2, transformers >=0.0 && <0.2

  GHC-Options:      -Wall
  Hs-Source-Dirs:   src
  Exposed-Modules:
    Control.Monad.Exception.Asynchronous
    Control.Monad.Exception.Synchronous
  Other-Modules:
    Control.Monad.Exception.Warning
    Control.Monad.Exception.Label
    Control.Monad.Label
    System.IO.Straight
    System.IO.Exception.File
    System.IO.Exception.BinaryFile
    System.IO.Exception.TextFile
--    System.IO.Exception.Std
--    Debug.Error
