-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:7121d9f6a4ba68249246159d77a55394
    SHA1:c32fcce05a092e9eacc7caa460f06daa0023b840
    SHA256:95263b9f898e2f38bcb4ff9009e362f08864bfba41cae8db5eb13d34201a2ae5
    SHA512:e9650a49e7c995d54696d7af58c152c0e800234a7c6fee4b163eb5f30b28ad0fa1447eef0adb8e85eef69952a582ff67d79e4b0bfb7ae64bfa6c1e6fe37dd33b
    Skein512_512:e923b17115e1eeb94c67566cbc8c7d79915baba2b1d2251d63d6c086e970c5068808d391d8a4c10190cfbba2674ad9ce488cb65c52fa883a9d8d6876df430c55

x-package-locations:
    https://hackage.haskell.org/package/explicit-exception-0.1.2/explicit-exception-0.1.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/explicit-exception-0.1.2.tar.gz

x-package-size: 11730
-- END Added by all-cabal-hashes-tool

Name:             explicit-exception
Version:          0.1.2
License:          BSD3
License-File:     LICENSE
Author:           Henning Thielemann <haskell@henning-thielemann.de>
Maintainer:       Henning Thielemann <haskell@henning-thielemann.de>
Homepage:         http://www.haskell.org/haskellwiki/Exception
Category:         Control
Stability:        Experimental
Synopsis:         Exceptions which are explicit in the type signature.
Description:
   Synchronous and Asynchronous exceptions which are explicit in the type signature.
   The first ones are very similar to 'Either' and 'Control.Monad.Error.ErrorT'.
   The second ones are used for 'System.IO.readFile' and 'System.IO.hGetContents'.
   This package is a proposal for improved exception handling in Haskell.
   It strictly separates between handling of
   exceptional situations (file not found, invalid user input,
   see <http://www.haskell.org/haskellwiki/Exception>) and
   (programming) errors (division by zero, index out of range,
   see <http://www.haskell.org/haskellwiki/Error>).
   Handling of the first one is called \"exception handling\",
   whereas handling of errors is better known as \"debugging\".
   .
   For an application see the @midi@ package.
   .
   Although I'm not happy with the identifier style of the Monad Template Library
   (partially intended for unqualified use)
   I have tried to adopt it for this library,
   in order to let Haskell programmers get accustomed easily to it.
   .
   To do:
   Because many people requested it,
   we will provide a @bracket@ function that frees a resource
   both when an exception and an error occurs,
   that is, it combines exception handling and debugging.
   However note that freeing resources in case of an error is dangerous
   and may cause further damage.
Tested-With:       GHC==6.8.2
Cabal-Version:     >=1.6
Build-Type:        Simple

Source-Repository head
  type:     darcs
  location: http://code.haskell.org/explicit-exception/

Source-Repository this
  type:     darcs
  location: http://code.haskell.org/explicit-exception/
  tag:      0.1.2

Library
  Build-Depends: base >= 2, transformers >=0.0 && <0.2

  GHC-Options:      -Wall
  Hs-Source-Dirs:   src
  Exposed-Modules:
    Control.Monad.Exception.Asynchronous
    Control.Monad.Exception.Synchronous
  Other-Modules:
    Control.Monad.Exception.Warning
    Control.Monad.Exception.Label
    Control.Monad.Label
    System.IO.Straight
    System.IO.Exception.File
    System.IO.Exception.BinaryFile
    System.IO.Exception.TextFile
--    System.IO.Exception.Std
--    Debug.Error
