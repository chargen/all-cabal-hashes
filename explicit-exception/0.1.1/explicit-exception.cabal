-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:8225b7849d3de07fc90dfa5dc41cbff1
    SHA1:041e8c9fda4c6feac6554d2ea436a59a7f7863f0
    SHA256:85de6a81dba036d8070ce10a9e5eb896329182499a3eeb5507ce752fab3f00f3
    SHA512:0b3a13530a061b4baebecb17188f1d90c993b16e828218b1f677a535f25477b62fac913cae1004cff6001bd01f9002682bccb725e14a954b3cfec6f624e447e8
    Skein512_512:24fed32573a84b56dbf769a2a12b43155b35c1f3cb2c93baade48cacab7e274cdeb033810f2ccfd67c2aaf9b3875c7f558c309c7a6cf7cebf35664f160e4454c

package-locations:
    https://hackage.haskell.org/package/explicit-exception-0.1.1/explicit-exception-0.1.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/explicit-exception-0.1.1.tar.gz

package-size: 11599
-- END Added by all-cabal-hashes-tool

Name:             explicit-exception
Version:          0.1.1
License:          BSD3
License-File:     LICENSE
Author:           Henning Thielemann <haskell@henning-thielemann.de>
Maintainer:       Henning Thielemann <haskell@henning-thielemann.de>
Homepage:         http://www.haskell.org/haskellwiki/Exception
Category:         Control
Stability:        Experimental
Synopsis:         Exceptions which are explicit in the type signature.
Description:
   Synchronous and Asynchronous exceptions which are explicit in the type signature.
   The first ones are very similar to 'Either' and 'Control.Monad.Error.ErrorT'.
   The second ones are used for 'System.IO.readFile' and 'System.IO.hGetContents'.
   This package is a proposal for improved exception handling in Haskell.
   It strictly separates between handling of
   exceptional situations (file not found, invalid user input,
   see <http://www.haskell.org/haskellwiki/Exception>) and
   (programming) errors (division by zero, index out of range,
   see <http://www.haskell.org/haskellwiki/Error>).
   Handling of the first one is called \"exception handling\",
   whereas handling of errors is better known as \"debugging\".
   .
   For an application see the @midi@ package.
   .
   Although I'm not happy with the identifier style of the Monad Template Library
   (partially intended for unqualified use)
   I have tried to adopt it for this library,
   in order to let Haskell programmers get accustomed easily to it.
   .
   To do:
   Because many people requested it,
   we will provide a @bracket@ function that frees a resource
   both when an exception and an error occurs,
   that is, it combines exception handling and debugging.
   However note that freeing resources in case of an error is dangerous
   and may cause further damage.
Tested-With:       GHC==6.8.2
Cabal-Version:     >=1.6
Build-Type:        Simple

Source-Repository head
  type:     darcs
  location: http://code.haskell.org/explicit-exception/

Source-Repository this
  type:     darcs
  location: http://code.haskell.org/explicit-exception/
  tag:      0.1.1

Library
  Build-Depends: base >= 2, transformers >=0.0 && <0.2

  GHC-Options:      -Wall
  Hs-Source-Dirs:   src
  Exposed-Modules:
    Control.Monad.Exception.Asynchronous
    Control.Monad.Exception.Synchronous
  Other-Modules:
    Control.Monad.Exception.Warning
    Control.Monad.Exception.Label
    Control.Monad.Label
    System.IO.Straight
    System.IO.Exception.File
    System.IO.Exception.BinaryFile
    System.IO.Exception.TextFile
--    System.IO.Exception.Std
--    Debug.Error
