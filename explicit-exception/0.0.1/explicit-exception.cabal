-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:cdad786bdd38f5e90d4fe9d4e92d9ed4
    SHA1:56a0e3b1f876b7d005ee160490d80e9d6f9527a6
    SHA256:60def365a904cf071f417a710d5005b070c833c7b4f53ea194e6801a9035081a
    SHA512:165c38a84f55367bf582ef04952322779b88b56138231d9c037012ff975031c924ab1b8ef4a33abb71295fb8fdcb50071d1077f035feb5801b43f7b64388e48d
    Skein512_512:4ed89df4e5764e5112440859e9a384bc63f815b4a3a184b26e5efb17e76553800e11d608d9fbe1f6e64b1afc3c978acc7be01180139faaa0f81cc845b19bf777

package-locations:
    https://hackage.haskell.org/package/explicit-exception-0.0.1/explicit-exception-0.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/explicit-exception-0.0.1.tar.gz

package-size: 9701
-- END Added by all-cabal-hashes-tool

Name:             explicit-exception
Version:          0.0.1
License:          BSD3
License-File:     LICENSE
Author:           Henning Thielemann <haskell@henning-thielemann.de>
Maintainer:       Henning Thielemann <haskell@henning-thielemann.de>
Homepage:         http://www.haskell.org/haskellwiki/Exception
Package-URL:      http://code.haskell.org/explicit-exception/
Category:         Control
Stability:        Experimental
Synopsis:         Exceptions which are explicit in the type signature.
Description:
   Synchronous and Asynchronous exceptions which are explicit in the type signature.
   The first ones are very similar to 'Either' and 'Control.Monad.Error.ErrorT'.
   The second ones are used for 'System.IO.readFile' and 'System.IO.hGetContents'.
   This package is a proposal for improved exception handling in Haskell.
   It strictly separates between handling of
   exceptional situations (file not found, invalid user input,
   see <http://www.haskell.org/haskellwiki/Exception>) and
   (programming) errors (division by zero, index out of range,
   see <http://www.haskell.org/haskellwiki/Error>).
   Handling of the first one is called \"exception handling\",
   whereas handling of errors is better known as \"debugging\".
   .
   For an application see the @midi@ package.
   .
   Although I'm not happy with the identifier style of the Monad Template Library
   (partially intended for unqualified use)
   I have tried to adopt it for this library,
   in order to let Haskell programmers get accustomed easily to it.
   .
   To do:
   Because many people requested it,
   we will provide a @bracket@ function that frees a resource
   both when an exception and an error occurs,
   that is, it combines exception handling and debugging.
   However note that freeing resources in case of an error is dangerous
   and may cause further damage.
Tested-With:       GHC==6.8.2
Cabal-Version:     >=1.2
Build-Type:        Simple

Library
  Build-Depends: base >= 2, mtl

  GHC-Options:      -Wall
  Hs-Source-Dirs:   src
  Exposed-Modules:
    Control.Monad.Exception.Asynchronous
    Control.Monad.Exception.Synchronous
  Other-Modules:
    Control.Monad.Exception.Warning
    Control.Monad.Exception.Label
    Control.Monad.Label
    System.IO.Straight
    System.IO.Exception.File
    System.IO.Exception.BinaryFile
    System.IO.Exception.TextFile
--    System.IO.Exception.Std
--    Debug.Error
