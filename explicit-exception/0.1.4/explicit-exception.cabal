-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:331a215c0ebbb08524b95aaf59443ac1
    SHA1:ac75ca68f0a15f7852510a4ba5fc906111b7d24e
    SHA256:afdf2ecdee003e1dcbb7ded3dc021b09c59dd362d0272cd6fe0609a6aa81d670
    SHA512:4a92df72a467823d8811cab40e7af92443b40ec360f5fe5cafb63f8d2492a1b3a5aab02d9be2a8bc13d9b103e63782500c082b95bb91f9327c8702fd49791032
    Skein512_512:86f051b534fd2a8a6671f4b95dd6ab5bc64e8d6b2108c90bfc1dd9dc7719cf5c55c0191fa9e27c091b621992913fe8e8aa56458b50d14efc0f061787e876983b

package-locations:
    https://hackage.haskell.org/package/explicit-exception-0.1.4/explicit-exception-0.1.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/explicit-exception-0.1.4.tar.gz

package-size: 13362
-- END Added by all-cabal-hashes-tool

Name:             explicit-exception
Version:          0.1.4
License:          BSD3
License-File:     LICENSE
Author:           Henning Thielemann <haskell@henning-thielemann.de>
Maintainer:       Henning Thielemann <haskell@henning-thielemann.de>
Homepage:         http://www.haskell.org/haskellwiki/Exception
Category:         Control
Stability:        Experimental
Synopsis:         Exceptions which are explicit in the type signature.
Description:
   Synchronous and Asynchronous exceptions which are explicit in the type signature.
   The first ones are very similar to 'Either' and 'Control.Monad.Error.ErrorT'.
   The second ones are used for 'System.IO.readFile' and 'System.IO.hGetContents'.
   This package is a proposal for improved exception handling in Haskell.
   It strictly separates between handling of
   exceptional situations (file not found, invalid user input,
   see <http://www.haskell.org/haskellwiki/Exception>) and
   (programming) errors (division by zero, index out of range,
   see <http://www.haskell.org/haskellwiki/Error>).
   Handling of the first one is called \"exception handling\",
   whereas handling of errors is better known as \"debugging\".
   .
   For applications see the packages @midi@, @spreadsheet@, @http-monad@.
   .
   Although I'm not happy with the identifier style of the Monad Transformer Library
   (partially intended for unqualified use)
   I have tried to adopt it for this library,
   in order to let Haskell programmers get accustomed easily to it.
   .
   To do:
   Because many people requested it,
   we will provide a @bracket@ function that frees a resource
   both when an exception and an error occurs,
   that is, it combines exception handling and debugging.
   However note that freeing resources in case of an error is dangerous
   and may cause further damage.
Tested-With:       GHC==6.8.2
Cabal-Version:     >=1.6
Build-Type:        Simple

Source-Repository head
  type:     darcs
  location: http://code.haskell.org/explicit-exception/

Source-Repository this
  type:     darcs
  location: http://code.haskell.org/explicit-exception/
  tag:      0.1.4

Library
  Build-Depends: base >= 2, transformers >=0.0 && <0.2

  GHC-Options:      -Wall
  Hs-Source-Dirs:   src
  Exposed-Modules:
    Control.Monad.Exception.Asynchronous
    Control.Monad.Exception.Synchronous
  Other-Modules:
    Control.Monad.Exception.Warning
    Control.Monad.Exception.Label
    Control.Monad.Label
    System.IO.Straight
    System.IO.Exception.File
    System.IO.Exception.BinaryFile
    System.IO.Exception.TextFile
--    System.IO.Exception.Std
--    Debug.Error
