name:            directory-tree
version:         0.1.2
homepage:        http://coder.bsimmons.name/blog/2009/05/directory-tree-module-released/
synopsis:        A simple directory-like tree datatype, with useful IO functions 
description:     A simple directory-like tree datatype, with useful IO functions and Foldable and Traversable instance  
 .
 Provides a simple data structure mirroring a directory tree on the 
 filesystem, as well as useful functions for reading and writing 
 file and directory structures in the IO monad.
 .
 Importing the library and optional (useful) Foldable and Traverable libraries:
 .
 > import System.Directory.Tree
 > import qualified Data.Foldable as F
 > import qualified Data.Traversable as T
 .
 Write a hand-made directory tree of textfiles (strings) to the disk. 
 Simulates creating a new user Tux's home directory on a unix machine:
 .
 > writeDirectory$ "/home" :/ Dir "Tux" [File "README" "Welcome!"]
 .
 "read" a directory by opening all the files at a filepath with readFile,
 returning an 'AnchoredDirTree String' (d2). Then check for any IO failures:
 .
 > do (base :/ d2) <- readDirectory "../parent_dir/dir2/"
 >    let failed = anyFailed d2
 >    if failed then ...
 .
 Use Foldable instance function to concat a directory 'dir' of text files into a
 single file under the same directory:
 .
 > do (b :/ dt) <- readDirectory dir
 >    let f = F.concat dt
 >    return$ b :/ File "ALL_TEXT" f
 .
 Open all the files in the current directory as lazy bytestrings, ignoring 
 the base path in Anchored wrapper:
 .
 > import qualified Data.ByteString.Lazy as B
 > do (_ :/ dTree) <- readDirectoryWith B.readFile "./"     
 .
 Please send me any comments, requests or bug reports
 .
 
category:        Data, System
license:         BSD3
license-file:    LICENSE
copyright:       (c) 2009, Brandon Simmons <brandon.m.simmons@gmail.com>
author:          Brandon Simmons
maintainer:      Brandon Simmons <brandon.m.simmons@gmail.com>
cabal-version:   >= 1.2.0
build-type:      Simple
tested-with:     GHC ==6.8.2
extra-source-files: examples.hs


library
    exposed-modules: System.Directory.Tree
    build-depends: base <4, filepath, directory
    ghc-options:       -Wall


package-hashes:
    MD5:61d1603c1dd432167131de72e22dfdae
    SHA1:87442a278642fc643bbf3d33978697f3c96cb3f3
    SHA256:ceef3ce5e242041d8e79fda9daa9ce8b6861d619bac2d07d2b963f18e91021a0
    SHA512:f217859a634d620c718a142144620e74aa2794868f838447a1a6dfdf4279c9576621b1737b4fc0347194d7ba923fefc452edea75269532bd417932363a55cb8b
    Skein512_512:a834bb596f018ec690e97d40a1d2150c18db2889aa0d5d153b17ea2f7cc5b52be8a1d7ec33031645c1160d3db724fbeb264bd2d5c8521f5c118f109b331be999

package-locations:
    https://hackage.haskell.org/package/directory-tree-0.1.2/directory-tree-0.1.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/directory-tree-0.1.2.tar.gz

package-size: 5630
