name:            directory-tree
version:         0.11.0
homepage:        http://brandon.si/code/directory-tree-module-released/
synopsis:        A simple directory-like tree datatype, with useful IO functions 
description:     A simple directory-like tree datatype, with useful IO functions and Foldable and Traversable instance  
 .
 Provides a simple data structure mirroring a directory tree on the 
 filesystem, as well as useful functions for reading and writing 
 file and directory structures in the IO monad.
 .
 Importing the library and optional (useful) Foldable and Traverable libraries:
 .
 > import System.Directory.Tree
 > import qualified Data.Foldable as F
 > import qualified Data.Traversable as T
 .
 Write a hand-made directory tree of textfiles (strings) to the disk. 
 Simulates creating a new user Tux's home directory on a unix machine:
 .
 > writeDirectory$ "/home" :/ Dir "Tux" [File "README" "Welcome!"]
 .
 "read" a directory by opening all the files at a filepath with readFile,
 returning an 'AnchoredDirTree String' (d2). Then check for any IO failures:
 .
 > do (base :/ d2) <- readDirectory "../parent_dir/dir2/"
 >    let failed = anyFailed d2
 >    if failed then ...
 .
 Use Foldable instance function to concat a directory 'dir' of text files into a
 single file under the same directory:
 .
 > do (b :/ dt) <- readDirectory dir
 >    let f = F.concat dt
 >    return$ b :/ File "ALL_TEXT" f
 .
 Open all the files in the current directory as lazy bytestrings, ignoring 
 the base path in Anchored wrapper:
 .
 > import qualified Data.ByteString.Lazy as B
 > do (_ :/ dTree) <- readDirectoryWith B.readFile "./"     
 .
 This version also offers an experimental function `readDirectoryWithL` that does
 lazy directory IO, allowing you to treat the returned `DirTree` as if it were a
 normal lazily-generated data structure.
 .
 For example, the following does only the amount of IO necessary to list the file
 names of the children of the root directory, similar to "ls /":
 .
 > do d <- readDirectoryWithL readFile "/"
 >    mapM_ (putStrLn . name) $ contents $ free d
 . 
 Any ideas or suggestions for improvements are most welcome :-)
 .
 /CHANGES/: from 0.10.1
 .
 - added records for AnchoredDirTree: 'anchor', 'dirTree'
 .
 - 'free' deprecated in favor of 'dirTree' 
 .
 - added a new function 'dropTo'
 .
 - implemented lenses compatible with "lens" package
 .
 
category:        Data, System
license:         BSD3
license-file:    LICENSE
copyright:       (c) 2011, Brandon Simmons <brandon.m.simmons@gmail.com>
author:          Brandon Simmons
maintainer:      Brandon Simmons <brandon.m.simmons@gmail.com>
cabal-version:   >= 1.6
build-type:      Simple
tested-with:     GHC <=7.4.1
extra-source-files: EXAMPLES/Examples.hs, EXAMPLES/LazyExamples.hs

source-repository head   
    type:     git
    location: https://github.com/jberryman/directory-tree.git

library
    exposed-modules: System.Directory.Tree
    build-depends: base <5, filepath <2, directory <2
    ghc-options:       -Wall


package-hashes:
    MD5:129ebd9b7bbc6d617d9db0f4bdb5de21
    SHA1:5fef39f812898c1290a8e8d5387f3cf237df0697
    SHA256:890570cfe689d8925355944c5281a50eefef1395a5834219a75b3abebee5781f
    SHA512:a07227573fa971fb9d0f2dfb1c4dde32725aa237836c7669303c19e07fc2c216dce367eef897c09a04c6664a9333ee330c38825f1ca08c8a14c118fa268b90db
    Skein512_512:b283df0f1720c18ed3fc37c0c650dac859f419b5c2b6e758c9e43284b250385e365fd02e9182cdf18da66549669ed1c637dc8b60506f165c285a5d34fc4a9d5d

package-locations:
    https://hackage.haskell.org/package/directory-tree-0.11.0/directory-tree-0.11.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/directory-tree-0.11.0.tar.gz

package-size: 10645
