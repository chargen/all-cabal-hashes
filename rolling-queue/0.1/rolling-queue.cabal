-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:c0b326f61636337ca97f70ac1ef70e99
    SHA1:d560c05f2adbe5df28a95d694d60f9c91fe6f136
    SHA256:833002bed0e6bc95814ab550326a9d981c3810b4f9611e115968d88b306d69d0
    SHA512:12bb3ec501ac787e6d283c39666bc6f01ba1cffead1a7f6e7cd430727db7c77f81d65eb362696d008e29f11559b239a57cf834aeac03a6e664f0c9b977b4155b
    Skein512_512:b3071c84d136e36462ae4807c08a839bce1a27eea428e225e6cda532ebc8e30dfab5e109cff3f56b020af3e16a14e5bb7101a82b80421d221ad8fb6599ca3e84

package-locations:
    https://hackage.haskell.org/package/rolling-queue-0.1/rolling-queue-0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/rolling-queue-0.1.tar.gz

package-size: 6023
-- END Added by all-cabal-hashes-tool

name:                rolling-queue
version:             0.1
synopsis:            Bounded channel for STM that discards old entries when full
description:
    This package provides a FIFO channel for STM supporting a size limit.  When
    this limit is reached, older entries are discarded to make way for newer
    entries.
    .
    The motivation for this is logging.  If log entries are written to a plain
    @TChan@, the program will use a lot of memory if it produces log entries
    faster than they can be processed.  If log entries are written to a bounded
    channel where writes block (e.g. the @stm-chans@ package), the program may
    deadlock if the log channel fills up.  With 'Data.STM.RollingQueue', old
    entries will be discarded instead.
    .
    Possible improvements (not available in 'Data.STM.RollingQueue') include:
    .
        * Discard lower-priority entries first.
    .
        * Discard every other entry, so some of the older entries will still be
          available.
homepage:            https://github.com/joeyadams/haskell-rolling-queue
license:             BSD3
license-file:        LICENSE
author:              Joey Adams
maintainer:          joeyadams3.14159@gmail.com
copyright:           Copyright (c) Joseph Adams 2012
category:            Data
build-type:          Simple
cabal-version:       >=1.8

extra-source-files:
    testing/trivial.hs
    testing/trivial.expected

source-repository head
    type:       git
    location:   git://github.com/joeyadams/haskell-rolling-queue.git

library
    exposed-modules:
        Data.STM.RollingQueue

    build-depends: base == 4.*
                 , stm

    ghc-options: -Wall -O2
