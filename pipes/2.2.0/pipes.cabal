Name: pipes
Version: 2.2.0
Cabal-Version: >=1.14.0
Build-Type: Simple
License: BSD3
License-File: LICENSE
Copyright: 2012 Gabriel Gonzalez
Author: Gabriel Gonzalez
Maintainer: Gabriel439@gmail.com
Stability: Experimental
Bug-Reports: https://github.com/Gabriel439/Haskell-Pipes-Library/issues
Synopsis: Compositional pipelines
Description:
  \"Iteratees done right\".  This library implements
  iteratees\/enumerators\/enumeratees simply and elegantly, using different
  naming conventions.
  .
  Advantages over traditional iteratee implementations:
  .
  * /Simpler semantics/: There is only one data type ('Pipe'), two primitives
    ('await' and 'yield'), and only one way to compose 'Pipe's ('.').  In fact,
    this library implements its entire behavior using its 'Monad' and 'Category'
    instances and enforces their laws strictly!
  .
  * /Clearer naming conventions/: Enumeratees are called 'Pipe's, Enumerators
    are 'Producer's, and Iteratees are 'Consumer's.  'Producer's and 'Consumer's
    are just type synonyms for 'Pipe's with either the input or output end
    closed.
  .
  * /Pipes are Categories/: You compose them using ordinary composition.
  .
  * /Intuitive/: Pipe composition is easier to reason about because it is a true
    'Category'.  Composition works seamlessly and you don't have to worry about
    restarting iteratees, feeding new input, etc.  \"It just works\".
  .
  * /"Vertical" concatenation works flawlessly on everything/: ('>>')
    concatenates 'Pipe's, but since everything is a 'Pipe', you can use it to
    concatenate 'Producer's, 'Consumer's, and even intermediate 'Pipe' stages.
    Vertical Concatenation always works the way you expect, picking up where the
    previous 'Pipe' left off.
  .
  Check out "Control.Pipe.Tutorial" for a copious introductory tutorial and
  "Control.Pipe" for the actual implementation.
Category: Control, Enumerator
Tested-With: GHC ==7.4.1
Source-Repository head
    Type: git
    Location: https://github.com/Gabriel439/Haskell-Pipes-Library

Library
    Build-Depends:
        base >= 4 && < 5,
        index-core,
        transformers,
        transformers-free,
        void
    Exposed-Modules:
        Control.Frame,
        Control.Frame.Tutorial,
        Control.IMonad.Trans.Free,
        Control.Pipe,
        Control.Pipe.Tutorial
    GHC-Options: -O2
    Default-Language: Haskell2010


package-hashes:
    MD5:254a84d9252e63b13756abc9e1f49a26
    SHA1:b125d1a289fbc14a828c9fb932538c5be82c1af5
    SHA256:7f00e69e1ee8cf43669aed81278c2f8e3257fb19781fa67d6f63239be1db4b77
    SHA512:380dfb4190167a69919f88aba6cb0a1448e34c255b41a4e7283bbdf2bfab8f9642df9204ece43d42d29ed9aea8030d33ccc60d561a5553f06a9bc0deaf9c3470
    Skein512_512:bc98a9fd8f99df8c5545fef88956c45752c28b37b4b10e9f61359f2396acf7865ff88744fb766383a57ce69d1377d2881bd58e3f1f2e699ae26d5f69b26868ae

package-locations:
    https://hackage.haskell.org/package/pipes-2.2.0/pipes-2.2.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/pipes-2.2.0.tar.gz

