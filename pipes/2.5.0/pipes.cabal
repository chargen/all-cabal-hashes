-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:61d1e1633015a4bdd374367c1850ad8c
    SHA1:1d897e42d85661547becce404313a80e27cd7c29
    SHA256:dee58f9e1092bdfc1b6f3aaa8bcbbaedb0eb2697c2d3f3487a7278a7b6148667
    SHA512:8ba8f32b8e8881ac70bda673deec9bd5c51dfb1925b9ed9c6828a0944c6b5fad0cf95a0329d0ecbad28f29b1069da58c6f94158ea10b84b33921a7e1b3271323
    Skein512_512:12f0b4ac4444c84ea7418608c177b83f8bd81b8535026981843a57ccd985c251911256d8a8ea0a3b677ea8979b869f7cd833c6bfd0cb46873bacfd3c513c449f

package-locations:
    https://hackage.haskell.org/package/pipes-2.5.0/pipes-2.5.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/pipes-2.5.0.tar.gz

package-size: 39793
-- END Added by all-cabal-hashes-tool

Name: pipes
Version: 2.5.0
Cabal-Version: >=1.14.0
Build-Type: Simple
License: BSD3
License-File: LICENSE
Copyright: 2012 Gabriel Gonzalez
Author: Gabriel Gonzalez
Maintainer: Gabriel439@gmail.com
Stability: Experimental
Bug-Reports: https://github.com/Gabriel439/Haskell-Pipes-Library/issues
Synopsis: Compositional pipelines
Description:
  \"Iteratees done right\".  This library implements
  iteratees\/enumerators\/enumeratees simply and elegantly, using different
  naming conventions.
  .
  Advantages over traditional iteratee implementations:
  .
  * /Concise API/: This library uses a few simple abstractions with a very high
    power-to-weight ratio to reduce adoption time.
  .
  * /Bidirectionality/: The library offers bidirectional communication
  .
  * /Blazing fast/: Currently the fastest iteratee implementation
  .
  * /Clear semantics/: All abstractions are grounded in category theory, which
    leads to intuitive behavior (and fewer bugs, if any!).
  .
  * /Extension Framework/: You can elegantly mix and match extensions to the
    base type and easily create your own!
  .
  * /Extensive Documentation/: Second to none!
  .
  I recommend you begin by reading "Control.Pipe.Tutorial" which introduces the
  basic concepts using the simpler unidirectional 'Pipe' API.  Then move on to
  "Control.Proxy.Tutorial", which introduces the 'Proxy' type which forms the
  core abstraction of this library.  To use extensions or define your own, check
  out "Control.Proxy.Trans.Tutorial".
  .
  I will soon replace "Control.Frame" with a superior resource-management
  solution, so new users of the library should avoid using it.
Category: Control, Pipe, Proxies
Tested-With: GHC ==7.4.1
Source-Repository head
    Type: git
    Location: https://github.com/Gabriel439/Haskell-Pipes-Library

Library
    Build-Depends:
        base >= 4 && < 5,
        index-core,
        transformers >= 0.2.0.0
    Exposed-Modules:
        Control.Frame,
        Control.Frame.Tutorial,
        Control.IMonad.Trans.Free,
        Control.MFunctor,
        Control.Proxy,
        Control.Proxy.Core,
        Control.Proxy.Class,
        Control.Proxy.Pipe,
        Control.Proxy.Trans,
        Control.Proxy.Trans.Either,
        Control.Proxy.Trans.Identity,
        Control.Proxy.Trans.Maybe,
        Control.Proxy.Trans.Reader,
        Control.Proxy.Trans.State,
        Control.Proxy.Trans.Tutorial,
        Control.Proxy.Trans.Writer,
        Control.Proxy.Tutorial,
        Control.Proxy.Prelude,
        Control.Proxy.Prelude.Base,
        Control.Proxy.Prelude.IO,
        Control.Proxy.Prelude.Kleisli,
        Control.Pipe,
        Control.Pipe.Core,
        Control.Pipe.Tutorial,
        Data.Closed
    Default-Language: Haskell98
