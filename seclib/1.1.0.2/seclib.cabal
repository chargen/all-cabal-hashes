-- Initial secio.cabal generated by cabal init.  For further documentation,
--  see http://haskell.org/cabal/users-guide/

name:                seclib
version:             1.1.0.2
-- synopsis:
license:             BSD3
license-file:        LICENSE
author:              Alejandro Russo
maintainer:          russo@chalmers.se
-- copyright:           Copyright:      (c) 2014 Alejandro Russo, Koen Claessen, John Hughes
category:            Security
synopsis:            A simple library for static information-flow security in Haskell
build-type:          Simple
cabal-version:       >=1.8

description:
  This package presents a static library to enforce
  /Information-Flow Control/ (IFC) in Haskell.
  IFC allows untrusted code to manipulate sensitive
  data (i.e., secret information), while preserving its confidentiality.

  .

  To illustrate the use case scenario for /SecLib/, let us consider two Haskell
  programmers , Alice and Bob, who do not trust each other. Image that Alice
  wishes to use Bob's code to check the strength of Alice's sensitive passwords.
  Clearly, Alice is concern that the passwords could be leaked if they are run
  with Bob's code. How could Alice be sure that Bob's code will preserve the
  confidentiality of Alice's password? One option is to do code review---a very
  time consuming approach. Instead, Alice demands that Bob's code uses the
  security monads provided by this library (i.e., 'Sec' and 'SecIO'). Now, Alice
  only requires, by using the type-system, that Bob's code is written using such
  monads. Importantly, Alice needs to use Safe Haskell to compile Bob's
  untrusted code using the flags @-XSafe@. This package provides the files
  @Alice.hs@ and @Bob.hs@. The former calls into functions provided by the
  latter and the library guarantees that secrets are not unintentionally or
  maliciously leaked.

  .

  The library is a modern and simplified version (updated to exploit the last
  GHC type-system features) of the work presented in
  /A Library for Light-weight Information-Flow Security in Haskell/ by
  Alejandro Russo, Koen Claessen and
  John Hughes. In Proc. of the ACM SIGPLAN 2008 Haskell Symposium. With respect
  to the version 1.0.0.0, this version has less side-effectful features (e.g.,
  no secure file handlers and sockets) as well as declassification combinators. However,
  it presents a simpler and more intuitive interface which can be easily
  extended to cover a rich-set of side-effects.


extra-source-files:
     Examples/Alice.hs, Examples/Bob.hs


library
  build-depends:       base ==4.7.*

  include-dirs: SecLib/TCB

  exposed-modules:
       SecLib.Lattice
       SecLib.Sec
       SecLib.SecIO
       SecLib.Ref
       SecLib.Reveal
       SecLib.LowHigh
       -- * Internals
       SecLib.TCB.Sec
       SecLib.TCB.SecIO
       SecLib.TCB.Lattice
       SecLib.TCB.Ref

source-repository this 
  type:     git
  location: https://russo@bitbucket.org/russo/seclib.git
  tag: release-1.1.0.2


package-hashes:
    MD5:ae8548721041d2415f9f12eacf738a24
    SHA1:61f4aee8f0f356c1ec5543698a006d91a6278d99
    SHA256:dc22bdb13cf11fa9594f324be5bccbdf5ab6f2699b2e0dec60460458476b6f49
    SHA512:ee2fbc54aa67f5b7cc7d30634c0c2ccae5ede110a6e68abd4dc64eb6b6d015f860fffcb7217510745597889093224ccac2e2a4e3c22a5816919e3a9419d8caab
    Skein512_512:dfd787b512687937a72544e118b37fb498b9edbb5c613625ba051f989ec2eb6ff31097c01526355fc956830e760d755ff5f70eb1ffbd8ad7536e46d1f7059d00

package-locations:
    https://hackage.haskell.org/package/seclib-1.1.0.2/seclib-1.1.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/seclib-1.1.0.2.tar.gz

package-size: 6966
