-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:db31b70a2b8658bed73cf82a813be51e
    SHA1:40609210a66e49db277326493b0cf097240ea694
    SHA256:73815ef9d5fada9b394a9beb47f1fb78169f78a6d44c0e9ce01dfa6945dda79d
    SHA512:8c18bf5166d714f9f9b55597efccad01e78aaea212103e90778b11cad11427a1557e4732ec97c50030452415f549411ac4f9b6179d2f88de18ed7641d604ff9b
    Skein512_512:7e824068a8c3962cb4b8aa5566c4611448f17e0fcd5b558c27d676100b822ebb12c6a89ea198e61926bb2c01a01658021fe0485403292f0cda75fe2bff5178c5

x-package-locations:
    https://hackage.haskell.org/package/enumeration-0.1.0/enumeration-0.1.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/enumeration-0.1.0.tar.gz

x-package-size: 8952
-- END Added by all-cabal-hashes-tool

Name:                   enumeration
Category:               Data, Serialization, Test, Testing
Version:                0.1.0
License:                BSD3
License-File:           LICENSE
Author:                 Eric McCorkle
Maintainer:             Eric McCorkle <emc2@metricspace.net>
Stability:              Beta
Synopsis:               A practical API for building recursive enumeration
                        procedures and enumerating datatypes.
Homepage:               https://github.com/emc2/enumeration
Bug-Reports:            https://github.com/emc2/enumeration/issues
Copyright:              Copyright (c) 2014 Eric McCorkle.  All rights reserved.
Description:
  A library providing tools for building enumeration procedures for recursively-
  enumerable datatypes.  This is built atop the arith-encode library, and makes
  use of the natural number isomorphisms it provides to represent individual
  decisions in the enumeration procedure.  As such, each enumeration result is
  denoted by a unique path, consisting of a sequence of natural numbers.  An
  enumeration procedure is simply a (partial) mapping between sequences
  and a given datatype.
  .
  The library provides functionality for constructing enumeration procedures,
  as well as facilities for performing enumeration according to various search
  strategies (depth-first, breadth-first, etc).  These procedures can also be
  "warm-started" using a path or a set of paths.  Obvious applications include
  exhaustive search, testing, automated proving, and others.
  .
  Additionally, as a path is simply a sequence of natural numbers, an
  enumeration procedure can double as a binary serializer/deserializer.  For
  well-behaved enumeration procedures (ie. those where the mapping is an
  isomorphism), the resulting binary format should be very nearly succinct.
  .
  This is the first release candidate for 1.0 (initial release)
Build-type:             Simple
Cabal-version:          >= 1.16

Source-Repository head
  Type: git
  Location: git@github.com:emc2/enumeration.git

Test-Suite UnitTest
  default-language:     Haskell2010
  type:                 exitcode-stdio-1.0
  Main-Is:              UnitTest.hs
  hs-source-dirs:       src test
  build-depends:        base >= 4.4.0 && < 5, Cabal >= 1.16.0, HUnit-Plus, arith-encode,
                        containers, binary, arithmoi, heap
  ghc-options:          -fhpc

Library
  default-language:     Haskell2010
  hs-source-dirs:       src
  build-depends:        base >= 4.4.0 && < 5, Cabal >= 1.16.0, containers, arith-encode,
                        binary, arithmoi, heap
  exposed-modules:      Data.Enumeration
                        Data.Enumeration.Binary
                        Data.Enumeration.Traversal
  other-modules:
                        Data.Enumeration.Traversal.Class
