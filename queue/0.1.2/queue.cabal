-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:ab126c9a9786e84620e309fb4672fe22
    SHA1:57cfa1b3487783f1fbc31e0946c51857e81b75e3
    SHA256:c799ec386f79c4b3ab0c81feabe5335f7808044c0a525340e3c26b21e7d6a23b
    SHA512:44cc8da68b9b686c08d8b0dfce34f8039d175f3bc6e1744f57e59405f8c4e2ba84e0e08c116d9763d82a6520b19512230756366e21bb72e40fd2b662b5b060ae
    Skein512_512:9f8b0c52fa7bb8f8a403125a39c113b7241d689df9ff4870e155f567a97e602081a9f85acbe1e2b47b3c6498ff065358980c4992a91150ab89292a5706158041

package-locations:
    https://hackage.haskell.org/package/queue-0.1.2/queue-0.1.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/queue-0.1.2.tar.gz

package-size: 3607
-- END Added by all-cabal-hashes-tool

name:                   queue
version:                0.1.2
stability:              provisional
license:                BSD3
license-file:           LICENSE

cabal-version:          >= 1.2
build-type:             Simple

author:                 James Cook <mokus@deepbondi.net>
maintainer:             James Cook <mokus@deepbondi.net>
homepage:               http://code.haskell.org/~mokus/queue

category:               Data
synopsis:               Abstraction typeclasses for queue-like things.
description:            A collection of abstract interfaces to mutable
                        queue-like things.
                        
                        Note that I named this module before I realized that
                        there was a module of the same name in (base<3).  I
                        am open to suggestions for a new name.

Flag useSTM
  Description:          Include instances for STM types
  Default:              True

Library
  hs-source-dirs:       src
  exposed-modules:      Data.Queue
                        Data.Queue.Classes
                        Data.Queue.Instances
  build-depends:        base >= 3 && <5
  
  extensions:           CPP
  
  if flag(useSTM)
    build-depends:      stm
    other-modules:      Data.Queue.Instances.STM
    cpp-options:        -DuseSTM
