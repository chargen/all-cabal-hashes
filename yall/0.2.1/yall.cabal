-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:9520d3dee6cc83da3187cde349e15e3f
    SHA1:479111d91cb2026a3fbc00bd5b1654c5b89585f4
    SHA256:5ad43611cb77c095fca4bb11bb3b6713e6e648c3bc9a1906e5f72730283c3d8c
    SHA512:1f9162863ab1d9f2c11f7056002435cad20582e5993ce33e37d7a4238201bca5b87efcf4727a068ea40cacc9882c28931e3d518d77317cf1543e4f655ba51d9d
    Skein512_512:f0690d92f318862d5b5c7a8418970771e7e0d0d33c467a03884c289d45b66debb8eeedea8d4b816c638a73d40f9c17d5175107179f0860046851d4686711c69b

package-locations:
    https://hackage.haskell.org/package/yall-0.2.1/yall-0.2.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/yall-0.2.1.tar.gz

package-size: 9646
-- END Added by all-cabal-hashes-tool

Name:                yall

Version:             0.2.1

Synopsis:            Lenses with a southern twang

Description:         Why yet /another/ lens library? 

                     First, none of the existing libraries for Lenses were
                     adequate for my needs (specifically for my use of lenses
                     in "pez"). And anyway, why not try to create something
                     novel and better?
                     .
                     Distinguishing features:
                     .
                     - Lenses are parameterized over two Monads (by convention
                       @m@ and @w@), and look like @a -> m (b -> w a, b)@. this
                       lets us define lenses for sum types, that perform
                       validation, that do IO (e.g. persist data to disk),
                       etc., etc.
                     .
                     - a module "Data.Yall.Iso" that complements @Lens@ powerfully
                     .
                     - a rich set of category-level class instances (for now
                       from "categories") for 'Lens' and 'Iso'. These along
                       with the pre-defined primitive lenses and combinators
                       give an interface comparable to Arrow
                     .
                     You should import either "Data.Yall" or "Data.Yall.Lens",
                     and optionally "Data.Yall.Iso". "Data.Yall" is a simplified,
                     but mostly-compatible, version of a subset of "Data.Yall.Lens".
                     .
                     /UPDATE/: I have stopped developing this package. Instead you
                     should take a look at and contribute to <http://hackage.haskell.org/package/lens>
                     .
                     /TODOs/:
                     .
                     - a module providing template haskell deriving of Lenses
                     .
                     - pre-define lenses for prelude types, State
                     .
                     /CHANGES/:
                     .
                     - depend on categories >= 1


Homepage:            http://brandon.si/code/yall/

License:             BSD3

License-file:        LICENSE

Author:              Brandon Simmons

Maintainer:          brandon.m.simmons@gmail.com

Category:            Data

Build-type:          Simple

Cabal-version:       >=1.6

source-repository head   
    type:     git
    location: https://github.com/jberryman/yall.git
    branch:   master

Library
  Exposed-modules:     Data.Yall, Data.Yall.Lens, Data.Yall.Iso
  
  Build-depends:       categories >= 1.0
                     , transformers
                     , base < 5 && >= 4
