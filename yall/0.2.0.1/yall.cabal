-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:7c9a1deacb14534ddef775dc1edef4e5
    SHA1:d41980ef714067c0d957db860dc02c97b70184af
    SHA256:c7da8d86435bfb32c4ba435a15892675ba84a5fe6e6eeb60bea68310f8afee2e
    SHA512:fe8e48e88b0379802fc0bc5a1a0de47db3b9abfdea9fcdcfaa030d4cc2edbed58f10eb350b07948ae0e94d64e8c502c44d5aa8312b97c1a7e40f5ae9722eecc0
    Skein512_512:cde11254e3957baa7914e155f6cb2762f02ff4a624a6b5236ba882ee74ca77421f54f5e87ab0faf102e1c7b7f261b5e6892cfc3ce1b3182a385b3ca90bc75d21

package-locations:
    https://hackage.haskell.org/package/yall-0.2.0.1/yall-0.2.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/yall-0.2.0.1.tar.gz

package-size: 9792
-- END Added by all-cabal-hashes-tool

Name:                yall

Version:             0.2.0.1

Synopsis:            Lenses with a southern twang

Description:         Why yet /another/ lens library? 

                     First, none of the existing libraries for Lenses were
                     adequate for my needs (specifically for my use of lenses
                     in "pez"). And anyway, why not try to create something
                     novel and better?
                     .
                     Distinguishing features:
                     .
                     - Lenses are parameterized over two Monads (by convention
                       @m@ and @w@), and look like @a -> m (b -> w a, b)@. this
                       lets us define lenses for sum types, that perform
                       validation, that do IO (e.g. persist data to disk),
                       etc., etc.
                     .
                     - a module "Data.Yall.Iso" that complements @Lens@ powerfully
                     .
                     - a rich set of category-level class instances (for now
                       from "categories") for 'Lens' and 'Iso'. These along
                       with the pre-defined primitive lenses and combinators
                       give an interface comparable to Arrow
                     .
                     You should import either "Data.Yall" or "Data.Yall.Lens",
                     and optionally "Data.Yall.Iso". "Data.Yall" is a simplified,
                     but mostly-compatible, version of a subset of "Data.Yall.Lens".
                     .
                     /TODOs/:
                     .
                     - a module providing template haskell deriving of Lenses
                     .
                     - pre-define lenses for prelude types, State
                     .
                     /CHANGES/:
                     .
                     - remove 'setEmpty' variants only useful on lenses better expressed in Iso
                     .
                     - create a class for lens operations, supporting...
                     .
                     - use newtype wrappers for different monadic lifting schemes
                     .
                     - better ordering for set, allowing let-floating for partial application


Homepage:            http://brandon.si/code/yall/

License:             BSD3

License-file:        LICENSE

Author:              Brandon Simmons

Maintainer:          brandon.m.simmons@gmail.com

Category:            Data

Build-type:          Simple

Cabal-version:       >=1.6

source-repository head   
    type:     git
    location: https://github.com/jberryman/yall.git
    branch:   master

Library
  Exposed-modules:     Data.Yall, Data.Yall.Lens, Data.Yall.Iso
  
  Build-depends:       categories < 1.0
                     , transformers
                     , base < 5 && >= 4
