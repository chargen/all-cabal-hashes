-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:6cdb6af0236cd59164513152e27e840a
    SHA1:61d649b131fc190e652b3efd4ad48a3f4dd77acb
    SHA256:d73f8ad3c10f7bd0c3d0c20791aa6167cc001b9fbd28f264a4c847b90af17fa9
    SHA512:e56f6278a1f3719343cb3dbb9d4190b64dc44ebe4eb78073112ebc37a3999ae813906345482372ea32ae7ffc91fb865b10cbb7126017fd27897ad995d8341085
    Skein512_512:ffbb28bee2ab18d28fb27a48eab1eb5fe80fa3e83f63c7c04aae009a859969a451050fa83aed44adef588157d6f3597cfe51605470840e3a3873e1b8806f701a

x-package-locations:
    https://hackage.haskell.org/package/pipes-core-0.1.0/pipes-core-0.1.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/pipes-core-0.1.0.tar.gz

x-package-size: 15411
-- END Added by all-cabal-hashes-tool

Name: pipes-core
Version: 0.1.0
Cabal-Version: >=1.10.1
Build-Type: Simple
License: BSD3
License-File: LICENSE
Copyright: 2012 Gabriel Gonzalez, 2012 Paolo Capriotti
Author: Gabriel Gonzalez, Paolo Capriotti
Maintainer: p.capriotti@gmail.com
Stability: Experimental
Homepage: https://github.com/pcapriotti/pipes-core
Bug-Reports: https://github.com/pcapriotti/pipes-core/issues
Synopsis: Compositional pipelines
Description:
  This library offers an abstraction similar in scope to
  iteratees\/enumerators\/enumeratees, but with different characteristics and
  naming conventions.
  .
  This package is a fork of the original pipes package by Gabriel Gonzalez.
  See <https://github.com/pcapriotti/pipes-core/wiki/pipes-core-vs-pipes> for a
  comparison between the two packages.
  .
  Differences with traditional iteratees:
  .
  * /Simpler semantics/: There is only one data type ('Pipe'), two basic
    primitives ('await' and 'yield'), and only one way to compose 'Pipe's
    ('>+>').  In fact, ('>+>') is just convenient syntax for the composition
    operator in 'Category'. Most pipes can be implemented just using the
    'Monad' instance and composition.
  .
  * /Different naming conventions/: Enumeratees are called 'Pipe's, Enumerators
    are 'Producer's, and Iteratees are 'Consumer's.  'Producer's and 'Consumer's
    are just type synonyms for 'Pipe's with either the input or output end
    closed.
  .
  * /Pipes form a Category/: that means that composition is associative, and
    that there is an identity 'Pipe'.
  .
  * /"Vertical" concatenation works on every 'Pipe'/: ('>>'), concatenates
    'Pipe's. Since everything is a 'Pipe', you can use it to concatenate
    'Producer's, 'Consumer's, and even intermediate 'Pipe' stages.  Vertical
    concatenation can be combined with composition to create elaborate
    combinators, without the need of executing pipes in \"passes\" or resuming
    partially executed pipes.
  .
  Check out "Control.Pipe" for a copious introduction (in the spirit of the
  @iterIO@ library), and "Control.Pipe.Combinators" for some basic combinators
  and 'Pipe' examples.
Category: Control, Enumerator
Tested-With: GHC ==7.0.3
Source-Repository head
    Type: git
    Location: https://github.com/pcapriotti/pipes-core

Library
    Build-Depends: base >= 4 && < 5
                 , transformers (>= 0.2 && < 0.4)
                 , categories (== 1.0.*)
                 , void (== 0.5.*)
                 , lifted-base (== 0.1.*)
                 , monad-control (== 0.3.*)
    Exposed-Modules: Control.Pipe
                   , Control.Pipe.Category
                   , Control.Pipe.Combinators
                   , Control.Pipe.Common
                   , Control.Pipe.Exception
                   , Control.Pipe.Monoidal
                   , Control.Category.Multiplicative
    Default-Language: Haskell2010
