-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:8b32be4e17953f65d8aa65a807c9f136
    SHA1:a4be16e130be5c8a6ee5cf129af239b69d784145
    SHA256:b43f5d60c7549bc22130219b34f4385265b9f8a386db1816d5982931b704f46c
    SHA512:2183c03c319257fd175df0f8bb410c07b154d2108d2c49bb2fbcf451a50d43996dbf1951c3e02f98fb456d224197749028fc825e637d41b6e119c4ecb0a87cc0
    Skein512_512:71ba5d47818633a6ffcf85b95b1da52bc8df3cc2f87a34fa12d1c23536fb5b6cd0a5910a6845226df0d4d54f3de161bf2bdd719573676bcc948603f82ee6c500

package-locations:
    https://hackage.haskell.org/package/pooled-io-0.0.2/pooled-io-0.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/pooled-io-0.0.2.tar.gz

package-size: 6566
-- END Added by all-cabal-hashes-tool

Name:             pooled-io
Version:          0.0.2
License:          BSD3
License-File:     LICENSE
Author:           Henning Thielemann <haskell@henning-thielemann.de>
Maintainer:       Henning Thielemann <haskell@henning-thielemann.de>
Homepage:         http://code.haskell.org/~thielema/pooled-io/
Category:         Parallelism
Synopsis:         Run jobs on a limited number of threads and support data dependencies
Description:
  The motivation for this package was to run computations on multiple cores
  that need to write intermediate results to disk.
  The functions restrict the number of simultaneously running jobs
  to a user given number or to the number of capabilities
  the Haskell program was started with,
  i.e. the number after the RTS option @-N@.
  .
  There are some flavors of this functionality:
  .
  * "Control.Concurrent.PooledIO.Independent":
    run independent actions without results in parallel
  .
  * "Control.Concurrent.PooledIO.Final":
    run independent actions with a final result in parallel
  .
  * "Control.Concurrent.PooledIO.InOrder":
    run jobs in parallel with data dependencies like @make -j n@
  .
  Additionally there is the module
  "Control.Concurrent.PooledIO.Sequence"
  that helps to serialize I/O actions from multiple threads.
  It is certainly most useful in connection with
  "Control.Concurrent.PooledIO.Independent".
  .
  Related packages:
  .
  * @lazyio@: interleave IO actions in a single thread
  .
  * @async@: start threads and wait for their results, forward exceptions,
    but do not throttle concurrency with respect to number of available cores
  .
  * @parallel-tasks@:
Tested-With:      GHC==7.4.2, GHC==7.8.4, GHC==7.10.1
Cabal-Version:    >=1.8
Build-Type:       Simple

Flag buildExamples
  description: Build example executables
  default:     False

Source-Repository this
  Tag:         0.0.2
  Type:        darcs
  Location:    http://code.haskell.org/~thielema/pooled-io/

Source-Repository head
  Type:        darcs
  Location:    http://code.haskell.org/~thielema/pooled-io/

Library
  Build-Depends:
    concurrent-split >=0.0 && <0.1,
    transformers >=0.2.2 && <0.5,
    deepseq >=1.3 && <1.5,
    unsafe >=0.0 && <0.1,
    containers >=0.4 && <0.6,
    utility-ht >=0.0.9 && <0.1,
    base >=4 && <5

  GHC-Options:      -Wall
  Hs-Source-Dirs:   src
  Exposed-Modules:
    Control.Concurrent.PooledIO.Independent
    Control.Concurrent.PooledIO.Final
    Control.Concurrent.PooledIO.InOrder
    Control.Concurrent.PooledIO.Sequence
  Other-Modules:
    Control.Concurrent.PooledIO.Monad

Executable pooled-io-demo
  If flag(buildExamples)
    Build-Depends:
      pooled-io,
      base
  Else
    Buildable: False

  GHC-Options:      -Wall -threaded
  Main-Is:          example/Main.hs
