name:                async
synopsis:            Run IO operations asynchronously and wait for their results

description:
 This package provides a higher-level interface over
 threads, in which an @Async a@ is a concurrent
 thread that will eventually deliver a value of
 type @a@.  The package provides ways to create
 @Async@ computations, wait for their results, and
 cancel them.
 .
 Using @Async@ is safer than using threads in two
 ways:
 .
 * When waiting for a thread to return a result,
   if the thread dies with an exception then the
   caller must either re-throw the exception
   ('wait') or handle it ('waitCatch'); the
   exception cannot be ignored.
 .
 * The API makes it possible to build a tree of
   threads that are automatically killed when
   their parent dies (see 'withAsync').
 .
 Changes in 2.0.2:
 .
 * Add a Monad instance for Concurrently
 * Bump base dependency to allow 4.9
 .
 Changes in 2.0.1.6:
 .
 * Add workaround to waitCatch for #14
 .
 Changes in 2.0.1.5:
 .
 * Bump @base@ dependencies for GHC 7.8
 .
 Changes in 2.0.1.4:
 .
 * Bump @base@ dependency of test suite
 .
 Changes in 2.0.1.3:
 .
 * Bump @base@ dependency to allow 4.6
 .
 Changes in 2.0.1.2:
 .
 * Bump @stm@ dependency to 2.4
 .
 Changes in 2.0.1.1:
 .
 * Safe Haskell support: @Control.Concurrent.Async@ is now @Trustworthy@
 .
 Changes in 2.0.1.0:
 .
 * Added a @Functor@ instance for @Async@
 .
 * Added @asyncBound@, @asyncOn@, @asyncWithUnmask@, @asyncOnWithUnmask@, @withAsyncBound@, @withAsyncOn@, @withAsyncWithUnmask@, @withAsyncOnWithUnmask@.
 .
 * Added @mapConcurrently@
 .
 * Added @Concurrently@ (with @Applicative@ and @Alternative@ instances)

version:             2.0.2
license:             BSD3
license-file:        LICENSE
author:              Simon Marlow
maintainer:          Simon Marlow <marlowsd@gmail.com>
copyright:           (c) Simon Marlow 2012
category:            Concurrency
build-type:          Simple
cabal-version:       >=1.8
homepage:            https://github.com/simonmar/async
bug-reports:         https://github.com/simonmar/async/issues
tested-with:         GHC==7.0.3, GHC==7.2.2, GHC==7.4.1

extra-source-files:
    bench/race.hs

source-repository head
    type: git
    location: https://github.com/simonmar/async.git

library
    exposed-modules:     Control.Concurrent.Async
    build-depends:       base >= 4.3 && < 4.9, stm >= 2.2 && < 2.5

test-suite test-async
    type:       exitcode-stdio-1.0
    hs-source-dirs: test
    main-is:    test-async.hs
    build-depends: base >= 4.3 && < 4.9,
                   async,
                   test-framework,
                   test-framework-hunit,
                   HUnit


package-hashes:
    MD5:801c094592caacb0306fa05f754f9d20
    SHA1:36c564caab9ee6a1a512efd603db56e98b70b42f
    SHA256:db54d384259eee2f3ca525821f45fe509b9a101fbf3a8df7132aa9622626fd2b
    SHA512:beac3452aca98f9c41fb86b1b9e105a324df5a05e10c7d616927bb94888d6d2ed5385e0ec901fdfa050a43e991f5089757d3941ce97db98c148a159893bddc1e
    Skein512_512:8178ec158b4828318f89a02986e6c32ae5072b2fc3de68154f7dc59454be3eba69c541c44423fcb5f431c35a1b810cc30ac3cc906be55bf2a8401ab10e8eb3d7

package-locations:
    https://hackage.haskell.org/package/async-2.0.2/async-2.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/async-2.0.2.tar.gz

