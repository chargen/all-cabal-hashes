-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:b735a6866d44b8bc40c9bc48e6b42ced
    SHA1:589e66dc663985fcbc26879357ef859e71cd9775
    SHA256:51f6a382d9b48d6c8b988e245a93465e90a8ca6b4dfd441d369d14611abd8ae1
    SHA512:b459d80c30087e21d48cbdce90609a3aa45fd5cda0b1b024994c95eed5aa1f82e192612db8c4d6b40a27d23bacd6d5e18be158acf41060b6bb3d84de0dcf3add
    Skein512_512:1a06406d9306fee08c350618134f002558e07acdd4be3c21d3e694824c200c0b0547fd7c177d082693a38c4ce92deaaa6c1cc7df3aa4dce4c51098caf364981c

x-package-locations:
    https://hackage.haskell.org/package/stable-memo-0.2.3/stable-memo-0.2.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/stable-memo-0.2.3.tar.gz

x-package-size: 4167
-- END Added by all-cabal-hashes-tool

name:                stable-memo
version:             0.2.3
synopsis:            Memoization based on argument identity
license:             MIT
license-file:        LICENSE
author:              Jake McArthur <Jake.McArthur@gmail.com>
maintainer:          Jake McArthur <Jake.McArthur@gmail.com>
category:            Data
build-type:          Simple
cabal-version:       >=1.10
description:

  Whereas most memo combinators memoize based on equality, stable-memo
  does it based on whether the exact same argument has been passed to
  the function before (that is, is the same argument in memory).

  .

  * stable-memo only evaluates keys to WHNF.

  .

  * This can be more suitable for recursive functions over graphs with
    cycles.

  .

  * stable-memo doesn't retain the keys it has seen so far, which
    allows them to be garbage collected if they will no longer be
    used. Finalizers are put in place to remove the corresponding
    entries from the memo table if this happens.

  .

  * "Data.StableMemo.Weak" provides an alternative set of combinators
    that also avoid retaining the results of the function, only
    reusing results if they have not yet been garbage collected.

  .

  * There is no type class constraint on the function's argument.

  .

  For motivation, here is an implementation of map that preserves
  sharing of the spine for cyclic lists. It should even be safe to use
  this on arbitrarily long, acyclic lists since as long as the garbage
  collector is chasing you, the size of the memo table should stay
  under control, too.

  .

  > map :: (a -> b) -> [a] -> [b]
  > map f = go
  >   where go = memo map'
  >         map' []     = []
  >         map' (x:xs) = f x : go xs

  .

  This library is largely based on the implementation of memo found in
  \"Stretching the storage manager: weak pointers and stable names in
  Haskell\", from Simon Peyton Jones, Simon Marlow, and Conal Elliott
  (<http://community.haskell.org/~simonmar/papers/weak.pdf>).

library
  build-depends:       base >=4.6 && <5,
                       hashtables >=1.0 && <1.2,
                       tagged >=0.4 && <0.8,
                       ghc-prim >=0.3 && < 0.4
  default-language:    Haskell2010
  exposed-modules:     Data.StableMemo, Data.StableMemo.Weak
  other-extensions:    BangPatterns,
                       RankNTypes,
                       PolyKinds,
                       Safe,
                       Trustworthy,
                       TypeOperators
  other-modules:       Data.StableMemo.Internal

source-repository head
  type:     darcs
  location: http://patch-tag.com/r/jmcarthur/stable-memo

source-repository this
  type:     darcs
  location: http://patch-tag.com/r/jmcarthur/stable-memo
  tag:      v0.2.2
