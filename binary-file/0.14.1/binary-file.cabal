-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:cb3bf5f34a3d1a9961cf99168385355e
    SHA1:399ed8853c294f63884b450ff82cc5cd63c61e9d
    SHA256:d467d9611b11280d136de61188b4a594d6dcaf732cf337c7f2b1da8fe33efb18
    SHA512:2d7975dcd7dfac5c725b71f3a546aa5d7b23e4981223c90a554dec6cde038490dd6db5850ae13d8c4be4080a320805de3d912f955b7318b85a4484408263b439
    Skein512_512:9cf37145a9799f3ac7276921ad8d51993f40ae77d126d4ab60f250ad430bb2b011bce3a6ffc0702cccaeefc840e156a4b410b7e25af74878a6881ead49181b43

package-locations:
    https://hackage.haskell.org/package/binary-file-0.14.1/binary-file-0.14.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/binary-file-0.14.1.tar.gz

package-size: 8144
-- END Added by all-cabal-hashes-tool

build-type:	Simple
cabal-version:	>= 1.8

name:		binary-file
version:	0.14.1
stability:	experimental
author:		Yoshikuni Jujo <PAF01143@nifty.ne.jp>
maintainer:	Yoshikuni Jujo <PAF01143@nifty.ne.jp>

license:	BSD3
license-file:	LICENSE

category:	File
synopsis:	read/write binary file
description:

    See example directory's sample code.
    .
    > runghc -XQuasiQuotes -XTypeFamilies -XFlexibleInstances exam.hs some.bmp
    .
    exam.hs:
    .
    > import File.Binary
    > import File.Binary.Instances
    > import File.Binary.Instances.LittleEndian
    > import System.Environment
    > import Data.ByteString.Lazy as BSL
    >
    > main = do
    >	[inf] <- getArgs
    >   cnt <- BS.readFile inf
    >	let (bmp, rest) = fromBinary () cnt :: (Bitmap, String)
    >	print bmp
    >
    > instance Field (Int, Int, Int) where
    >    type FieldArgument (Int, Int, Int) = ()
    >    fromBinary _ s = let
    >        (b, rest) = toType 1 s
    >        (g, rest') = toType 1 rest
    >        (r, rest'') = toType 1 rest' in
    >        ((b, g, r), snd $ getBytes 1 1 rest'')
    >    toBinary _ (b, g, r) = concatBinary [
    >        fromType 1 b, fromType 1 g, fromType 1 r,
    >        makeBinary $ BSL.singleton 0]
    >
    > [binary|
    >
    > Bitmap
    >
    > 2: "BM"
    > 4: file_size
    > 2: 0
    > 2: 0
    > 4: offset
    >
    > 4: 40
    > 4: width
    > 4: height
    > 2: 1
    > 2: bits_per_pixel
    > 4: compression
    > 4: image_size
    > 4: resolutionH
    > 4: resolutionV
    > 4: color_num
    > 4: important_color_num
    > ((), Just color_num)[OPENBRACKET](Int, Int, Int)[CLOSEBRACKET]: colors
    > ((), image_size)[OPENBRACKET]String[CLOSEBRACKET]: image
    >
    > |]
    .

extra-source-files:	examples/readPNG.hs

source-repository	head
    type:	git
    location:	git://github.com/YoshikuniJujo/binary-file.git

source-repository	this
    type:	git
    location:	git://github.com/YoshikuniJujo/binary-file.git
    tag:	0.14.1

library
    hs-source-dirs:	src
    exposed-modules:
        File.Binary,
        File.Binary.Instances
        File.Binary.Instances.LittleEndian,
        File.Binary.Instances.BigEndian
    other-modules:
        File.Binary.Classes,
        File.Binary.Parse,
        File.Binary.Quote
    build-depends:	base > 3 && < 5, template-haskell, peggy, bytestring,
        monads-tf
    ghc-options:	-Wall
