-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:e086335419878a43b3d2d2125ce9095c
    SHA1:c1e774188b249738361d9c449ca444edbe1495c2
    SHA256:753e5446cc754599017d5ca9c4f68aa3242924b16df1dc693871748738a0f510
    SHA512:438c80c0d163ce6d952e5f0e9c263ab063dba8cc8fc34da29f45b4045ae88f63dc4cdd0db6b87b4a088ae90b880919fb13ca86d5d39d8aabb9aa8fa8c2d35f07
    Skein512_512:c1825339eb81ff7356d4aecaaba70597f63d08c4e207270f0c5da36a92d81e52c5555f58caff61ae8eb67607d3c3c0714833c31c807aad50d6473a9326612b96

package-locations:
    https://hackage.haskell.org/package/ivor-0.1.10/ivor-0.1.10.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/ivor-0.1.10.tar.gz

package-size: 386474
-- END Added by all-cabal-hashes-tool

Name:		ivor
Version:	0.1.10
Author:		Edwin Brady
License:	BSD3
License-file:	LICENSE
Author:		Edwin Brady
Maintainer:	Edwin Brady <eb@dcs.st-and.ac.uk>
Homepage:	http://www.dcs.st-and.ac.uk/~eb/Ivor/
Stability:      experimental
Build-depends:	base, haskell98, parsec, mtl, directory, containers
Extensions:	MultiParamTypeClasses, FunctionalDependencies,
		ExistentialQuantification, OverlappingInstances
Category:       Theorem provers, Dependent Types
Synopsis:       Theorem proving library based on dependent type theory
Description:    Ivor is a type theory based theorem prover, with a
                Haskell API, designed for easy extending and embedding
                of theorem proving technology in Haskell
                applications. It provides an implementation of the
                type theory and tactics for building terms, more or
                less along the lines of systems such as Coq or Agda,
                and taking much of its inspiration from Conor
                McBride's presentation of OLEG.
                .
                The API provides a collection of primitive tactics and
                combinators for building new tactics. It is therefore
                possible to build new tactics to suit specific
                applications. Ivor features a dependent type theory
                similar to Luo's ECC with definitions (and similar to
                that implemented in Epigram), with dependent pattern
                matching, and experimental multi-stage programming
                support. Optionally, it can be extended with
                heterogeneous equality, primitive types and operations,
                new parser rules, user defined tactics and (if you
                want your proofs to be untrustworthy) a fixpoint
                combinator.

Data-files:     BUGS, INSTALL, TODO, docs/macros.ltx, docs/local.ltx, docs/tt.tex, docs/conclusion.tex,
                docs/intro.tex, docs/hcar.sty, docs/tactics.tex, docs/library.ltx,
                docs/shell.tex, docs/dtp.bib, docs/HCAR.tex, docs/Makefile,
                docs/combinators.tex, docs/humett.tex, docs/interface.tex,
                papers/tutorial/tutorial.tex, papers/tutorial/macros.ltx, papers/tutorial/theoremproving.tex,
                papers/tutorial/introduction.tex, papers/tutorial/hslibrary.tex, papers/tutorial/library.ltx,
                papers/tutorial/programming.tex, papers/tutorial/Makefile, papers/bib/literature.bib,
                papers/ivor/examples.tex, papers/ivor/code.tex, papers/ivor/macros.ltx,
                papers/ivor/ivor.tex, papers/ivor/corett.tex, papers/ivor/conclusions.tex,
                papers/ivor/intro.tex, papers/ivor/llncs.cls, papers/ivor/tactics.tex,
                papers/ivor/library.ltx, papers/ivor/dtp.bib, papers/ivor/alink.bib,
                papers/ivor/Makefile, papers/ivor/embounded.bib

Extra-source-files: emacs/ivor-mode.el, examplett/staged.tt, examplett/test.c, examplett/partial.tt, examplett/nat.tt,
                    examplett/vec.tt, examplett/lt.tt, examplett/Test.hs, examplett/plus.tt,
                    examplett/jmeq.tt, examplett/eq.tt, examplett/logic.tt, examplett/interp.tt,
                    examplett/stageplus.tt, examplett/Nat.hs, examplett/general.tt, examplett/natsimpl.tt,
                    examplett/test.tt, examplett/vect.tt, examplett/fin.tt, examplett/ack.tt,
                    IOvor/IOPrims.lhs, IOvor/Main.lhs, IOvor/iobasics.tt, Jones/Main.lhs,
                    lib/nat.tt, lib/lt.tt, lib/list.tt, lib/eq.tt,
                    lib/basics.tt, lib/logic.tt, lib/vect.tt, lib/fin.tt



Build-depends:  base >=3 && <5, parsec, mtl, directory, binary
Build-type:     Simple

Extensions:     MultiParamTypeClasses, FunctionalDependencies,
                ExistentialQuantification, OverlappingInstances
-- Needs some -Wall cleanup
-- GHC-options:    -Wall

Exposed-modules:
		Ivor.TT, Ivor.Shell, Ivor.Primitives,
		Ivor.TermParser, Ivor.ViewTerm, Ivor.Equality,
		Ivor.Plugin, Ivor.Construction
Other-modules:	Ivor.Nobby, Ivor.TTCore, Ivor.State,
		Ivor.Tactics, Ivor.Typecheck, Ivor.Evaluator
		Ivor.Gadgets, Ivor.SC, Ivor.Bytecode, Ivor.Values,
		Ivor.CodegenC, Ivor.Datatype, Ivor.Display,
		Ivor.ICompile, Ivor.MakeData, Ivor.Unify,
		Ivor.Grouper, Ivor.ShellParser, Ivor.Constant,
		Ivor.RunTT, Ivor.Compiler, Ivor.Prefix, Ivor.Errors,
		Ivor.PatternDefs,  Ivor.ShellState, Ivor.Scopecheck
