-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:e207895787ff572fd4bf81d24d98669d
    SHA1:d5d5fcfb06eab6f1f68976ca8154cb327da388c0
    SHA256:eae5f8581a0cc449f92036be790266b6bb84a89d9d36ecb4849b3746430b3ed9
    SHA512:d260be82cde362a5a5839a761a71229ac1f8dc980adcaaa357468261517bc1726698ee10c9b3f91f060e48a4f4851cf8237fed28f43c74d9007bac17c77bd851
    Skein512_512:9474578071ce18fc89f2c8e29623e70aa42a42fa850be3ce086f1ebb54e0a8c55287b71e88eb89dcda9c013d8fdd6a7c102504e7d2e4cfcac2bf86d346b76002

x-package-locations:
    https://hackage.haskell.org/package/parallel-io-0.3.2/parallel-io-0.3.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/parallel-io-0.3.2.tar.gz

x-package-size: 8822
-- END Added by all-cabal-hashes-tool

Name:               parallel-io
Version:            0.3.2
Cabal-Version:      >= 1.2
Category:           Concurrency
Synopsis:           Combinators for executing IO actions in parallel on a thread pool.
Description:        This package provides combinators for sequencing IO actions onto a thread pool. The
                    thread pool is guaranteed to contain no more unblocked threads than a user-specified upper limit, thus
                    minimizing contention.
                    .
                    Furthermore, the parallel combinators can be used reentrantly - your parallel
                    actions can spawn more parallel actions - without violating this property of the thread pool.
                    .
                    The package is inspired by the thread <http://thread.gmane.org/gmane.comp.lang.haskell.cafe/56499/focus=56521>.
                    Thanks to Neil Mitchell and Bulat Ziganshin for some of the code this package is based on.
License:            BSD3
License-File:       LICENSE
Homepage:           http://batterseapower.github.com/parallel-io
Author:             Max Bolingbroke <batterseapower@hotmail.com>,
                    Neil Mitchell <ndmitchell@gmail.com>,
                    Bulat Ziganshin <bulat.ziganshin@gmail.com>
Maintainer:         Max Bolingbroke <batterseapower@hotmail.com>
Build-Type:         Simple


Flag Benchmark
    Description:    Build the benchmarking tool
    Default:        False

Flag Fuzz
    Description:    Build the fuzzing tool for discovering deadlocks
    Default:        False

Flag Tests
    Description:    Build the test runner
    Default:        False

Library
    Exposed-Modules:
        Control.Concurrent.ParallelIO
        Control.Concurrent.ParallelIO.Global
        Control.Concurrent.ParallelIO.Local
    Other-Modules:    
        Control.Concurrent.ParallelIO.Compat
    
    Build-Depends:  base >= 4 && < 5, extensible-exceptions > 0.1.0.1, containers >= 0.2 && < 0.5, random >= 1.0 && < 1.1

Executable benchmark
    Main-Is:        Control/Concurrent/ParallelIO/Benchmark.hs
    
    if !flag(benchmark)
        Buildable:  False
    else
        Build-Depends:  base >= 4 && < 5, extensible-exceptions > 0.1.0.1, containers >= 0.2 && < 0.5, random >= 1.0 && < 1.1,
                        time >= 1
    
        Ghc-Options:    -threaded

Executable tests
    Main-Is:        Control/Concurrent/ParallelIO/Tests.hs
    
    if !flag(tests)
        Buildable:  False
    else
        Build-Depends:  base >= 4 && < 5, extensible-exceptions > 0.1.0.1, containers >= 0.2 && < 0.5, random >= 1.0 && < 1.1,
                        test-framework >= 0.1.1, test-framework-hunit >= 0.1.1, HUnit >= 1.2 && < 2
    
        Ghc-Options:    -threaded -rtsopts

Executable fuzz
    Main-Is:        Control/Concurrent/ParallelIO/Fuzz.hs

    if !flag(fuzz)
        Buildable:  False
    else
        Build-Depends:  base >= 4 && < 5, extensible-exceptions > 0.1.0.1, containers >= 0.2 && < 0.5, random >= 1.0 && < 1.1

        Ghc-Options:    -threaded -rtsopts

Executable fuzz-seq
    Main-Is:        Control/Concurrent/ParallelIO/Fuzz.hs

    if !flag(fuzz)
        Buildable:  False
    else
        Build-Depends:  base >= 4 && < 5, extensible-exceptions > 0.1.0.1, containers >= 0.2 && < 0.5, random >= 1.0 && < 1.1
