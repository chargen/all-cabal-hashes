-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:38a6bbb371bfd1e944f5792a191e6ea5
    SHA1:ea4503600b716f961ee55bfb106fb1061219f724
    SHA256:438dd13f7eb35afff19e855c81465bb9feeb400700f15d6f969180736ba05c13
    SHA512:4cc63c0db88aaef2fce19b126825a268843e75275c5a735120ee65749ac1b8acb5f7ccbaefdd4bdf74bd3c9662049d0ebead1cd8e75d9d75458c6c6a9096fa83
    Skein512_512:940bf39d97ddb2c76e6d4d4dad23d2a8418769b397a984e6cd28945a6e6b2cb4394070fdf5239dc8bfca2dd90cf1ae6ad871d743255ed011794a62ed085d40b0

package-locations:
    https://hackage.haskell.org/package/parallel-io-0.3.2.2/parallel-io-0.3.2.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/parallel-io-0.3.2.2.tar.gz

package-size: 8817
-- END Added by all-cabal-hashes-tool

Name:               parallel-io
Version:            0.3.2.2
Cabal-Version:      >= 1.2
Category:           Concurrency
Synopsis:           Combinators for executing IO actions in parallel on a thread pool.
Description:        This package provides combinators for sequencing IO actions onto a thread pool. The
                    thread pool is guaranteed to contain no more unblocked threads than a user-specified upper limit, thus
                    minimizing contention.
                    .
                    Furthermore, the parallel combinators can be used reentrantly - your parallel
                    actions can spawn more parallel actions - without violating this property of the thread pool.
                    .
                    The package is inspired by the thread <http://thread.gmane.org/gmane.comp.lang.haskell.cafe/56499/focus=56521>.
                    Thanks to Neil Mitchell and Bulat Ziganshin for some of the code this package is based on.
License:            BSD3
License-File:       LICENSE
Homepage:           http://batterseapower.github.com/parallel-io
Author:             Max Bolingbroke <batterseapower@hotmail.com>,
                    Neil Mitchell <ndmitchell@gmail.com>,
                    Bulat Ziganshin <bulat.ziganshin@gmail.com>
Maintainer:         Max Bolingbroke <batterseapower@hotmail.com>
Build-Type:         Simple


Flag Benchmark
    Description:    Build the benchmarking tool
    Default:        False

Flag Fuzz
    Description:    Build the fuzzing tool for discovering deadlocks
    Default:        False

Flag Tests
    Description:    Build the test runner
    Default:        False

Library
    Exposed-Modules:
        Control.Concurrent.ParallelIO
        Control.Concurrent.ParallelIO.Global
        Control.Concurrent.ParallelIO.Local
    Other-Modules:    
        Control.Concurrent.ParallelIO.Compat
    
    Build-Depends:  base >= 4 && < 5, extensible-exceptions > 0.1.0.1, containers >= 0.2 && < 0.6, random >= 1.0 && < 1.1

Executable benchmark
    Main-Is:        Control/Concurrent/ParallelIO/Benchmark.hs
    
    if !flag(benchmark)
        Buildable:  False
    else
        Build-Depends:  base >= 4 && < 5, extensible-exceptions > 0.1.0.1, containers >= 0.2 && < 0.6, random >= 1.0 && < 1.1,
                        time >= 1
    
        Ghc-Options:    -threaded

Executable tests
    Main-Is:        Control/Concurrent/ParallelIO/Tests.hs
    
    if !flag(tests)
        Buildable:  False
    else
        Build-Depends:  base >= 4 && < 5, extensible-exceptions > 0.1.0.1, containers >= 0.2 && < 0.6, random >= 1.0 && < 1.1,
                        test-framework >= 0.1.1, test-framework-hunit >= 0.1.1, HUnit >= 1.2 && < 2
    
        Ghc-Options:    -threaded -rtsopts

Executable fuzz
    Main-Is:        Control/Concurrent/ParallelIO/Fuzz.hs

    if !flag(fuzz)
        Buildable:  False
    else
        Build-Depends:  base >= 4 && < 5, extensible-exceptions > 0.1.0.1, containers >= 0.2 && < 0.6, random >= 1.0 && < 1.1

        Ghc-Options:    -threaded -rtsopts

Executable fuzz-seq
    Main-Is:        Control/Concurrent/ParallelIO/Fuzz.hs

    if !flag(fuzz)
        Buildable:  False
    else
        Build-Depends:  base >= 4 && < 5, extensible-exceptions > 0.1.0.1, containers >= 0.2 && < 0.6, random >= 1.0 && < 1.1
