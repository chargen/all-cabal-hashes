Name:                httpspec
Version:             0.3.0.1
Synopsis:            Specification of HTTP request/response generators and parsers
License:             LGPL
License-file:        LICENSE
Author:              David Leuschner, Stefan Wehr
Maintainer:          David Leuschner <leuschner@openfactis.org>
Category:            Data, Web
Description:
  Using httpspec you can write a specification for a HTTP request/response
  defining the method, headers, url parameters and the body.  This
  specification bidirectionally maps an abstract request/response data
  type to a concrete realisation as a HTTP request/response.  The
  specification can be used to generate HTTP requests/responses from an
  abstract description and it can be used to parse a HTTP request/response
  into such an abstract description.  The idea is very similar to the way
  pickling of XML data is described in HXT.

  For example, the abstract representation of an authentication request
  and response could be described as

  data AuthUserReq
      = AuthUserReq
        { authUser_user :: String
        , authUser_pass :: String
        }

  data AuthUserRes
      = AuthUserOk { authUserOk_sid :: String }
      | AuthUserFailed

  Using httpspec you can define a mapping between HTTP and these types:

  instance HasReqSpec AuthUserReq where
    reqSpec =
        rsMeth Http.POST $
        rsPath "/authenticate-user" $
        rsWrap (uncurry AuthUserReq, \(AuthUserReq a b) -> (a,b)) $
        rsPair (rsParam "uid") (rsParam "pass")

  instance HasResSpec AuthUserRes where
    resSpec =
        rsSwitch
        [ rsCase (AuthUserOk,authUserOk_sid) $
          rsStatus 200 $
          rsContentType "text/plain" $
          rsEncodingFixed UTF8 $
          rsBody
        , rsCaseConst AuthUserFailed $
          rsStatus 403
        ]
Build-Type:          Simple
Cabal-Version:       >= 1.2

Library
  Hs-Source-Dirs:    src
  GHC-Options: -Wall
               -fno-warn-name-shadowing
               -fno-warn-orphans
               -fno-warn-overlapping-patterns
  Build-Depends:     base >= 4 && < 5, bytestring, bidispec, mtl,
                     hxt > 8.3, pretty, MissingH,
                     safe, cgi, network, HTTP, filepath, containers,
                     encoding >= 0.6, hxthelper
  Exposed-Modules:   Data.HttpSpec,Data.HttpSpec.HttpTypes
                     Data.HttpSpec.Pretty
                     Data.HttpSpec.EncodingHelper


package-hashes:
    MD5:c980a040f5dff4ef8ffafb81c8f1e3fe
    SHA1:3020e3d8a96978be965bb713cf341a19a8754172
    SHA256:bbb4163981210083aca4ff403e34320edda6a135106a4c454f4a3271749ef0ed
    SHA512:37d77153a9d1bd9497fe57d9b17f425c27e9da3ee8349d9c4edb86d132d7d2e182b504edbc592a160e49dc77cb35ba1782a39c44ff35118715889b7327faf29d
    Skein512_512:28af7bb30d406b158a232f3655cfc6438527940476d3ef7ad23b785b56456124fa899c178ef443ce5f7213b6068a0c3633470a387b0ecccf4128ca822f72cb7b

package-locations:
    https://hackage.haskell.org/package/httpspec-0.3.0.1/httpspec-0.3.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/httpspec-0.3.0.1.tar.gz

