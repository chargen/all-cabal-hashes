-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:b789b5d9414cf2a3c575c62a3422e6c6
    SHA1:ee7fb6ae8dc3bbea21f77f0f6759cb9873239a26
    SHA256:2de6653eb283ea940ec9248e1911b1e08f845d961ad7f637be852b7e16cd86d6
    SHA512:938854d822cb0a65a614dc1af331baa129aa23f6ab8a3301b937cec99de64d77b2685eeac692e5137cec03bc5dbd219a55820167991c8825de7c4ad9320d4784
    Skein512_512:bdee140b6273fb0a81fd84aadfa92d3723906c42fb3258c046a651585d15234473064a7ce0a372f64e76e77d9a4d4a0e25ca124d3583df3254c9c0450c1a4b87

x-package-locations:
    https://hackage.haskell.org/package/courier-0.1.0.12/courier-0.1.0.12.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/courier-0.1.0.12.tar.gz

x-package-size: 21764
-- END Added by all-cabal-hashes-tool

name:                courier
version:             0.1.0.12
synopsis:           A message-passing library for simplifying network applications
description:         Inspired by Erlang's simple message-passing facilities, courier provides roughly similar 
                     capabilities. Applications simply create one or more endpoints, 
                     bind each to a transport using a given name, then can freely 
                     send / receive messages to other endpoints just by referencing the name each endpoint 
                     bound to its transport.
                     .
                     A primary driver of this package's design is separation of concerns: many algorithms
                     (especially for distributed applications) depend upon a message-passing foundation,
                     but the algorithms are sufficiently complex that the details of how those messages
                     are transmitted among nodes are best hidden away and solved separately from
                     the distributed algorithm itself.  With this in mind, this package aims
                     to provide a variety of transports as well as support for common communication
                     idioms (e.g., in order message delivery, selective out of order message delivery,
                     synchronous RPC, etc.). 
                     .
                     Applications may process messages in the order received at an endpoint, or use
                     selective message reception to process the first message arriving at an endpoint
                     that also matches a provided selection function. Through selective message reception,
                     applications may approximate the style of an Erlang application, and enjoy better 
                     composability of message reception with multiple independent dispatch routines or
                      message pumps.
                     
extra-source-files:  changes.md
                     examples/HelloWorld.hs
homepage:          http://github.com/hargettp/courier
license:             MIT
license-file:        LICENSE
author:              Phil Hargett
maintainer:          phil@haphazardhouse.net
copyright:           Copyright (c) 2013-14 Phil Hargett

category:            Network,Distributed Computing,Message-Oriented
build-type:          Simple
cabal-version:       >=1.8

source-repository head
  type:     git
  location: https://github.com/hargettp/courier.git

library
  hs-source-dirs: src

  exposed-modules:
                  Network.Endpoints
                  Network.Transport
                  Network.Transport.Memory
                  Network.Transport.TCP
                  Network.Transport.UDP
                  Control.Concurrent.Mailbox
                  Network.RPC

  ghc-options: -Wall
  other-modules:
                  Network.Transport.Sockets
                  Network.Transport.Internal
  build-depends:       base >=4 && <5,
                       async,
                       bytestring,
                       cereal,
                       containers,
                       hslogger,
                       network,
                       stm,
                       text,
                       uuid

Test-Suite test-courier
    type: exitcode-stdio-1.0
    hs-source-dirs: tests
    main-is: Tests.hs
    build-depends: 

        -- base modules
        base, 
        -- testing support
        HUnit, 
        test-framework,
        test-framework-hunit,
        -- Cabal,
        -- 3rd party modules
        async,
        cereal,
        containers,
        directory,
        hslogger,
        stm,
        -- this project's modules
        courier

    ghc-options: -Wall -threaded
