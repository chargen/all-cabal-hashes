-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:b3ca205f1ccad8bbaca11fc27cfc2250
    SHA1:ebc7e8ef5c480b12b522da366fba609441445dab
    SHA256:7172adde89597a81c7e696142540cc390dfcdb8204c931fc2b383c1cd08bf1a4
    SHA512:2063352aee6b728f6e35527e6446ef971d763e5bbc4dda1a644dc5395c81a9d98ee938f109fc531b50e3a7a0adad4c9f523c7ae0241f28f4c1b3ae8606e60836
    Skein512_512:59cf420e0bdc28aca07272f61062804d8c1865a410f5d8295364a4c9804bcf2054679d8154bce9c29c5fcd3c13fb8d173dedada448421a2426f4909a7a5f5c7c

package-locations:
    https://hackage.haskell.org/package/courier-0.1.0.7/courier-0.1.0.7.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/courier-0.1.0.7.tar.gz

package-size: 11931
-- END Added by all-cabal-hashes-tool

-- Initial courier.cabal generated by cabal init.  For further 
-- documentation, see http://haskell.org/cabal/users-guide/

name:                courier
version:             0.1.0.7
synopsis:           A message-passing library for simplifying network applications
description:         Inspired by Erlang's simple message-passing facilities, courier provides roughly similar 
                     capabilities. Applications simply create one or more endpoints, 
                     bind each to a transport using a given name, then can freely 
                     send / receive messages to other endpoints just by referencing the name each endpoint 
                     bound to its transport.
                     .
                     Note that while the simplicity is inspired by Erlang, the actual semantics of a receive 
                     operation are not: receive just returns the next message delivered to an endpoint by a 
                     transport. There is no attempt to perform pattern-matching on a range of alternatives, 
                     and thus enabling out-of-order receipt. Consequently, all messages delivered to an endpoint 
                     will always be received in the order delivered. In this sense, endpoints are more akin to 
                     channels in Go but without the strict typing.
                     
extra-source-files:  changes.md
homepage:          http://github.com/hargettp/courier
license:             MIT
license-file:        LICENSE
author:              Phil Hargett
maintainer:          phil@haphazardhouse.net
copyright:           Copyright (c) 2013 Phil Hargett

category:            Network,Distributed Computing,Message-Oriented
build-type:          Simple
cabal-version:       >=1.8

source-repository head
  type:     git
  location: https://github.com/hargettp/courier.git

library
  hs-source-dirs: src

  exposed-modules:
                  Network.Endpoints
                  Network.Transport
                  Network.Transport.Memory
                  Network.Transport.TCP
                  Network.Transport.UDP

  ghc-options: -Wall
  other-modules:
                  Network.Transport.Sockets
                  Network.Transport.Internal
  build-depends:       base >=4 && <5,
                       async,
                       bytestring,
                       cereal,
                       containers,
                       hslogger,
                       network,
                       network-simple,
                       stm,
                       text

Test-Suite test-courier
    type: exitcode-stdio-1.0
    hs-source-dirs: tests
    main-is: Tests.hs
    build-depends: 

        -- base modules
        base, 
        -- testing support
        HUnit, 
        test-framework,
        test-framework-hunit,
        -- Cabal,
        -- 3rd party modules
        cereal,
        directory,
        hslogger,
        network-simple,
        -- this project's modules
        courier

    ghc-options: -Wall -threaded
