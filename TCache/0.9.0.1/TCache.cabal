-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:b6d07448938446c6b8d9e0d677393858
    SHA1:cd030456035a10116e089e793a2fdc210ebd6555
    SHA256:e486076722a19ef32961608606404fa4252b8dd8ce24228fe913fdadb3158a05
    SHA512:ed6a3fccd6b4e89cd1d17820c6c77e62871626618a53c8d4af5620aae40362133e1b46ea7434fb2515e2be0772b7b5cdefa59e16d54121367b4ec9d772535cf0
    Skein512_512:5d5ee310bb124eed9396b31928811d8fe63d4d02e0771e8e6b98cea9dc1a82842fbccd107455397dbb854fed604a52cf13eb79794615470aa95c02502300d27e

x-package-locations:
    https://hackage.haskell.org/package/TCache-0.9.0.1/TCache-0.9.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/TCache-0.9.0.1.tar.gz

x-package-size: 25411
-- END Added by all-cabal-hashes-tool

name:                TCache
version:             0.9.0.1
synopsis:            A Transactional cache with user-defined persistence
description:
    TCache is a transactional cache with configurable persitence. It allows conventional
    STM transactions for objects that syncronize  with
    their user defined storages. Default persistence in files is provided for testing purposes
    State in memory and into permanent storage is transactionally coherent.

    0.9.0.1 : Solves a bug when object keys generate invalid filenames.
    .
    0.9: This version now has full text search. Serialization is now trough byteStrings

    .
    This version support  the backward compatible stuff, that permits transparent
    retrievals of objects and transcactions between objects without directly using STM references
    ('with*Resource(s)' calls), Now it goes in the oposite direction by providing explicit STM persistent
    references (called 'DBRefś') that leverage the nice and traditional haskell reference syntax
    for performing database transactions.
    .
    'DBRef's are in essence, persistent TVars indexed in the cache, with a traditional 'readDBRef',
     'writeDBRef' Haskell interface in the STM monad.
    Additionally, because DBRefs are serializable, they can be embeded in serializable registers.
    Because they are references,they point to other serializable registers.
    This permits persistent mutable and efficient Inter-object relations.
    .
    Triggers are also included in this release. They are user defined hooks that are called back on register updates. That can be used for
     easing the actualization of inter-object relations and also permit more higuer level
     and customizable accesses. The internal indexes used for the query language uses triggers.
    .
    It also  implements an straighforwards non-intrusive pure-haskell type safe query language  based
    on register field relations. This module must be imported separately. See
    "Data.TCache.IndexQuery" for further information
    .
    Now the file persistence is more reliable.The IO reads are safe inside STM transactions.
    .
    To ease the implementation of other user-defined persistence, "Data.TCache.DefaultPersistence" needed
    to be imported  explcitly for deriving file persistence instances.
    .
    The 0.9 version adds full text indexation and search, incorporated in the experimental query language
    .
    It also changes the default Persistence mechanism. Now ByteStrings are used for serialization and deserialization
    . a Serializable class and a Persist structure decouple serialization to/from bytestring
    and write-read to file. Both can be redefined separately, so default persistence can be changed with `setPersist`
    to write to blobs in databases, for example. Default persistence has'nt to be in files.

category:            Data, Database, Concurrency
license:             BSD3
license-file:        LICENSE
author:              Alberto Gómez Corona
maintainer:          agocorona@gmail.com
Tested-With:         GHC == 7.0.3
Build-Type:          Simple
build-Depends:       base >=4 && <5,directory >= 1.0, old-time >=1.0,stm>=2, containers >= 0.1.0.1,transformers >=0.2 && <0.3, text, bytestring


exposed-modules:   Data.TCache, Data.TCache.DefaultPersistence
                   , Data.TCache.IndexQuery,Data.TCache.IndexText, Data.TCache.Triggers
                   , Data.TCache.IResource, Data.TCache.Defs

extra-source-files: demos/basicSample.hs
                    demos/caching.hs
                    demos/DBRef.hs
                    demos/DynamicSample.hs
                    demos/IndexQuery.hs
                    demos/triggerRelational.lhs
ghc-options:
