-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:7d360f9ca4d6ad596142a3d0757a4227
    SHA1:e6929b8b5ad1991fbdad579d38e9f25513f7c4d6
    SHA256:a2c918ebbe33de676569521e784ec10573d66a24adf4255026288afb4db3a0bb
    SHA512:0ff3590dbd6165fdfca7f6b85221db7440aeef0616fc98664b4f50a6c838eb73781782bb20e7d561a0309c8fa3cadc0071a412459295dd51d4cc6c0b1a9aa753
    Skein512_512:72670b518b5bcd00212f31b1d7da4bc3a9e8c0e2ad8b8f0faa0af8a6c525760fe013a78095a7c03bfc17dfb876c6eef74a9b8e145e3ab9c0d99dc570f7d84a1e

x-package-locations:
    https://hackage.haskell.org/package/TCache-0.8.0.2/TCache-0.8.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/TCache-0.8.0.2.tar.gz

x-package-size: 17787
-- END Added by all-cabal-hashes-tool

name:                TCache
version:             0.8.0.2
synopsis:            Data caching and Persistent STM transactions
description:

    TCache is a transactional cache with configurable persitence. It allows conventional
    STM transactions for objects that syncronize  with
    their user defined storages. Default persistence in files is provided for testing purposes
    .
    This version support  the backward compatible stuff, that permits transparent
    retrievals of objects and transcactions between objects without directly using STM references
    ('with*Resource(s)' calls), Now it goes in the oposite direction by providing explicit STM persistent
    references (called 'DBRefś') that leverage the nice and traditional haskell reference syntax
    for performing database transactions.
    .
    'DBRef's are in essence, persistent TVars indexed in the cache, with a traditional 'readDBRef',
     'writeDBRef' Haskell interface in the STM monad.
    Additionally, because DBRefs are serializable, they can be embeded in serializable registers.
    Because they are references,they point to other serializable registers.
    This permits persistent mutable and efficient Inter-object relations.
    .
    Triggers are also included in this release. They are user defined hooks that are called back on register updates. That can be used for
     easing the actualization of inter-object relations and also permit more higuer level
     and customizable accesses. The internal indexes used for the query language uses triggers.
    .
    It also  implements an straighforwards non-intrusive pure-haskell type safe query language  based
    on register field relations. This module must be imported separately. See
    "Data.TCache.IndexQuery" for further information
    .
    Now the file persistence is more reliable.The IO reads are safe inside STM transactions.
    .
    To ease the implementation of other user-defined persistence, "Data.TCache.FIlePersistence" needed
    to be imported  explcitly for deriving file persistence instances.
    .
    In this release some stuff has been supressed without losing functionality. Dynamic interfaces
    are not needed since TCache can handle heterogeneous data.



category:            Data, Database, Concurrency
license:             BSD3
license-file:        LICENSE
author:              Alberto Gómez Corona
maintainer:          agocorona@gmail.com
Tested-With:         GHC == 7.0
Build-Type:          Simple
build-Depends:       base >=4 && <5,directory >= 1.0, old-time >=1.0,stm>=2, containers >= 0.1.0.1,  transformers >=0.2 && <0.3


exposed-modules:   Data.TCache, Data.TCache.FilePersistence
                   , Data.TCache.IndexQuery, Data.TCache.Triggers
                   , Data.TCache.IResource, Data.TCache.Defs
ghc-options:       -O2
