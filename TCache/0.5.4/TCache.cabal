name:                TCache
version:             0.5.4
synopsis:            A Transactional data cache with configurable persistence 
description: 
        This version correct an error in the version 0.5.3. since 0.5 nothing in the code has changed except that
        the  "&& <4" in the build dependencies added in the 0.5.3 the behaviour of getClocktime to be lazy, that indeed
        makes the cache write algoritm not to work, with the result tha no file is written. 
        This version force the strict evaluation and correct this error.
           
        Data.Tcache is a transactional cache with configurable persistence. It tries to simulate Hibernate 
        for Java or Rails for Ruby. The main difference is that transactions are done in memory trough STM. 
        There are transactional cache implementations for some J2EE servers like JBOSS.

        TCache uses STM . It can  atomically apply a function to a list of cached objects. The resulting 
        objects go back to the cache (withResources). It also can retrieve these objects (getResources).  
        Persistence can be syncronous (syncCache)  or asyncronous, wtih configurable time between cache 
        writes and configurable cache clearance strategy. the size of the cache can be configured too . 
        All of this can be done trough clearSyncCacheProc. Even the TVar variables can be accessed 
        directly (getTVar) to acceess all the semantic of atomic blocks while maintaining the persistence of the 
        TVar updates.

        Persistence can be defined for each object.: Each object must have a defined key, a default filename
        path (if applicable). Persistence is pre-defined in files, but the readResource writeResource and 
        delResource methods can be redefined to persist in databases or whatever.

        There is a Sample.hs that explain the main features.



category:            Middleware
license:             BSD3
license-file:        LICENSE
author:              Alberto GÃ³mez Corona
maintainer:          agocorona@gmail.com
Tested-With:         GHC == 6.8.2
Build-Type:          Simple
build-Depends:       base >=3 && <4,directory >= 1.0, old-time >=1.0
Cabal-Version:       >= 1.2

exposed-modules:   Data.TCache
ghc-options:       


package-hashes:
    MD5:712808faf9193418671dea4b04ccb494
    SHA1:c31cabef0ed8217ae3aea53882b7e5919c03e719
    SHA256:ef9901b49cc684afc6d70d012837367eb8c2d2ee36e4311429c34912f7c55deb
    SHA512:bd64350cabe6877da713da755cfeb6b34f26adb3b8d69f49e9ec79ad9759bf8b92bf3a7cc342bb0f9dabf2af5ad81b97455d78e2ba337cf1fb252888c4f750ea
    Skein512_512:cf52ee9a5298f6792c842bbf8b0296b8f1e4f283b3ba5ecb7c745435636e9de58345ae8468418ea10a0e4d33db6c07b0702fa923b5e5e39640d097523346d777

package-locations:
    https://hackage.haskell.org/package/TCache-0.5.4/TCache-0.5.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/TCache-0.5.4.tar.gz

package-size: 7752
