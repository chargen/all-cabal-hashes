name:                TCache
version:             0.5.5
synopsis:            A Transactional data cache with configurable persistence 
description: 
        Data.Tcache is a transactional cache with configurable persistence. It tries to simulate Hibernate 
        for Java or Rails for Ruby. The main difference is that transactions are done in memory trough STM. 
        There are transactional cache implementations for some J2EE servers like JBOSS.

        TCache uses STM. It can  atomically apply a function to a list of cached objects. The resulting 
        objects go back to the cache (withResources). It also can retrieve these objects (getResources).  
        Persistence can be syncronous (syncCache)  or asyncronous, wtih configurable time between cache 
        writes and configurable cache clearance strategy. the size of the cache can be configured too . 
        All of this can be done trough clearSyncCacheProc. Even the TVar variables can be accessed 
        directly (getTVar) to acceess all the semantic of atomic blocks while maintaining the persistence of the 
        TVar updates.

        Persistence can be defined for each object: Each object must have a defined key, a default filename
        path (if applicable). Persistence is pre-defined in files, but the readResource writeResource and 
        delResource methods can be redefined to persist in databases or whatever.

        There are  Samples here that explain the main features.
        
        
        In this release:
           Added a Data.TCache.Dynamic.  (SEE dynamicsample.hs)
             - Can handle, transact, and serialize to disk many datatypes simultaneously and incrementally
             - Dynamic uses the same interface than TCache and add *DResource(s) calls 
             - Safe dynamic data handling trough a lighter, indexable and serializable version of Data.Dynamic
             - Added KEY object for retrieving any object of any type.


category:            Middleware
license:             BSD3
license-file:        LICENSE
author:              Alberto GÃ³mez Corona
maintainer:          agocorona@gmail.com
Tested-With:         GHC == 6.8.2
Build-Type:          Simple
build-Depends:       base >=3 && <4,directory >= 1.0, old-time >=1.0,stm>=2
Cabal-Version:       >= 1.2

exposed-modules:   Data.TCache, Data.TCache.Dynamic
ghc-options:       


package-hashes:
    MD5:6c0dca5127cd3b9938a17d7224c7b8c7
    SHA1:5bf4121f500216bec6ad7f7d1332afb5a251bb7f
    SHA256:41a44035faa80d6adaf092b174b14c0f6c08b5004e07c649ed9c82735030b895
    SHA512:80446f41e1e3753cada7abe003f7db563adb5ffcb105a5f13e9006eb998a373fbceb3caf9216f9b786a9a6cdfd92711934d591e338bfb059a7f7bae06c7f56d1
    Skein512_512:aa12d78333d4f8d0aba770915308391ba8a2d9dd6451202934cb87bfa050e81fb9a4ef24e26311a7b8705875094b35ea4e3bfa2746948cab8c2c9e6013d7e264

package-locations:
    https://hackage.haskell.org/package/TCache-0.5.5/TCache-0.5.5.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/TCache-0.5.5.tar.gz

package-size: 11819
