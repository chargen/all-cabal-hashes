-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:e019e5ffbd172d4ea5d286c320ada9c2
    SHA1:7edd0172be6ffa3f486888b508ac6425febd4a77
    SHA256:bc93ed24089db70b51ff86acd3e7e73cac06a089addd49798ad39c09afd42ca5
    SHA512:6785e75f65d67e704c1689f30e1e544e657f7ba5d211f112f72df65e2a854b9f2f5824a248285ce1acaf7697add6150426abd83121768ea51eb603608a6d734d
    Skein512_512:6579e5e8b0294bfd1725c3db7f21a9ce53bdda0cd15a28e1a62d434aaf004cc4e3970556f5c6f0347e120351ac58d3b1502284193c75b04a2a7aa5e5aabe9349

x-package-locations:
    https://hackage.haskell.org/package/normaldistribution-1.0/normaldistribution-1.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/normaldistribution-1.0.tar.gz

x-package-size: 3307
-- END Added by all-cabal-hashes-tool

Name:                normaldistribution
Version:             1.0
License:             BSD3
License-File:        LICENSE
Copyright:           Bjorn Buckwalter 2011
Author:              Bjorn Buckwalter 
Maintainer:          bjorn.buckwalter@gmail.com
Stability:           Stable
Homepage:            https://github.com/bjornbm/normaldistribution
Synopsis:

    Minimum fuss normally distributed random values.

Description:

    This purpose of this library is to have a simple API and no
    dependencies beyond Haskell 98 in order to let you produce
    normally distributed random values with a minimum of fuss. This
    library does /not/ attempt to be blazingly fast nor to pass
    stringent tests of randomness. It attempts to be very easy to
    install and use while being \"good enough\" for many applications
    (simulations, games, etc.). The API builds upon and is largely
    analogous to that of the Haskell 98 @Random@ module (more
    recently @System.Random@).
    .
    Pure:
    .
    > (sample,g) = normal  myRandomGen  -- using a Random.RandomGen
    > samples    = normals myRandomGen  -- infinite list
    > samples2   = mkNormals 10831452   -- infinite list using a seed
    .
    In the IO monad:
    .
    > sample    <- normalIO
    > samples   <- normalsIO  -- infinite list
    .
    With custom mean and standard deviation:
    .
    > (sample,g) = normal'    (mean,sigma) myRandomGen
    > samples    = normals'   (mean,sigma) myRandomGen
    > samples2   = mkNormals' (mean,sigma) 10831452
    .
    > sample    <- normalIO'  (mean,sigma)
    > samples   <- normalsIO' (mean,sigma)
    .
    Internally the library uses the Central Limit Theorem to
    approximate normally distributed values from multiple uniformly
    distributed random values.

Category:            Math, Statistics
Build-Type:          Simple
Build-Depends:       base < 5, haskell98 < 1.1
Exposed-Modules:     Data.Random.Normal
Extra-source-files:  README, LICENSE
