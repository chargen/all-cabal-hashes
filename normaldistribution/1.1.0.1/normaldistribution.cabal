-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:c6bf10e1635f802d0099620c88d4b764
    SHA1:b9a9bfe2f0662f3b7cd0ad723355e0082302b788
    SHA256:217c5be4df6e880ecfbc82f3f3afb48a21a7e7e44fccb2b88fa84a961d54fe0a
    SHA512:320d7ff27315d82e9614d5cb09ff78f168fe07ab7118f7f4a2f8396a1849a24855ee73151a447d9ff71f689c115f81e7a6c706a4c15262116c8a460c0d1351eb
    Skein512_512:a2fa081c9e4ff7eceb7817fa671f60bbf22401779fa463bdbec21897673b2c6db21b6c7b6b4f0f10554ace4021a0145262cb42834381df70d035f8dedc9d85b8

x-package-locations:
    https://hackage.haskell.org/package/normaldistribution-1.1.0.1/normaldistribution-1.1.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/normaldistribution-1.1.0.1.tar.gz

x-package-size: 3413
-- END Added by all-cabal-hashes-tool

Name:                normaldistribution
Version:             1.1.0.1
License:             BSD3
License-File:        LICENSE
Copyright:           Bjorn Buckwalter 2011
Author:              Bjorn Buckwalter 
Maintainer:          bjorn.buckwalter@gmail.com
Stability:           Stable
Homepage:            https://github.com/bjornbm/normaldistribution
Synopsis:

    Minimum fuss normally distributed random values.

Description:

    This purpose of this library is to have a simple API and no
    dependencies beyond Haskell 98 in order to let you produce
    normally distributed random values with a minimum of fuss. This
    library does /not/ attempt to be blazingly fast nor to pass
    stringent tests of randomness. It attempts to be very easy to
    install and use while being \"good enough\" for many applications
    (simulations, games, etc.). The API builds upon and is largely
    analogous to that of the Haskell 98 @Random@ module (more
    recently @System.Random@).
    .
    Pure:
    .
    > (sample,g) = normal  myRandomGen  -- using a Random.RandomGen
    > samples    = normals myRandomGen  -- infinite list
    > samples2   = mkNormals 10831452   -- infinite list using a seed
    .
    In the IO monad:
    .
    > sample    <- normalIO
    > samples   <- normalsIO  -- infinite list
    .
    With custom mean and standard deviation:
    .
    > (sample,g) = normal'    (mean,sigma) myRandomGen
    > samples    = normals'   (mean,sigma) myRandomGen
    > samples2   = mkNormals' (mean,sigma) 10831452
    .
    > sample    <- normalIO'  (mean,sigma)
    > samples   <- normalsIO' (mean,sigma)
    .
    Internally the library uses the Box-Muller method to generate
    normally distributed values from uniformly distributed random values.
    If more than one sample is needed taking samples off an infinite
    list (created by e.g. 'normals') will be roughly twice as efficient
    as repetedly generating individual samples with e.g. 'normal'.

Category:            Math, Statistics
Build-Type:          Simple
Build-Depends:       base < 5, haskell98 < 1.2
Exposed-Modules:     Data.Random.Normal
Extra-source-files:  README, LICENSE
