-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:23b683e72d505e05fc08e101848b9233
    SHA1:8f9a26382615ab9a98646c289f512ca30a4981cb
    SHA256:294ea54e3ceb01a7ace0f7ea747cce592c8e47cca53a1503a593e8b901cb1575
    SHA512:16bf78b6fd91fc4dec47314f7f09ecd8f19205ecb8fbdc46843b88e26e2f95b4b6a5245078933cc9c31eede38754daaedd87c5d2ea165588207e359dc10371fa
    Skein512_512:042bfbed14a21e1da695b33fc556e7fced60ffc1f4b577fdcd495974520686f6d4219568ee5beab7de2e3cb8c4e191199f98996b4a1080a4ce15b6820115bdb7

x-package-locations:
    https://hackage.haskell.org/package/type-digits-0.2/type-digits-0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/type-digits-0.2.tar.gz

x-package-size: 3133
-- END Added by all-cabal-hashes-tool

Name:           type-digits
Version:        0.2
License:        BSD3
License-File:   LICENSE
Author:         Nicolas Frisby <nicolas.frisby@gmail.com>
Maintainer:     Nicolas Frisby <nicolas.frisby@gmail.com>

Category: Type System

Synopsis:       Arbitrary-base type-level digits

Description: This is a workaround until type-level literals (specifically
  naturals) are more fully supported. The main difference is that these
  types-level digits and numerals can be inspected/case-discriminated within
  type family instances. See the @type-ord@ and @type-cereal@ packages for use
  cases; they ultimately support the @yoko@ package.

  Arbitrary type-level digits, for when the radix itself doesn't
  actually matter. It's currently base-128, because that seemed to best
  expedite the compilation of the modules with which I using this
  package. Please let me know what you find if you experiment with this.

  'Type.Digits.radix' is the (arbitrary) radix. 'Type.Digits.digit' computes
  the 'NameG' of a digit from its value (assuming its less than the
  radix). Combinators are provided to compute a full type-level numeral from
  values (potentially) larger than the radix.

  The digits themselves all take less significant numeral as an argument. I
  chose this over minimal digits in promoted lists because I wanted to keep the
  actual encoding of type-level numeral smaller; they get quite large with some
  of my uses and the type family computation becomes quite slow.

Cabal-Version: >= 1.6.0.1

Build-Type: Simple


Library
  Build-Depends: base >= 4 && < 5, template-haskell
  Build-Depends: type-spine >= 0.2

  Exposed-Modules: Type.Digits, Type.Digits.Aux, Type.Digits.Stage0, Type.Digits.Stage1
