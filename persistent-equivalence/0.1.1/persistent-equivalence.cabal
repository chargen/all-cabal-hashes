-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:eadf3651a5c3bac35b260608676c6c1e
    SHA1:fa3a2997e65bd56c9a011fea5018dfaf965db89f
    SHA256:2e7f8bb5909b8afa8fec985b20f9989dd6cceb558d5e6a975457600c8278f646
    SHA512:20c037aebf4e4d30b41316621bf8ebcbed91fffa08a6aad24b3dd34052ba49b17a1cdf2de0b9d4504aa048997159e672587c39c89152abe81f6f4990f3f83c1a
    Skein512_512:0aea204b81b2ce70bf2155761c219e7f70ea8fd1ec84d6c6a88a1c2a1904b7a20918ada2e6d549e6ab5b659012a85818a3f7285ffd3d5671ba54ffb513f9fa1e

x-package-locations:
    https://hackage.haskell.org/package/persistent-equivalence-0.1.1/persistent-equivalence-0.1.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/persistent-equivalence-0.1.1.tar.gz

x-package-size: 3203
-- END Added by all-cabal-hashes-tool

Name:                persistent-equivalence
Version:             0.1.1
Synopsis:            Persistent equivalence relations (aka union-find)
Description:         This is a semi-persistent data structure for equivalence
                     relations (known in the imperative world as union-find
                     or disjoint set union).  It exhibits optimal performance
                     when used in a linear pattern, but degrades when other
                     access patterns are used.
                     .
                     The basic idea is as given by Conchon and Filliatre in
                     their 2007 paper "A persistent union-find data structure."
                     Unlike the implementation given in the paper, this version
                     is safe with multiple threads, but does not optimize
                     for backtracking.
License:             BSD3
License-file:        LICENSE
Author:              Chris Smith <cdsmith@gmail.com>
Maintainer:          Chris Smith <cdsmith@gmail.com>
Category:            Data
Build-type:          Simple
Cabal-version:       >=1.6

Library
  Exposed-modules:   Data.Equivalence.Persistent
  Build-depends:     base >= 3 && < 5,
                     array == 0.3.*,
                     diffarray == 0.1.*
