-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:884880e0c9cab2ff4a45f3ae66fad6d7
    SHA1:cb8746bee44c01ddb940c79427d3a668c5f96267
    SHA256:46be5f27d4274a8b1a3adf8d08970f4a13ef1f1e26a522add37d8f4e49e2f5f3
    SHA512:45200c492b271d871e945b82f6428fa7f904f2fd098918b528e9c08bfa177bb238a783f44f205c1b38a0d5f060f592a7553dcb39626095bea0aa444262c13212
    Skein512_512:702573cc3270f3e79238bc9485164849b99777540ce699c586c41d7bb05135782149eb262db3997f5871bd207a99d372ac1551560ee0dfbccfa167570c6e53a6

package-locations:
    https://hackage.haskell.org/package/unique-logic-0.2/unique-logic-0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/unique-logic-0.2.tar.gz

package-size: 6003
-- END Added by all-cabal-hashes-tool

Name:             unique-logic
Version:          0.2
License:          BSD3
License-File:     LICENSE
Author:           Henning Thielemann
Maintainer:       Henning Thielemann <haskell@henning-thielemann.de>
Homepage:         http://code.haskell.org/~thielema/unique-logic/
Category:         Logic programming
Synopsis:         Solve simple simultaneous equations
Description:
  Solve a number of equations simultaneously.
  This is not Computer Algebra,
  better think of a kind of type inference algorithm
  or logic programming with only one allowed solution.
  .
  Only one solution is computed.
  Simultaneous equations with multiple solutions are not allowed.
  However, variables may remain undefined.
  We do not even check for consistency,
  since with floating point numbers even simple rules may not be consistent.
  .
  The modules ordered with respect to abstraction level:
  .
  * "UniqueLogic.ST.System":
    Construct and solve sets of functional dependencies.
    Example: @assignment3 (+) a b c@ meaning dependency @a+b -> c@.
  .
  * "UniqueLogic.ST.Rule":
    Combine functional dependencies to rules
    that can apply in multiple directions.
    Example: @add a b c@ means relation @a+b = c@
    which resolves to dependencies @a+b -> c, c-a -> b, c-b -> a@.
  .
  * "UniqueLogic.ST.Expression":
    Allow to write rules using arithmetic operators.
    It creates temporary variables automatically.
    Example: @(a+b)*c =:= d@ resolves to @a+b = x, x*c = d@.
Tested-With:       GHC==7.4.2
Cabal-Version:     >=1.8
Build-Type:        Simple

Source-Repository this
  Tag:         0.2
  Type:        darcs
  Location:    http://code.haskell.org/~thielema/unique-logic/

Source-Repository head
  Type:        darcs
  Location:    http://code.haskell.org/~thielema/unique-logic/

Library
  Build-Depends:
    transformers >=0.2 && <0.4,
    utility-ht >=0.0.1 && <0.1,
    base >= 4 && <5
  GHC-Options:      -Wall
  Hs-Source-Dirs:   src

  Exposed-modules:
    UniqueLogic.ST.System
    UniqueLogic.ST.Rule
    UniqueLogic.ST.Expression

Test-Suite test-unique-logic
  Type:    exitcode-stdio-1.0
  Main-Is: src/UniqueLogic/ST/Test.hs
  GHC-Options: -Wall
  Build-Depends:
    QuickCheck >=2.4 && <2.6,
    unique-logic,
    non-empty >=0.0 && <0.1,
    transformers,
    utility-ht,
    base
