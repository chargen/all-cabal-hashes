-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:04a7dc021bfd71dc8fa63a0b57a00683
    SHA1:03732ef165ab5f97f5760ea6c17aed55aefc3a50
    SHA256:27d69fdb778af4284e800b17c34abd74dd466af08bbef7b15b6fee4ba5657d09
    SHA512:24139eb3c654074f4a3f73f4310cd3d004af1dcf1234ba832fa021a0674b85c00af57cdaea684a1bea5f8dc4a11585510633dc0ca35b7f227548f925efa7e537
    Skein512_512:d2ea6a941d02f4500736103a6abf8bfb1c86e96042581730064aae4157bf482faf28471133eface3c1da8c77c6180ef3cffa6cb12339d0f3add052394c6dafb9

x-package-locations:
    https://hackage.haskell.org/package/greencard-3.0.4/greencard-3.0.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/greencard-3.0.4.tar.gz

x-package-size: 62516
-- END Added by all-cabal-hashes-tool

Name: greencard
Version: 3.0.4
Synopsis: GreenCard, a foreign function pre-processor for Haskell.
Description:
   Green Card is a foreign function interface preprocessor for Haskell, simplifying the
   task of interfacing Haskell programs to external libraries (which are normally
   exposed via C interfaces).
   .
   To interface to an external function using Green Card, you write a small procedure
   specification. The specification tells Green Card what (Haskell) type you want to
   give the function together with details of how the arguments (and results) to the
   Haskell function should be marshalled to and from the data representation used by
   the external function. Green Card will then generate gobs of low-level boilerplate
   code that takes care of all the details.
   .
   For an example of a simple GreenCard module, have a look at @examples\/world\/World.gc@
   .
   Along with the @greencard@ application binary, this package also supplies the @greencard@
   library/package, consisting of the single module @Foreign.GreenCard@ containing the default
   GreenCard marshalling functions.
Category: Foreign
License: BSD3
License-file: LICENSE
Author: Alastair Reid <alastair@reid-consulting-uk.ltd.uk>, Sigbjorn Finne <sof@forkIO.com>, Thomas Nordin.
Maintainer: Sigbjorn Finne <sof@forkIO.com>
Cabal-version: >= 1.2
Build-type: Simple
Extra-source-files: README
                    INSTALL
                    ANNOUNCE
                    Makefile
                    examples/Makefile
                    examples/world/Makedefs.ghc
                    examples/world/Makefile.hugs-linux
                    examples/world/Makefile.hugs-win32
                    examples/world/Makefile.ghc-win32
                    examples/world/Makefile.ghc-linux
                    examples/world/World.gc
                    examples/world/README.txt
                    examples/world/Makedeps
                    examples/world/Main.hs
                    examples/Gdbm/Makefile
                    examples/Gdbm/Main.hs
                    examples/Gdbm/Gdbm.gc
                    examples/Gdbm/diffs
                    examples/Gdbm/gdbmplus.h
                    examples/Gdbm/README
		    lib/package.conf.in
		    lib/Makefile
                    src/greencard.hugs.in
                    src/greencard.ghc.in
                    src/Parse.ly
                    src/Package.lhs.in
                    src/Makefile

library {
  hs-source-dirs: lib
  Exposed-Modules: Foreign.GreenCard
  include-dirs: lib
  install-includes: GreenCard.gc
  build-depends: base <= 5
}

executable greencard {
  main-is:        GreenCard.lhs
  build-depends:  base <= 5, pretty, containers, array
  hs-source-dirs: src
  c-sources:      src/ErrorHook.c
  other-modules:  Process
                  Package
                  Lex
                  Proc
                  Parse
                  Type
                  Target
                  PrettyUtils
                  MarshallMonad
                  ListUtils
                  LexM
                  FillIn
                  ErrMonad
                  DIS
                  Decl
                  Casm
                  GCToken
                  NameSupply
                  FillInMonad
                  Name
}
