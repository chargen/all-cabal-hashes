-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:50bd00c52596f59fde31088287e51ec7
    SHA1:00bfe5294d0d6cbeb15bd519edb1ae50f549d943
    SHA256:bbc721a46515cf16961aa67285d274502a64347bd400b64fa799d28d690dd468
    SHA512:8f26ff73dbe02bf8c7d513d7270ba59258d480592bef318ecb0699efc73064bdd97d349ac8c95e0d367bc71fe7a52ad1c8d91157453109e420e57f633544a567
    Skein512_512:fe3f8b8d4854671eeecfe00f6df08e5b337bd400d6d69648f4716741974e2e3a46ca6d51abfc1357af1fb6347e1ef8653adf663e0f6eaab0af556af2051c52bf

x-package-locations:
    https://hackage.haskell.org/package/graphviz-2999.17.0.1/graphviz-2999.17.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/graphviz-2999.17.0.1.tar.gz

x-package-size: 223527
-- END Added by all-cabal-hashes-tool

Name:               graphviz
Version:            2999.17.0.1
Stability:          Beta
Synopsis:           Bindings to Graphviz for graph visualisation.
Description: {
This library provides bindings for the Dot language used by the
Graphviz (<http://graphviz.org/>) suite of programs for visualising
graphs, as well as functions to call those programs.
.
Main features of the graphviz library include:
.
* Almost complete coverage of all Graphviz attributes and syntax.
.
* Support for specifying clusters.
.
* The ability to use a custom node type.
.
* Functions for running a Graphviz layout tool with all specified
  output types.
.
* The ability to not only generate but also parse Dot code with two
  options: strict and liberal (in terms of ordering of statements).
.
* Functions to convert FGL graphs and other graph-like data structures
  to Dot code - including support to group them into clusters - with a
  high degree of customisation by specifying which attributes to use
  and limited support for the inverse operation.
.
* Round-trip support for passing an FGL graph through Graphviz to
  augment node and edge labels with positional information, etc.
}

Homepage:           http://projects.haskell.org/graphviz/
Category:           Graphs, Graphics
License:            BSD3
License-File:       LICENSE.md
Copyright:          Matthew Sackman, Ivan Lazar Miljenovic
Author:             Matthew Sackman, Ivan Lazar Miljenovic
Maintainer:         Ivan.Miljenovic+graphviz@gmail.com
Bug-Reports:        http://hub.darcs.net/ivanm/graphviz/issues
Build-Type:         Simple
Cabal-Version:      >= 1.14
Extra-Source-Files: TODO.md
                    Changelog.md
                    README.md
                    FAQ.md
                    utils/AttributeGenerator.hs

Source-Repository head
    Type:         darcs
    Location:     http://hub.darcs.net/ivanm/graphviz

Flag test-parsing
     Description: Build a utility to test parsing of available Dot code.
     Default:     False

Library {
        Default-Language:  Haskell2010

        Build-Depends:     base == 4.*,
                           containers,
                           process,
                           directory,
                           temporary >=1.1 && <1.3,
                           fgl >= 5.4 && < 5.6,
                           filepath,
                           polyparse == 1.9.*,
                           bytestring >= 0.9 && < 0.11,
                           colour == 2.3.*,
                           transformers >= 0.2 && < 0.5,
                           text,
                           wl-pprint-text >= 1.1.0.0 && < 1.2.0.0,
                           dlist >= 0.5 && < 0.8

        Exposed-Modules:   Data.GraphViz
                           Data.GraphViz.Types
                           Data.GraphViz.Types.Canonical
                           Data.GraphViz.Types.Generalised
                           Data.GraphViz.Types.Graph
                           Data.GraphViz.Types.Monadic
                           Data.GraphViz.Parsing
                           Data.GraphViz.Printing
                           Data.GraphViz.Commands
                           Data.GraphViz.Commands.IO
                           Data.GraphViz.Attributes
                           Data.GraphViz.Attributes.Complete
                           Data.GraphViz.Attributes.Colors
                           Data.GraphViz.Attributes.Colors.X11
                           Data.GraphViz.Attributes.Colors.Brewer
                           Data.GraphViz.Attributes.Colors.SVG
                           Data.GraphViz.Attributes.HTML
                           Data.GraphViz.PreProcessing
                           Data.GraphViz.Exception
                           Data.GraphViz.Algorithms

                           Data.GraphViz.Attributes.Internal
                           Data.GraphViz.Internal.Util
                           Data.GraphViz.Internal.State
                           Data.GraphViz.Types.Internal.Common

        Other-Modules:     Data.GraphViz.Algorithms.Clustering
                           Data.GraphViz.Attributes.Arrows
                           Data.GraphViz.Attributes.ColorScheme
                           Data.GraphViz.Attributes.Same
                           Data.GraphViz.Attributes.Values
                           Data.GraphViz.Commands.Available
                           Data.GraphViz.Types.State

        if True
           Ghc-Options: -Wall

        if impl(ghc >= 6.12.1)
           Ghc-Options: -fno-warn-unused-do-bind

        Ghc-Prof-Options:  -prof -auto-all
}

Test-Suite graphviz-testsuite {
        Default-Language:  Haskell2010

        Type:              exitcode-stdio-1.0

        -- Versions controlled by library section
        Build-Depends:     base,
                           graphviz,
                           containers,
                           fgl,
                           filepath,
                           text,
                           QuickCheck >= 2.3 && < 2.8

        hs-Source-Dirs:    tests

        Main-Is:           RunTests.hs


        Other-Modules:       Data.GraphViz.Testing
                             Data.GraphViz.Testing.Instances
                             Data.GraphViz.Testing.Properties
                             Data.GraphViz.Testing.Instances.FGL
                             Data.GraphViz.Testing.Instances.Helpers
                             Data.GraphViz.Testing.Instances.Attributes
                             Data.GraphViz.Testing.Instances.Common
                             Data.GraphViz.Testing.Instances.Canonical
                             Data.GraphViz.Testing.Instances.Generalised
                             Data.GraphViz.Testing.Instances.Graph

        if True
           Ghc-Options: -O -Wall

        if impl(ghc >= 6.12.1)
           Ghc-Options: -fno-warn-unused-do-bind

        GHC-Prof-Options: -auto-all -caf-all -rtsopts
}

Benchmark graphviz-printparse {
        Default-Language: Haskell2010

        Type:             exitcode-stdio-1.0

        Build-Depends:    base,
                          deepseq,
                          text,
                          graphviz,
                          criterion >= 0.5 && < 0.9

        hs-Source-Dirs:   utils

        Main-Is:          Benchmark.hs

        if True
           Ghc-Options: -O -Wall

        if impl(ghc >= 6.12.1)
           Ghc-Options: -fno-warn-unused-do-bind

        GHC-Prof-Options: -auto-all -caf-all -rtsopts
}

Executable graphviz-testparsing {
        Default-Language: Haskell2010

        if flag(test-parsing)
           Buildable:     True
        else
           Buildable:     False

        hs-Source-Dirs:   utils

        Main-Is:          TestParsing.hs

        Build-Depends:    base,
                          graphviz,
                          bytestring,
                          directory,
                          filepath,
                          text

        Ghc-Options: -O -Wall

        GHC-Prof-Options: -auto-all -caf-all -rtsopts
}
