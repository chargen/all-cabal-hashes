-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:d6f523fa6e71e11ad459350e1f7f5fdf
    SHA1:2ddc693c0a780269c696955b3ab2fbe9029bb804
    SHA256:8d25b53819ec64a76e74c845b7c357f5866d1738edad9835cf8aa1c099e0669a
    SHA512:11842bd81600f3b28d29b2732f89395045bd5bb852270ecfd50f0109e46a1bd5fb20e976e22349decdf540254a59a7b9ddd471b3b3f5cf51758c157f69518b61
    Skein512_512:708fb0d3dd8f737ef56ddaf6d29591b4332f2c82687a3f71b23f87038966d135259cb4c3c445d0b6430db219609a7366016df3a0dd965d525ad08a467a1a8e7e

x-package-locations:
    https://hackage.haskell.org/package/graphviz-2999.8.0.0/graphviz-2999.8.0.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/graphviz-2999.8.0.0.tar.gz

x-package-size: 85302
-- END Added by all-cabal-hashes-tool

Name:               graphviz
Version:            2999.8.0.0
Stability:          Beta
Synopsis:           Graphviz bindings for Haskell.
Description: {
This library provides bindings for the Dot language used by the
Graphviz (<http://graphviz.org/>) suite of programs, as well as
functions to call the Grapvhiz programs.
.
Features of this library are:
.
* Almost complete coverage of all Graphviz attributes, etc. for
  graphs, sub-graphs, clusters, nodes and edges:
  <http://graphviz.org/doc/info/attrs.html>
.
* Thorough documentation on known problems with the library and how it
  differs from the actual Dot specification.
.
* Support for specifying clusters.
.
* The ability to use a custom node type.
.
* Functions for running a Graphviz layout tool with all specified
  output types.
.
* The ability to not only generate but also parse Dot code with two
  options: strict and liberal (in terms of ordering of statements).
.
* Functions to convert FGL graphs to Dot code - including support to
  group them into clusters - with a high degree of customisation by
  specifying which attributes to use.
.
* Round-trip support for passing an FGL graph through Graphviz to
  augment node and edge labels with positional information, etc.
}

Category:           Graphs, Graphics
License:            BSD3
License-File:       LICENSE
Copyright:          Matthew Sackman, Ivan Lazar Miljenovic
Author:             Matthew Sackman, Ivan Lazar Miljenovic
Maintainer:         Ivan.Miljenovic@gmail.com
Build-Type:         Simple
Cabal-Version:      >= 1.6
Extra-Source-Files: TODO
                    Changelog
                    README
                    Data/GraphViz/AttributeGenerator.hs

Source-Repository head
    Type:         darcs
    Location:     http://code.haskell.org/graphviz

Flag test
     Description: Build the test suite, including an executable to run it.
     Default: False

Library {
        Build-Depends:     base >= 3 && < 5,
                           extensible-exceptions,
                           containers,
                           process,
                           fgl,
                           filepath,
                           polyparse >= 1.1,
                           pretty,
                           bytestring < 0.10,
                           colour >= 2.3 && < 2.4

        Exposed-Modules:   Data.GraphViz
                           Data.GraphViz.Types
                           Data.GraphViz.Types.Generalised
                           Data.GraphViz.Parsing
                           Data.GraphViz.Printing
                           Data.GraphViz.Commands
                           Data.GraphViz.Attributes
                           Data.GraphViz.Attributes.Colors

        Other-Modules:     Data.GraphViz.Types.Clustering
                           Data.GraphViz.Types.Common
                           Data.GraphViz.Util
        if flag(test)
           Build-Depends:       QuickCheck >= 2.1 && < 2.2

           Exposed-Modules:     Data.GraphViz.Testing
                                Data.GraphViz.Testing.Properties

           Other-Modules:       Data.GraphViz.Testing.Instances
                                Data.GraphViz.Testing.Instances.FGL

        Ghc-Options:       -Wall
        Ghc-Prof-Options:  -prof -auto-all
}

Executable graphviz-testsuite {

        if flag(test)
           Buildable: True
        else
           Buildable: False

        Main-Is:           RunTests.hs

        GHC-Options: -O2
}
