-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:75d7cb498665ddef1f671b169c0c150e
    SHA1:3840e9f25bcde3eb525c582b71505e231a15e782
    SHA256:117bd562b8586c4b408aeddf61c483e056771dec5aabdcf227ef739ae3f6ec13
    SHA512:56a8f6fe19152e4944c92a57e1df0b32a96eb2f47d0beeae4f87cce41b5985efd375a644c024bad756d5c1e4801d69383f2d267de508ac6ef292bf8a58088775
    Skein512_512:5aa7109c69271bd8dfe6505814ff443b86e8632d7cf25151140081be36fcd27c10a4047397df0c8db3f3c1c240ca6c1506ee834423b93ea3bfa7d0ec1ffc7be9

x-package-locations:
    https://hackage.haskell.org/package/diagrams-cairo-1.3.0.1/diagrams-cairo-1.3.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/diagrams-cairo-1.3.0.1.tar.gz

x-package-size: 19110
-- END Added by all-cabal-hashes-tool

Name:                diagrams-cairo
Version:             1.3.0.1
Synopsis:            Cairo backend for diagrams drawing EDSL
Description:         A full-featured backend for rendering
                     diagrams using the cairo rendering engine.
                     .
                     This ultimately depends on a C library, via
                     Haskell's FFI, and can be difficult to install on
                     some platforms. If you are just looking for a
                     quick way to visualize diagrams, try the
                     diagrams-svg backend; if you want raster output
                     like PNG, try the diagrams-rasterific backend; if
                     you want to embed diagrams in LaTeX documents,
                     try diagrams-pgf.
                     .
                     * "Diagrams.Backend.Cairo.CmdLine" - if you're
                       just getting started with diagrams, begin here.
                     .
                     * "Diagrams.Backend.Cairo" - look at this next.
                       The general API for the cairo backend.
                     .
                     * "Diagrams.Backend.Cairo.Internal" - the
                       implementation guts of the cairo backend.
                       Users should normally not need to import this
                       module.
                     .
                     * "Diagrams.Backend.Cairo.List" - render diagrams
                       to two-dimensional lists of colors (/i.e./
                       pixels).
                     .
                     * "Diagrams.Backend.Cairo.Ptr" - render diagrams
                       to buffers in memory.
Homepage:            http://projects.haskell.org/diagrams
License:             BSD3
License-file:        LICENSE
Author:              Brent Yorgey
Maintainer:          diagrams-discuss@googlegroups.com
Bug-reports:         http://github.com/diagrams/diagrams-cairo/issues
Category:            Graphics
Build-type:          Simple
Cabal-version:       >=1.10
Extra-source-files:  CHANGELOG.md, README.markdown
Tested-with:         GHC == 7.6.3, GHC == 7.8.4, GHC == 7.10.1
Source-repository head
  type:     git
  location: http://github.com/diagrams/diagrams-cairo.git

Library
  Exposed-modules:     Diagrams.Backend.Cairo
                       Diagrams.Backend.Cairo.CmdLine
                       Diagrams.Backend.Cairo.Internal
                       Diagrams.Backend.Cairo.List
                       Diagrams.Backend.Cairo.Ptr
  Hs-source-dirs:      src
  Build-depends:       base >= 4.2 && < 4.9,
                       mtl >= 2.0 && < 2.3,
                       filepath,
                       diagrams-core >= 1.3 && < 1.4,
                       diagrams-lib >= 1.3 && < 1.4,
                       cairo >= 0.12.4 && < 0.14,
                       pango >= 0.12.5  && < 0.14,
                       colour,
                       split >= 0.1.2 && < 0.3,
                       containers >= 0.3 && < 0.6,
                       lens >= 3.8 && < 4.10,
                       data-default-class >= 0.0.1 && < 0.1,
                       statestack >= 0.2 && < 0.3,
                       JuicyPixels >= 3.1.3.2 && < 3.3,
                       vector >= 0.10.0 && < 0.11,
                       bytestring >= 0.9 && < 0.11,
                       optparse-applicative >= 0.10 && < 0.12,
                       transformers >= 0.3 && <0.5,
                       hashable >= 1.1 && < 1.3
  if impl(ghc < 7.6)
    Build-depends: ghc-prim

  default-language:    Haskell2010

  if !os(windows)
    cpp-options: -DCMDLINELOOP
    Build-depends:     unix >= 2.4 && < 2.8
