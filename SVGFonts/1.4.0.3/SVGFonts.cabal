-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:0f46e65707a027e00fabb0f3e9972a87
    SHA1:569bf14068da012cf4c9a557840f0a2f884a811d
    SHA256:367a9f256b934371b5e07f0f9c9fe546a8ca6640411e6f69da5fe27e8463724a
    SHA512:27816b0970f35a81f83b633330b3020f7508eb4ea944fb7dd82875429842b7e2725707c49fcb6d31016bc8ce3804e54a3d58806ca8cc1589f612b12c501d0f66
    Skein512_512:6f0e39da857b449cf85c06ddb643fea58b22792f20b7c334a9fc00e30199f41573f63ca764a9a94371670a815ee97bdc83d4ff9dd1b02b552f2da2565b4a38e9

x-package-locations:
    https://hackage.haskell.org/package/SVGFonts-1.4.0.3/SVGFonts-1.4.0.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/SVGFonts-1.4.0.3.tar.gz

x-package-size: 656844
-- END Added by all-cabal-hashes-tool

Name:             SVGFonts
Version:          1.4.0.3
Synopsis:         Fonts from the SVG-Font format
Description:      Native font support for the diagrams framework (<http://projects.haskell.org/diagrams/>). Note that this package can be used with any diagrams backend, not just the SVG backend.  The SVG-font format is easy to parse
                  and was therefore chosen for a font library completely written in Haskell.
                  .
                  You can convert your own font to SVG with <http://fontforge.sourceforge.net/>, or use the included LinLibertine and Bitstream fonts.
                  .
                  Features:
                  .
                  * Complete implementation of the features that Fontforge produces (though not the complete SVG format)
                  .
                  * Kerning (/i.e./ the two characters in \"VA\" are closer than the characters in \"VV\")
                  .
                  * Unicode
                  .
                  * Ligatures
                  .
                  * An example that shows how to do text boxes with syntax highlighting using highlighting-kate:
                    <http://hackage.haskell.org/package/highlighting-kate>
                  .
                  XML speed issues can be solved by trimming the svg file to only those characters that are used (or maybe binary xml one day).
                  .
                  Version 1.0 of this library supports texturing, though this would only sense in a diagrams backend that does rasterization in Haskell.
                  .
                  Example:
                  .
                  >  # LANGUAGE NoMonomorphismRestriction #
                  >
                  > import Diagrams.Prelude
                  > import Diagrams.Backend.Cairo.CmdLine
                  > import Graphics.SVGFonts.ReadFont (textSVG)
                  >
                  > main = defaultMain (text' "Hello World")
                  >
                  > text'   t = stroke (textSVG t 1) # fc purple # fillRule EvenOdd
                  > text''  t = stroke (textSVG' $ TextOpts t lin INSIDE_H KERN False 1 1 ) # fillRule EvenOdd
                  > text''' t =        (textSVG_ $ TextOpts t lin INSIDE_H KERN True  1 1 ) # fillRule EvenOdd
                  .
category:         Graphics
License:          BSD3
License-file:     LICENSE
Author:           Tillmann Vogt
Maintainer:       diagrams-discuss@googlegroups.com
build-type:       Simple
Cabal-Version:    >=1.10

data-files:       fonts/*.svg
extra-source-files: CHANGES.md, README.md, diagrams/*.svg
extra-doc-files:    diagrams/*.svg

source-repository head
  type: git
  location: https://github.com/diagrams/SVGFonts.git

Library
    hs-source-dirs: src
    ghc-options: -W -Wall -fno-warn-unused-do-bind
    other-modules: Paths_SVGFonts
    build-depends:
        attoparsec,
        base == 4.*,
        containers >= 0.4 && < 0.6,
        data-default-class < 0.1,
        diagrams-lib >= 0.7 && < 1.3,
        directory >= 1.1,
        blaze-svg >= 0.3.3,
        blaze-markup >= 0.5,
        parsec,
        split,
        text,
        tuple,
        vector,
        vector-space,
        xml
    exposed-modules:
        Graphics.SVGFonts
        Graphics.SVGFonts.ReadFont
        Graphics.SVGFonts.CharReference
        Graphics.SVGFonts.ReadPath
        Graphics.SVGFonts.WriteFont
    default-language: Haskell2010
