-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:ff93a459c1dc15647070b39e4e7e9f65
    SHA1:916ad0f3d5375d57a997f2d6c124fde0c0d33633
    SHA256:3fb4035e0781d52e677b755ce797f8531e4edf88bbbc07932c6c08edbd30ba11
    SHA512:339b57afdb3c6c87311ebd0493c140576742120a23fa8ae27c883408196d97cdacc016f8b1d73a91c33189ab8d604098d579d463ed25b4e3eb10cbab525608b2
    Skein512_512:27246484d27e5e6e411d6198f76357bd1d8a3dccf958654756e55cd188369f613e19cfe39a8074cac6106d996480413c686b6b66d66f5a0d5561a1462dff88c2

package-locations:
    https://hackage.haskell.org/package/graph-rewriting-0.4.9/graph-rewriting-0.4.9.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/graph-rewriting-0.4.9.tar.gz

package-size: 10770
-- END Added by all-cabal-hashes-tool

Name:           graph-rewriting
Version:        0.4.9
Copyright:      (c) 2010, Jan Rochel
License:        BSD3
License-File:   LICENSE
Author:         Jan Rochel
Maintainer:     jan@rochel.info
Stability:      beta
Build-Type:     Simple
Synopsis:       Monadic graph rewriting of hypergraphs with ports and multiedges
Description:
	This library provides a monadic EDSL to define your own graph rewrite system in Haskell. Once you have specified the signature of your graph and a set of rewrite rules, you can apply these rules on a graph to effect a graph transformation. The aim of this library is to make it as convenient as possible to define such a system and experiment with it and is not designed as a backend for high-performance computation.
Category:       Graphs, Data
Cabal-Version:  >= 1.6
Build-Depends:
	base >= 4 && < 4.3,
	base-unicode-symbols >= 0.2 && < 0.3,
	mtl >= 1.1 && < 1.2,
	containers >= 0.3 && < 0.4
Exposed-Modules:
	Data.View
	GraphRewriting
	GraphRewriting.Graph
	GraphRewriting.Graph.Types
	GraphRewriting.Graph.Read
	GraphRewriting.Graph.Write
	GraphRewriting.Graph.Write.Unsafe
	GraphRewriting.Pattern
	GraphRewriting.Pattern.InteractionNet
	GraphRewriting.Rule
Other-Modules:
	GraphRewriting.Graph.Internal
	GraphRewriting.Pattern.Internal
	GraphRewriting.Rule.Internal
Extensions:
	UnicodeSyntax
	FlexibleContexts
	FlexibleInstances
	TypeSynonymInstances
	MultiParamTypeClasses
GHC-Options:    -fno-warn-duplicate-exports -fwarn-unused-imports
