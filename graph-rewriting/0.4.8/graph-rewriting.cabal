-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:41b2a3cb98c2a76822e228263bcefeb9
    SHA1:3f35e3c6054f69a585420c9eb27f9addde9628ad
    SHA256:07e6b0afab5eddeb014725b59f7711c34d2a65be586e285e92c7c5f416885ecd
    SHA512:ca9b62309abc9da1de1355c052070e12a4223129778ce061e6525194edcd141d12f27b0c6b57f91216f659730b5a1124fd7f26ff513d4edb0a53dd5c749cf377
    Skein512_512:696b3c977e374ad8f0ce91dcd29bb0985ffc76563e85048f97c54ad991408cf19fb9474c889ab8a15fe1496e010264a7faaf54fff31b4d1e59eaace870e3f359

package-locations:
    https://hackage.haskell.org/package/graph-rewriting-0.4.8/graph-rewriting-0.4.8.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/graph-rewriting-0.4.8.tar.gz

package-size: 10689
-- END Added by all-cabal-hashes-tool

Name:           graph-rewriting
Version:        0.4.8
Copyright:      (c) 2010, Jan Rochel
License:        BSD3
License-File:   LICENSE
Author:         Jan Rochel
Maintainer:     jan@rochel.info
Stability:      beta
Build-Type:     Simple
Synopsis:       Monadic graph rewriting of hypergraphs with ports and multiedges
Description:
	This library provides a monadic EDSL to define your own graph rewrite system in Haskell. Once you have specified the signature of your graph and a set of rewrite rules, you can apply these rules on a graph to effect a graph transformation. The aim of this library is to make it as convenient as possible to define such a system and experiment with it and is not designed as a backend for high-performance computation.
Category:       Graphs, Data
Cabal-Version:  >= 1.6
Build-Depends:
	base >= 4 && < 4.3,
	base-unicode-symbols >= 0.2 && < 0.3,
	mtl >= 1.1 && < 1.2,
	containers >= 0.3 && < 0.4
Exposed-Modules:
	Data.View
	GraphRewriting
	GraphRewriting.Graph
	GraphRewriting.Graph.Types
	GraphRewriting.Graph.Read
	GraphRewriting.Graph.Write
	GraphRewriting.Graph.Write.Unsafe
	GraphRewriting.Pattern
	GraphRewriting.Pattern.InteractionNet
	GraphRewriting.Rule
Other-Modules:
	GraphRewriting.Graph.Internal
	GraphRewriting.Pattern.Internal
	GraphRewriting.Rule.Internal
Extensions:
	UnicodeSyntax
	FlexibleContexts
	FlexibleInstances
	TypeSynonymInstances
	MultiParamTypeClasses
GHC-Options:    -fno-warn-duplicate-exports -fwarn-unused-imports
