Name:                   dag
Version:                0.0.2.1
Author:                 Athan Clark <athan.clark@gmail.com>
Maintainer:             Athan Clark <athan.clark@gmail.com>
License:                BSD3
License-File:           LICENSE
Synopsis:               Basic type-safe directed acyclic graphs.
Description:
  This is a type-safe approach for a directed acyclic graph.
  .
  Edge construction is incremental, creating a "schema":
  .
  >  import Data.Graph.DAG.Edge
  >
  >  -- | Edges are statically defined:
  >  edges =
  >    ECons (Edge :: EdgeValue "foo" "bar") $
  >    ECons (Edge :: EdgeValue "bar" "baz") $
  >    ECons (Edge :: EdgeValue "foo" "baz")
  >    unique -- ENil, but casted for uniquely edged graphs
  .
  The nodes are separate from edges; graph may be not connected:
  .
  >  data Cool = AllRight
  >            | Radical
  >            | SuperDuper
  >
  >  graph =
  >    GCons "foo" AllRight $
  >    GCons "bar" Radical $
  >    GCons "baz" SuperDuper $
  >    GNil edges
  .
  Some type tomfoolery:
  .
  >  *Data.Graph.DAG> :t edges
  >
  >  edges
  >    :: EdgeSchema
  >         '['EdgeType "foo" "bar", 'EdgeType "bar" "baz",
  >           'EdgeType "foo" "baz"] -- Type list of edges
  >         '['("foo", '["bar", "baz"]), '("bar", '["baz"])] -- potential loops
  >         'True -- uniqueness
  >
  >  *Data.Graph.DAG> :t getSpanningTrees $ edges
  >
  >  getSpanningTrees $ edges
  >    :: Data.Proxy.Proxy
  >         '['Node "foo" '['Node "bar" '['Node "baz" '[]],
  >                         'Node "baz" '[]],
  >           'Node "bar" '['Node "baz" '[]],
  >           'Node "baz" '[]]
  >
  >  *Data.Graph.DAG> reflect $ getSpanningTrees $ edges
  >
  >    [Node "foo" [Node "bar" [Node "baz" []]
  >                ,Node "baz" []]
  >    ,Node "bar" [Node "baz" []]
  >    ,Node "baz" []]
  .
  This library is still very naive, but it will give us compile-time enforcement
  of acyclicity (and uniqueness) in these graphs - ideal for dependency graphs.

Cabal-Version:          >= 1.10
Build-Type:             Simple

Library
  Default-Language:     Haskell2010
  HS-Source-Dirs:       src
  GHC-Options:          -Wall
  Exposed-Modules:      Data.Graph.DAG
                        Data.Graph.DAG.Edge
                        Data.Graph.DAG.Edge.Utils
  Build-Depends:        base >= 4.7 && < 5
                      , constraints
                      , singletons

Test-Suite spec
  Type:                 exitcode-stdio-1.0
  Default-Language:     Haskell2010
  Hs-Source-Dirs:       src
                      , test
  Ghc-Options:          -Wall
  Main-Is:              Spec.hs
  Build-Depends:        base
                      , hspec
                      , QuickCheck
                      , quickcheck-instances

Source-Repository head
  Type:                 git
  Location:             https://github.com/athanclark/dag


package-hashes:
    MD5:ee9be080aaa72e7a302bec2b2613ba7f
    SHA1:c9dc85bb76808cf37982aac99115f5a612221d8d
    SHA256:14e6bc47e093b2eb471e540d1d7017a1a346f75b50a3a8283173830800b303e5
    SHA512:eca02b3285184b59278849a3d477ba82ec89610a11662c036f1b4935a5c2b5f30286de2d250faedd1a010e96d31abe0792a61f6f0ecc7a99b97ac982e263921c
    Skein512_512:b4ab4e93e1f01b65c5eaff616479d8d221d10ade1607cf8c6d6a2c6ef6a0792fbe688ce65de591be52c715f5e97969c86dcbdfd33fa57f649474eb4858a27e1d

package-locations:
    https://hackage.haskell.org/package/dag-0.0.2.1/dag-0.0.2.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/dag-0.0.2.1.tar.gz

