-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:89148e95c8179a5be29ccff5255ad8bc
    SHA1:bd17cc6fa362f28fc92dc583e805205551e018c9
    SHA256:8ba30602578edfcf0bc2fc6bc138e91bc9f38bba70af41ac9ee68a468f778990
    SHA512:bd8c1738286a27aa6cdbf56843fbb8782925735ad2a8840b2a949764fd8f5589370f57ec5bf57656072eb15d46f7f1ba4fa60dfb0298cf4e5471e9dca0acd75e
    Skein512_512:e45d5ef06c415b1dac2eb0c5d95bc81c873f6e18ee674c4f4f2b4574a00e3ea63d25b87bad8943ca66a81b4ad9eae7876bc3d925754e572dfd7028686d12ccdd

package-locations:
    https://hackage.haskell.org/package/idris-0.1.7.1/idris-0.1.7.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/idris-0.1.7.1.tar.gz

package-size: 145192
-- END Added by all-cabal-hashes-tool

Name:           idris
Version:        0.1.7.1
License:        BSD3
License-file:   LICENSE
Author:         Edwin Brady
Maintainer:     Edwin Brady <eb@cs.st-andrews.ac.uk>
Homepage:       http://www.idris-lang.org/

Stability:      Alpha
Category:       Compilers/Interpreters, Dependent Types
Synopsis:       Dependently Typed Functional Programming Language
Description:    Idris is an experimental language with full dependent types.
                Dependent types allow types to be predicated on values,
                meaning that some aspects of a program's behaviour can be
                specified precisely in the type. The language is closely 
		related to Epigram and Agda. There is a tutorial at <http://www.cs.st-andrews.ac.uk/~eb/Idris/tutorial.html>.
                .
                The aims of the project are:
                .
                * To provide a platform for realistic programming with dependent types.
                By realistic, we mean the ability to interact with the outside world
                and use primitive types and operations. This includes networking,
                file handling, concurrency, etc.
                .
                * To show that full dependent types do not mean we have to abandon
                the functional style we have come to know and love with languages
                like Haskell and OCaml. We aim to show that lightweight dependently typed
                programming means allowing the programmer full access to values in types,
                and letting the type checker do the hard work so you don't have to!
                .
                The Darcs repository can be found at <http://www-fp.cs.st-andrews.ac.uk/~eb/darcs/Idris>.
Homepage:       http://www.cs.st-andrews.ac.uk/~eb/Idris/

Cabal-Version:  >= 1.6
Build-type:     Simple

Data-files:     Prelude.e *.idr
Data-dir:       lib

Extra-source-files: CHANGELOG

Library
        Exposed-modules: Idris.Parser, Idris.Lexer, Idris.Lib, 
                         Idris.AbsSyntax, Idris.Context, Idris.Latex
                         Idris.Compiler, Idris.LambdaLift, Idris.PMComp, 
                         Idris.MakeTerm, Idris.Prover, Idris.Fontlock,
                         Idris.ConTrans, Idris.SCTrans, Idris.RunIO,
                         Idris.SimpleCase, Idris.Serialise, Idris.PartialEval
        Other-modules:   Paths_idris

        Build-depends:   base>=4 && <5, containers, array, parsec, mtl,
                         readline, ivor>=0.1.14, directory, haskell98,
                         old-time, old-locale, binary, epic>=0.1.7, Cabal
                                
        Extensions:      MagicHash, UndecidableInstances, OverlappingInstances, PatternGuards

Executable     idris
               Main-is: Main.lhs
               Other-modules: Idris.Parser, Idris.Lexer, Idris.Lib, 
                              Idris.AbsSyntax, Idris.Context,
                              Idris.Compiler, Idris.LambdaLift, Idris.PMComp, 
                              Idris.MakeTerm, Idris.Prover, Idris.Fontlock,
                              Idris.ConTrans, Idris.SCTrans, Idris.RunIO,
                              Idris.SimpleCase, Idris.Serialise, 
                              Idris.PartialEval

               Build-depends:   base>=4 && <5, containers, array, parsec, mtl,
                                readline, ivor>=0.1.14, directory, haskell98,
                                old-time, old-locale, binary, epic>=0.1.6, Cabal
                                
               Extensions:      MagicHash, UndecidableInstances, OverlappingInstances, PatternGuards
               ghc-prof-options: -auto-all