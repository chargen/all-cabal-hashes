-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:7e0d7900a2db21f6e2599dce7eab5485
    SHA1:8ff3e898fd9aa7ffc769047a3eaacc1bd22571a6
    SHA256:c8f3be5864357e2237725746f8dbd0a1969171787356adcbca3c7f960e6a6a12
    SHA512:c04b54b171cbf0d9bf479ece06f1b7931af440ada0b2c32ce704b3774f960520aa9bca21b8a8343b3422a76483253ca7e1390599dd3424e376fd68c28aff74c2
    Skein512_512:c7106b5ffc4167df265057c2351bbc482ce93289d32356793d21895939527aefbc323171c6aa544c5e9f1cf9609209980395259e3d158c461496155205358d5e

package-locations:
    https://hackage.haskell.org/package/prototype-0.4.1/prototype-0.4.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/prototype-0.4.1.tar.gz

package-size: 2983
-- END Added by all-cabal-hashes-tool

build-type:	Simple
cabal-version:	>= 1.2

name:		prototype
version:	0.4.1
stability:	experimental
author:		Yoshikuni Jujo <PAF01143@nifty.ne.jp>
maintainer:	Yoshikuni Jujo <PAF01143@nifty.ne.jp>

license:	BSD3
license-file:	LICENSE

category:	Development
synopsis:	prototype-based programming on Haskell
description:	prototype-based programming on Haskell
		.
		You can download source codes by git.
		.
		git clone git:\/\/github.com\/YoshikuniJujo\/prototype.git prototype
		.
		Example code
		.
		> module Main where
		>
		> import Control.Prototype
		>
		> main :: IO ()
		> main = fmap fst $ flip runPT initPTEnv $ do
		>	( dog, setName, sit ) <- package "dog" $ do
		>		dog <- clone object
		>		name	<- makeMember "name"
		>		setName	<- makeMember "setName"
		>		sit	<- makeMember "sit"
		>		setMethod dog setName $ \this [ n ] -> do
		>			setMember this name n
		>			return [ ]
		>		setMethod dog sit $ \this _ -> do
		>			n <- member this name
		>			liftPT $ putStrLn $ fromPrimStr n ++ " sitting."
		>			return [ ]
		>		return ( dog, setName, sit )
		>	myDog <- clone dog
		>	method myDog setName [ primStr "John" ]
		>	method myDog sit [ ]
		>	return ()
		.
		Another sample
		.
		> module Main where
		>
		> import MyToolkit
		>
		> main :: IO ()
		> main = runToolKit $ do
		>	( textView, setText, setContentView ) <- importMyToolkit
		>	myTV <- clone textView
		>	method myTV setText [ primStr "Hello, world!" ]
		>	method myTV setContentView [ ]
		>	return ()

library
  hs-source-dirs:	src
  exposed-modules:	Control.Prototype
  build-depends:	base > 3 && < 5, monads-tf
  ghc-options:		-Wall
