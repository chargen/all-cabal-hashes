name:          semigroupoids
category:      Control, Comonads
version:       3.0.0.2
license:       BSD3
cabal-version: >= 1.6
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://github.com/ekmett/semigroupoids
bug-reports:   http://github.com/ekmett/semigroupoids/issues
copyright:     Copyright (C) 2011 Edward A. Kmett
build-type:    Simple
synopsis:      Haskell 98 semigroupoids: Category sans id
extra-source-files: .travis.yml
description:
  Provides a wide array of semigroupoids and operations for working with semigroupds.
  .
  A Semigroupoid is a Category without the requirement of identity arrows for every object in the category.
  .
  When working with comonads you often have the @\<*\>@ portion of an @Applicative@, but
  not the @pure@. This was captured in Uustalu and Vene's \"Essence of Dataflow Programming\"
  in the form of the @ComonadZip@ class in the days before @Applicative@. Apply provides a weaker invariant, but for the comonads used for data flow programming (found in the streams package), this invariant is preserved. Applicative function composition forms a semigroupoid.
  .
  Similarly many structures are nearly a comonad, but not quite, for instance lists provide a reasonable 'extend' operation in the form of 'tails', but do not always contain a value.
  .
  .
  Ideally the following relationships would hold:
  .
  > Traversable <---- Foldable <--- Functor ------> Alt ---------> Plus           Semigroupoid
  >      |               |            |                              |                  |
  >      v               v            v                              v                  v
  > Traversable1 <--- Foldable1     Apply --------> Applicative -> Alternative      Category
  >                                   |               |              |                  |
  >                                   v               v              v                  v
  >                                 Bind ---------> Monad -------> MonadPlus          Arrow
  >
  .
  Apply, Bind, and Extend (not shown) give rise the Static, Kleisli and Cokleisli semigroupoids respectively.
  .
  This lets us remove many of the restrictions from various monad transformers
  as in many cases the binding operation or @\<*\>@ operation does not require them.
  .
  Finally, to work with these weaker structures it is beneficial to have containers
  that can provide stronger guarantees about their contents, so versions of 'Traversable'
  and 'Foldable' that can be folded with just a 'Semigroup' are added.

source-repository head
  type: git
  location: git://github.com/ekmett/semigroupoids.git

library
  build-depends:
    base          >= 4       && < 5,
    transformers  >= 0.2     && < 0.4,
    containers    >= 0.3     && < 0.6,
    contravariant >= 0.2.0.1 && < 0.3,
    comonad       >= 3.0,
    semigroups    >= 0.8.3.1

  exposed-modules:
    Data.Functor.Alt
    Data.Functor.Apply
    Data.Functor.Bind
    Data.Functor.Bind.Trans
    Data.Functor.Plus
    Data.Functor.Extend
    Data.Semigroup.Foldable
    Data.Semigroup.Traversable
    Data.Semigroupoid
    Data.Semigroupoid.Dual
    Data.Semigroupoid.Static
    Data.Traversable.Instances

  ghc-options: -Wall


package-hashes:
    MD5:42357ef498850630e3e96bf113259875
    SHA1:e05e10f02a953ea99cac927ba4de6f5cec063955
    SHA256:665d1b1c87c3d222b77aed932892b2c0547f70b75571c361b26e12704209ae8e
    SHA512:d89ccbb01fdd4961900c40394abbe79202a6d8ae46e198bea607699e443c19155957713af00dcee23699f3e7b81a5dc2e90ec65ea2b6284dbac3701fa2a0b23c
    Skein512_512:d698927f9e7fc11155660ab6a5aacc144ccca77dff4d6725ce69b5877a45e7d92489e00d051d40d73a6d9f2be17dac81aaf297157eec86e7ec51bbc522cb58ea

package-locations:
    https://hackage.haskell.org/package/semigroupoids-3.0.0.2/semigroupoids-3.0.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/semigroupoids-3.0.0.2.tar.gz

