name:          semigroupoids
category:      Control, Comonads
version:       3.0.1
license:       BSD3
cabal-version: >= 1.6
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://github.com/ekmett/semigroupoids
bug-reports:   http://github.com/ekmett/semigroupoids/issues
copyright:     Copyright (C) 2011 Edward A. Kmett
build-type:    Simple
synopsis:      Haskell 98 semigroupoids: Category sans id
extra-source-files:
  .ghci
  .travis.yml
  .gitignore
  .vim.custom
description:
  Provides a wide array of semigroupoids and operations for working with semigroupds.
  .
  A Semigroupoid is a Category without the requirement of identity arrows for every object in the category.
  .
  When working with comonads you often have the @\<*\>@ portion of an @Applicative@, but
  not the @pure@. This was captured in Uustalu and Vene's \"Essence of Dataflow Programming\"
  in the form of the @ComonadZip@ class in the days before @Applicative@. Apply provides a weaker invariant, but for the comonads used for data flow programming (found in the streams package), this invariant is preserved. Applicative function composition forms a semigroupoid.
  .
  Similarly many structures are nearly a comonad, but not quite, for instance lists provide a reasonable 'extend' operation in the form of 'tails', but do not always contain a value.
  .
  .
  Ideally the following relationships would hold:
  .
  > Traversable <---- Foldable <--- Functor ------> Alt ---------> Plus           Semigroupoid
  >      |               |            |                              |                  |
  >      v               v            v                              v                  v
  > Traversable1 <--- Foldable1     Apply --------> Applicative -> Alternative      Category
  >                                   |               |              |                  |
  >                                   v               v              v                  v
  >                                 Bind ---------> Monad -------> MonadPlus          Arrow
  >
  .
  Apply, Bind, and Extend (not shown) give rise the Static, Kleisli and Cokleisli semigroupoids respectively.
  .
  This lets us remove many of the restrictions from various monad transformers
  as in many cases the binding operation or @\<*\>@ operation does not require them.
  .
  Finally, to work with these weaker structures it is beneficial to have containers
  that can provide stronger guarantees about their contents, so versions of 'Traversable'
  and 'Foldable' that can be folded with just a 'Semigroup' are added.

source-repository head
  type: git
  location: git://github.com/ekmett/semigroupoids.git

library
  build-depends:
    base          >= 4       && < 5,
    transformers  >= 0.2     && < 0.4,
    containers    >= 0.3     && < 0.6,
    contravariant >= 0.2.0.1 && < 0.3,
    comonad       >= 3.0,
    semigroups    >= 0.8.3.1

  hs-source-dirs: src

  exposed-modules:
    Data.Functor.Alt
    Data.Functor.Apply
    Data.Functor.Bind
    Data.Functor.Bind.Trans
    Data.Functor.Plus
    Data.Functor.Extend
    Data.Semigroup.Foldable
    Data.Semigroup.Traversable
    Data.Semigroupoid
    Data.Semigroupoid.Dual
    Data.Semigroupoid.Static
    Data.Traversable.Instances

  ghc-options: -Wall


package-hashes:
    MD5:6a6c56c0d100fd2ae8694cec40ac7171
    SHA1:9b11f081ca07f836e3aa86119999d2d2d58880bc
    SHA256:b04cd486a96aceffa29d5c307451a4ab4acaf52ca0334130879d86917df6628a
    SHA512:ff5a71b1aee933111ae5f502e37c2d8ac1e7a6992236c03fcb4959e35595124110ea931ff68772a8c619773886ee5c0b45fb9628a50f0c45afba04f9ba73dcad
    Skein512_512:3469391d40f1f9f1c985000d1d60535ee9f240640916c69b38b5ea17b795039b1da214f7baf6ab1f1eabbaf984ebea1f0fb351e010c0fe03417e632a650037bc

package-locations:
    https://hackage.haskell.org/package/semigroupoids-3.0.1/semigroupoids-3.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/semigroupoids-3.0.1.tar.gz

