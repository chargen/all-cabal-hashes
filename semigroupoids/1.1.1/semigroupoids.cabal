-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:3986d48c78ce151131e934d3a7ad3bec
    SHA1:70fde427b2d4a67b61fab751a53fd4373ff1ad02
    SHA256:5c06deb920cd93c5aac8146567833ef5eabda0ed35a30ae4fb7ab8aeea0afe5f
    SHA512:2a1398a5758c0c35c77648d0d67ef5d43fa7af88768e01076fc4a918b4a0f828352d699758d9604fc65919c35763704daa72ae5d5cce4203d444dfa9856ff642
    Skein512_512:70c40ea40de7e3ef3b0f7ca91fda603c36c993881897959d842b9a51dc6d38714557331a1613bd69387a7198618e38f42b3d4773734ff4dccfe89d5e2caf8eb5

x-package-locations:
    https://hackage.haskell.org/package/semigroupoids-1.1.1/semigroupoids-1.1.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/semigroupoids-1.1.1.tar.gz

x-package-size: 10979
-- END Added by all-cabal-hashes-tool

name:          semigroupoids
category:      Control, Comonads
version:       1.1.1
license:       BSD3
cabal-version: >= 1.6
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://github.com/ekmett/semigroupoids
copyright:     Copyright (C) 2011 Edward A. Kmett
build-type:    Simple
synopsis:      Haskell 98 semigroupoids: Category sans id
description:   
  Provides a wide array of semigroupoids and operations for working with semigroupds.
  .
  A Semigroupoid is a Category without the requirement of identity arrows for every object in the category.
  .
  When working with comonads you often have the @\<*\>@ portion of an @Applicative@, but
  not the @pure@. This was captured in Uustalu and Vene's \"Essence of Dataflow Programming\"
  in the form of the @ComonadZip@ class in the days before @Applicative@. Apply provides a weaker invariant, but for the comonads used for data flow programming (found in the streams package), this invariant is preserved. Applicative function composition forms a semigroupoid. 
  .
  Similarly many structures are nearly a comonad, but not quite, for instance lists provide a reasonable 'extend' operation in the form of 'tails', but do not always contain a value.
  .
  .
  Ideally the following relationships would hold:
  .
  > Traversable <---- Foldable <--- Functor ------> Alt ---------> Plus   
  >      |               |            |                              |     
  >      v               v            v                              v       
  > Traversable1 <--- Foldable1     Apply --------> Applicative -> Alternative
  >                                   |               |              |        
  >                                   v               v              v       
  >                                 Bind ---------> Monad -------> MonadPlus  
  >                         
  >                          
  >
  > Bitraversable <-- Bifoldable <- Bifunctor                   Semigroupoid
  >     |                  |          |                              |
  >     v                  v          v                              v
  > Bitraversable1 <- Bifoldable1   Biapply                       Category
  >                                                                  |
  >                                                                  v
  >                                                                Arrow
  . 
  Apply, Bind, and Extract give rise the Static, Kleisli and Cokleisli semigroupoids respectively.
  .
  This lets us remove many of the restrictions from various monad transformers
  as in many cases the binding operation or @\<*\>@ operation does not require them.
  .
  Finally, to work with these weaker structures it is beneficial to have containers
  that can provide stronger guarantees about their contents, so versions of 'Traversable'
  and 'Foldable' that can be folded with just a 'Semigroup' are added.

source-repository head
  type: git
  location: git://github.com/ekmett/semigroupoids.git

library
  build-depends: 
    base >= 4 && < 4.4,
    transformers >= 0.2.0 && < 0.3,
    containers >= 0.4.0 && < 0.5,
    contravariant >= 0.1.2 && < 0.2,
    comonad >= 1.0 && < 1.1, 
    semigroups >= 0.3.2 && < 0.4,
    bifunctors >= 0.1 && < 0.2

  exposed-modules:
    Data.Bifunctor.Apply,
    Data.Functor.Alt,
    Data.Functor.Apply,
    Data.Functor.Bind,
    Data.Functor.Bind.Trans,
    Data.Functor.Plus,
    Data.Semigroup.Bifoldable,
    Data.Semigroup.Bitraversable
    Data.Semigroup.Foldable,
    Data.Semigroup.Traversable
    Data.Semigroupoid
    Data.Semigroupoid.Dual
    Data.Semigroupoid.Static
    Data.Traversable.Instances

  ghc-options: -Wall 
