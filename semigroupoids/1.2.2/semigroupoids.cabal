-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:153c0abaa29d8811da8ebd04d333886e
    SHA1:0c32a12d1e576f3146b011c06eb39050bcfca3ff
    SHA256:36c32fab8c2336843f44bc62ae61071783250c88c5ba44cd083a4e1ec5dd8010
    SHA512:e5084e7d7e7aef0bd6ca3ada7cf32cfd946d6a63c0b3c79954ab5008f6c31f4f31825439556cea679feeb9f3b63bf4b1937aa2f50f7da68f268983f10c11356a
    Skein512_512:beb6e0ecd6c9117f6df129d7c5dfa30a698694034b8f4eca687d7162f586c7626d3470997541ba6f90231cea9b75b77e96f2061d09d7449d1ae428426ddb9c05

package-locations:
    https://hackage.haskell.org/package/semigroupoids-1.2.2/semigroupoids-1.2.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/semigroupoids-1.2.2.tar.gz

package-size: 10130
-- END Added by all-cabal-hashes-tool

name:          semigroupoids
category:      Control, Comonads
version:       1.2.2
license:       BSD3
cabal-version: >= 1.6
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://github.com/ekmett/semigroupoids
copyright:     Copyright (C) 2011 Edward A. Kmett
build-type:    Simple
synopsis:      Haskell 98 semigroupoids: Category sans id
description:   
  Provides a wide array of semigroupoids and operations for working with semigroupds.
  .
  A Semigroupoid is a Category without the requirement of identity arrows for every object in the category.
  .
  When working with comonads you often have the @\<*\>@ portion of an @Applicative@, but
  not the @pure@. This was captured in Uustalu and Vene's \"Essence of Dataflow Programming\"
  in the form of the @ComonadZip@ class in the days before @Applicative@. Apply provides a weaker invariant, but for the comonads used for data flow programming (found in the streams package), this invariant is preserved. Applicative function composition forms a semigroupoid. 
  .
  Similarly many structures are nearly a comonad, but not quite, for instance lists provide a reasonable 'extend' operation in the form of 'tails', but do not always contain a value.
  .
  .
  Ideally the following relationships would hold:
  .
  > Traversable <---- Foldable <--- Functor ------> Alt ---------> Plus           Semigroupoid
  >      |               |            |                              |                  |
  >      v               v            v                              v                  v
  > Traversable1 <--- Foldable1     Apply --------> Applicative -> Alternative      Category
  >                                   |               |              |                  |
  >                                   v               v              v                  v
  >                                 Bind ---------> Monad -------> MonadPlus          Arrow
  >                         
  . 
  Apply, Bind, and Extract give rise the Static, Kleisli and Cokleisli semigroupoids respectively.
  .
  This lets us remove many of the restrictions from various monad transformers
  as in many cases the binding operation or @\<*\>@ operation does not require them.
  .
  Finally, to work with these weaker structures it is beneficial to have containers
  that can provide stronger guarantees about their contents, so versions of 'Traversable'
  and 'Foldable' that can be folded with just a 'Semigroup' are added.

source-repository head
  type: git
  location: git://github.com/ekmett/semigroupoids.git

library
  build-depends: 
    base >= 4 && < 4.4,
    transformers >= 0.2 && < 0.3,
    containers >= 0.3 && < 0.5,
    contravariant >= 0.1.2 && < 0.2,
    comonad >= 1.1 && < 1.2, 
    semigroups >= 0.5 && < 0.6

  exposed-modules:
    Data.Functor.Alt,
    Data.Functor.Apply,
    Data.Functor.Bind,
    Data.Functor.Bind.Trans,
    Data.Functor.Plus,
    Data.Semigroup.Foldable,
    Data.Semigroup.Traversable
    Data.Semigroupoid
    Data.Semigroupoid.Dual
    Data.Semigroupoid.Static
    Data.Traversable.Instances

  ghc-options: -Wall 
