name:          semigroupoids
category:      Control, Comonads
version:       3.0.2
license:       BSD3
cabal-version: >= 1.6
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://github.com/ekmett/semigroupoids
bug-reports:   http://github.com/ekmett/semigroupoids/issues
copyright:     Copyright (C) 2011 Edward A. Kmett
build-type:    Simple
synopsis:      Haskell 98 semigroupoids: Category sans id
extra-source-files:
  .ghci
  .travis.yml
  .gitignore
  .vim.custom
description:
  Provides a wide array of semigroupoids and operations for working with semigroupds.
  .
  A Semigroupoid is a Category without the requirement of identity arrows for every object in the category.
  .
  When working with comonads you often have the @\<*\>@ portion of an @Applicative@, but
  not the @pure@. This was captured in Uustalu and Vene's \"Essence of Dataflow Programming\"
  in the form of the @ComonadZip@ class in the days before @Applicative@. Apply provides a weaker invariant, but for the comonads used for data flow programming (found in the streams package), this invariant is preserved. Applicative function composition forms a semigroupoid.
  .
  Similarly many structures are nearly a comonad, but not quite, for instance lists provide a reasonable 'extend' operation in the form of 'tails', but do not always contain a value.
  .
  .
  Ideally the following relationships would hold:
  .
  > Traversable <---- Foldable <--- Functor ------> Alt ---------> Plus           Semigroupoid
  >      |               |            |                              |                  |
  >      v               v            v                              v                  v
  > Traversable1 <--- Foldable1     Apply --------> Applicative -> Alternative      Category
  >                                   |               |              |                  |
  >                                   v               v              v                  v
  >                                 Bind ---------> Monad -------> MonadPlus          Arrow
  >
  .
  Apply, Bind, and Extend (not shown) give rise the Static, Kleisli and Cokleisli semigroupoids respectively.
  .
  This lets us remove many of the restrictions from various monad transformers
  as in many cases the binding operation or @\<*\>@ operation does not require them.
  .
  Finally, to work with these weaker structures it is beneficial to have containers
  that can provide stronger guarantees about their contents, so versions of 'Traversable'
  and 'Foldable' that can be folded with just a 'Semigroup' are added.

source-repository head
  type: git
  location: git://github.com/ekmett/semigroupoids.git

library
  build-depends:
    base          >= 4       && < 5,
    transformers  >= 0.2     && < 0.4,
    containers    >= 0.3     && < 0.6,
    contravariant >= 0.2.0.1 && < 1,
    comonad       == 3.*     && < 4,
    semigroups    >= 0.8.3.1 && < 1

  hs-source-dirs: src

  exposed-modules:
    Data.Functor.Alt
    Data.Functor.Apply
    Data.Functor.Bind
    Data.Functor.Bind.Trans
    Data.Functor.Plus
    Data.Functor.Extend
    Data.Semigroup.Foldable
    Data.Semigroup.Traversable
    Data.Semigroupoid
    Data.Semigroupoid.Dual
    Data.Semigroupoid.Static
    Data.Traversable.Instances

  ghc-options: -Wall


package-hashes:
    MD5:89be80e03c8ded77004f83e45f1aad13
    SHA1:686954088e37f543eff38b8ba3c576a73972923b
    SHA256:95bb528ddbf75fd357fbbada902060291400fa62a3734c7c7d5903ee543c234c
    SHA512:f2a931051f2357bc760e0bc38c4bbc2b7c23a7eb1fee42c11357bd1150d34a61b49c8a636ff8cc086ac5b0509389e2f66369b0a54170f2bbcdd7a152fda134ff
    Skein512_512:bb7446246e8d1ebe55e5995e9e072b87bbb4171bde618767527edb898f52d6a4bbbe5189bf9e7dd19ff4cadd6286d5ae8f302d01034e2ba04b90bcb169319566

package-locations:
    https://hackage.haskell.org/package/semigroupoids-3.0.2/semigroupoids-3.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/semigroupoids-3.0.2.tar.gz

