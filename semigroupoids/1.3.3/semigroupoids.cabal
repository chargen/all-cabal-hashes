-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:86d04cc5edd37e6b5ef8265b0587cf26
    SHA1:ef6140662376b4238fbfba7708d522f39946e1d1
    SHA256:ccddecf1c664a9f934e0eb9d9d90738e18367ac0b936f0e28a1fc10e4bf4f263
    SHA512:296989fe5f73b35552d57d5f786b04d1809fafd20076a2da95bd94066b128fd38633131a2e19c9e945a8ffa09fd150be836e27744d654b7ca2103e8152724068
    Skein512_512:ef1c8fec96cbdf5ce9895a5ea34b164498bb6cfee55d93ce851ae7abc24e88af226dcedc447cfb57dfbc67657041c02efbf2591cf11db15ad8f72c22b8072c26

package-locations:
    https://hackage.haskell.org/package/semigroupoids-1.3.3/semigroupoids-1.3.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/semigroupoids-1.3.3.tar.gz

package-size: 10432
-- END Added by all-cabal-hashes-tool

name:          semigroupoids
category:      Control, Comonads
version:       1.3.3
license:       BSD3
cabal-version: >= 1.6
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://github.com/ekmett/semigroupoids
bug-reports:   http://github.com/ekmett/semigroupoids/issues
copyright:     Copyright (C) 2011 Edward A. Kmett
build-type:    Simple
synopsis:      Haskell 98 semigroupoids: Category sans id
extra-source-files: .travis.yml
description:
  Provides a wide array of semigroupoids and operations for working with semigroupds.
  .
  A Semigroupoid is a Category without the requirement of identity arrows for every object in the category.
  .
  When working with comonads you often have the @\<*\>@ portion of an @Applicative@, but
  not the @pure@. This was captured in Uustalu and Vene's \"Essence of Dataflow Programming\"
  in the form of the @ComonadZip@ class in the days before @Applicative@. Apply provides a weaker invariant, but for the comonads used for data flow programming (found in the streams package), this invariant is preserved. Applicative function composition forms a semigroupoid.
  .
  Similarly many structures are nearly a comonad, but not quite, for instance lists provide a reasonable 'extend' operation in the form of 'tails', but do not always contain a value.
  .
  .
  Ideally the following relationships would hold:
  .
  > Traversable <---- Foldable <--- Functor ------> Alt ---------> Plus           Semigroupoid
  >      |               |            |                              |                  |
  >      v               v            v                              v                  v
  > Traversable1 <--- Foldable1     Apply --------> Applicative -> Alternative      Category
  >                                   |               |              |                  |
  >                                   v               v              v                  v
  >                                 Bind ---------> Monad -------> MonadPlus          Arrow
  >
  .
  Apply, Bind, and Extract give rise the Static, Kleisli and Cokleisli semigroupoids respectively.
  .
  This lets us remove many of the restrictions from various monad transformers
  as in many cases the binding operation or @\<*\>@ operation does not require them.
  .
  Finally, to work with these weaker structures it is beneficial to have containers
  that can provide stronger guarantees about their contents, so versions of 'Traversable'
  and 'Foldable' that can be folded with just a 'Semigroup' are added.

source-repository head
  type: git
  location: git://github.com/ekmett/semigroupoids.git

library
  build-depends:
    base          >= 4       && < 5,
    transformers  >= 0.2     && < 0.4,
    containers    >= 0.3     && < 0.6,
    contravariant >= 0.2.0.1 && < 0.3,
    comonad       >= 1.1.1.5 && < 1.2,
    semigroups    >= 0.8.3.1 && < 0.9

  exposed-modules:
    Data.Functor.Alt,
    Data.Functor.Apply,
    Data.Functor.Bind,
    Data.Functor.Bind.Trans,
    Data.Functor.Plus,
    Data.Semigroup.Foldable,
    Data.Semigroup.Traversable
    Data.Semigroupoid
    Data.Semigroupoid.Dual
    Data.Semigroupoid.Static
    Data.Traversable.Instances

  ghc-options: -Wall
