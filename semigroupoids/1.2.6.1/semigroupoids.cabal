-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:52b199f8936f20799816356350a44431
    SHA1:de4db1deb74e69026bfff802dca2248d675f9531
    SHA256:ae3c127b1a3b8d6c2b032db212b77c4382c08e5cc768d1bd60577f074ca394fb
    SHA512:047b10b9707dd741fa2fca7b17d7f64b4465b52172f44e2a5edbd377c57214b407f0b1e00b9979306d1020d59e027dac4780bee7060989bcb097b8520ead593e
    Skein512_512:110516728482e59294c7a30492050796ee2a5e926e5abb3c7cf3681b53e20bd064f89025288cdb25d36c339e698ba18d79f732fc90530fbe57be13fbef42aa2f

package-locations:
    https://hackage.haskell.org/package/semigroupoids-1.2.6.1/semigroupoids-1.2.6.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/semigroupoids-1.2.6.1.tar.gz

package-size: 10216
-- END Added by all-cabal-hashes-tool

name:          semigroupoids
category:      Control, Comonads
version:       1.2.6.1
x-revision: 1
license:       BSD3
cabal-version: >= 1.6
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://github.com/ekmett/semigroupoids
copyright:     Copyright (C) 2011 Edward A. Kmett
build-type:    Simple
synopsis:      Haskell 98 semigroupoids: Category sans id
description:   
  Provides a wide array of semigroupoids and operations for working with semigroupds.
  .
  A Semigroupoid is a Category without the requirement of identity arrows for every object in the category.
  .
  When working with comonads you often have the @\<*\>@ portion of an @Applicative@, but
  not the @pure@. This was captured in Uustalu and Vene's \"Essence of Dataflow Programming\"
  in the form of the @ComonadZip@ class in the days before @Applicative@. Apply provides a weaker invariant, but for the comonads used for data flow programming (found in the streams package), this invariant is preserved. Applicative function composition forms a semigroupoid. 
  .
  Similarly many structures are nearly a comonad, but not quite, for instance lists provide a reasonable 'extend' operation in the form of 'tails', but do not always contain a value.
  .
  .
  Ideally the following relationships would hold:
  .
  > Traversable <---- Foldable <--- Functor ------> Alt ---------> Plus           Semigroupoid
  >      |               |            |                              |                  |
  >      v               v            v                              v                  v
  > Traversable1 <--- Foldable1     Apply --------> Applicative -> Alternative      Category
  >                                   |               |              |                  |
  >                                   v               v              v                  v
  >                                 Bind ---------> Monad -------> MonadPlus          Arrow
  >                         
  . 
  Apply, Bind, and Extract give rise the Static, Kleisli and Cokleisli semigroupoids respectively.
  .
  This lets us remove many of the restrictions from various monad transformers
  as in many cases the binding operation or @\<*\>@ operation does not require them.
  .
  Finally, to work with these weaker structures it is beneficial to have containers
  that can provide stronger guarantees about their contents, so versions of 'Traversable'
  and 'Foldable' that can be folded with just a 'Semigroup' are added.

source-repository head
  type: git
  location: git://github.com/ekmett/semigroupoids.git

library
  build-depends: 
    base          >= 4 && < 4.6,
    transformers  >= 0.2 && < 0.3,
    containers    >= 0.3 && < 0.5,
    contravariant >= 0.1.2 && < 0.2,
    comonad       >= 1.1.1.1 && < 1.2, 
    semigroups    >= 0.8 && < 0.9

  exposed-modules:
    Data.Functor.Alt,
    Data.Functor.Apply,
    Data.Functor.Bind,
    Data.Functor.Bind.Trans,
    Data.Functor.Plus,
    Data.Semigroup.Foldable,
    Data.Semigroup.Traversable
    Data.Semigroupoid
    Data.Semigroupoid.Dual
    Data.Semigroupoid.Static
    Data.Traversable.Instances

  ghc-options: -Wall 
