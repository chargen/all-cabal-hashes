-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:a50351a7cbb1f8a32599cfdab14336da
    SHA1:03d3ca972948c1251cde5b7be7cc58afddb62f18
    SHA256:f82205dc2590327cb149c017256924bec58d49349d9d6a83140ca82cf3dfa25b
    SHA512:d4ab12577f59dc1cdd6d5de2e84f0a79bacbd25ef8766e7f2784ca5b79e99be877ddb94a6b9ad8afa316e289bf035ffcce993030fb2aa07b44ce463c22d3017b
    Skein512_512:717ec49f0d840c166054add35edd57b784c642c10611137b96ef6ed9bf1150cb84c52f172fc81c11e80900e3348e462427ec2e8199b78c09e289175381c5a442

x-package-locations:
    https://hackage.haskell.org/package/semigroupoids-1.2.2.3/semigroupoids-1.2.2.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/semigroupoids-1.2.2.3.tar.gz

x-package-size: 10141
-- END Added by all-cabal-hashes-tool

name:          semigroupoids
category:      Control, Comonads
version:       1.2.2.3
license:       BSD3
cabal-version: >= 1.6
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://github.com/ekmett/semigroupoids
copyright:     Copyright (C) 2011 Edward A. Kmett
build-type:    Simple
synopsis:      Haskell 98 semigroupoids: Category sans id
description:   
  Provides a wide array of semigroupoids and operations for working with semigroupds.
  .
  A Semigroupoid is a Category without the requirement of identity arrows for every object in the category.
  .
  When working with comonads you often have the @\<*\>@ portion of an @Applicative@, but
  not the @pure@. This was captured in Uustalu and Vene's \"Essence of Dataflow Programming\"
  in the form of the @ComonadZip@ class in the days before @Applicative@. Apply provides a weaker invariant, but for the comonads used for data flow programming (found in the streams package), this invariant is preserved. Applicative function composition forms a semigroupoid. 
  .
  Similarly many structures are nearly a comonad, but not quite, for instance lists provide a reasonable 'extend' operation in the form of 'tails', but do not always contain a value.
  .
  .
  Ideally the following relationships would hold:
  .
  > Traversable <---- Foldable <--- Functor ------> Alt ---------> Plus           Semigroupoid
  >      |               |            |                              |                  |
  >      v               v            v                              v                  v
  > Traversable1 <--- Foldable1     Apply --------> Applicative -> Alternative      Category
  >                                   |               |              |                  |
  >                                   v               v              v                  v
  >                                 Bind ---------> Monad -------> MonadPlus          Arrow
  >                         
  . 
  Apply, Bind, and Extract give rise the Static, Kleisli and Cokleisli semigroupoids respectively.
  .
  This lets us remove many of the restrictions from various monad transformers
  as in many cases the binding operation or @\<*\>@ operation does not require them.
  .
  Finally, to work with these weaker structures it is beneficial to have containers
  that can provide stronger guarantees about their contents, so versions of 'Traversable'
  and 'Foldable' that can be folded with just a 'Semigroup' are added.

source-repository head
  type: git
  location: git://github.com/ekmett/semigroupoids.git

library
  build-depends: 
    base >= 4 && < 5,
    transformers >= 0.2 && < 0.3,
    containers >= 0.3 && < 0.5,
    contravariant >= 0.1.2 && < 0.2,
    comonad >= 1.1 && < 1.2, 
    semigroups >= 0.6 && < 0.7

  exposed-modules:
    Data.Functor.Alt,
    Data.Functor.Apply,
    Data.Functor.Bind,
    Data.Functor.Bind.Trans,
    Data.Functor.Plus,
    Data.Semigroup.Foldable,
    Data.Semigroup.Traversable
    Data.Semigroupoid
    Data.Semigroupoid.Dual
    Data.Semigroupoid.Static
    Data.Traversable.Instances

  ghc-options: -Wall 
