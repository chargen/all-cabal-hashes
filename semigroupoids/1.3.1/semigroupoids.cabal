name:          semigroupoids
category:      Control, Comonads
version:       1.3.1
x-revision: 1
license:       BSD3
cabal-version: >= 1.6
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://github.com/ekmett/semigroupoids
copyright:     Copyright (C) 2011 Edward A. Kmett
build-type:    Simple
synopsis:      Haskell 98 semigroupoids: Category sans id
description:   
  Provides a wide array of semigroupoids and operations for working with semigroupds.
  .
  A Semigroupoid is a Category without the requirement of identity arrows for every object in the category.
  .
  When working with comonads you often have the @\<*\>@ portion of an @Applicative@, but
  not the @pure@. This was captured in Uustalu and Vene's \"Essence of Dataflow Programming\"
  in the form of the @ComonadZip@ class in the days before @Applicative@. Apply provides a weaker invariant, but for the comonads used for data flow programming (found in the streams package), this invariant is preserved. Applicative function composition forms a semigroupoid. 
  .
  Similarly many structures are nearly a comonad, but not quite, for instance lists provide a reasonable 'extend' operation in the form of 'tails', but do not always contain a value.
  .
  .
  Ideally the following relationships would hold:
  .
  > Traversable <---- Foldable <--- Functor ------> Alt ---------> Plus           Semigroupoid
  >      |               |            |                              |                  |
  >      v               v            v                              v                  v
  > Traversable1 <--- Foldable1     Apply --------> Applicative -> Alternative      Category
  >                                   |               |              |                  |
  >                                   v               v              v                  v
  >                                 Bind ---------> Monad -------> MonadPlus          Arrow
  >                         
  . 
  Apply, Bind, and Extract give rise the Static, Kleisli and Cokleisli semigroupoids respectively.
  .
  This lets us remove many of the restrictions from various monad transformers
  as in many cases the binding operation or @\<*\>@ operation does not require them.
  .
  Finally, to work with these weaker structures it is beneficial to have containers
  that can provide stronger guarantees about their contents, so versions of 'Traversable'
  and 'Foldable' that can be folded with just a 'Semigroup' are added.

source-repository head
  type: git
  location: git://github.com/ekmett/semigroupoids.git

library
  build-depends:
    base          >= 4       && < 4.6,
    transformers  >= 0.2     && < 0.3,
    containers    >= 0.3     && < 0.5,
    contravariant >= 0.2.0.1 && < 0.3,
    comonad       >= 1.1.1.2 && < 1.2,
    semigroups    >= 0.8.2   && < 0.9

  exposed-modules:
    Data.Functor.Alt,
    Data.Functor.Apply,
    Data.Functor.Bind,
    Data.Functor.Bind.Trans,
    Data.Functor.Plus,
    Data.Semigroup.Foldable,
    Data.Semigroup.Traversable
    Data.Semigroupoid
    Data.Semigroupoid.Dual
    Data.Semigroupoid.Static
    Data.Traversable.Instances

  ghc-options: -Wall


package-hashes:
    MD5:2b42f3311a34246ec74d32e392cf310a
    SHA1:a2341a0d919b73509e404fdfde0d57c48c4e4dfa
    SHA256:7023950f9e46426fba3489229dc0913d995809cd2cc62d0f22e8edfd6833df05
    SHA512:1f14e77f1870f69b5c84bf8592589e68d488ac779b16306bc4ac4b5c3eaecdc8796bb0f96d663b887c28e68c57cbf3aacb518da05e4941ca5e72663b6d8d0772
    Skein512_512:ac6ddace69e4fa9a062f341f2aa3fd6e92583b4be88491e3f69be9bae59bcf9843c88a8082c3d243ce067d87aef58c9874f5e3d5bed3205f2eeabac2b4c53aac

package-locations:
    https://hackage.haskell.org/package/semigroupoids-1.3.1/semigroupoids-1.3.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/semigroupoids-1.3.1.tar.gz

