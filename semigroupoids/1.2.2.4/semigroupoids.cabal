name:          semigroupoids
category:      Control, Comonads
version:       1.2.2.4
license:       BSD3
cabal-version: >= 1.6
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://github.com/ekmett/semigroupoids
copyright:     Copyright (C) 2011 Edward A. Kmett
build-type:    Simple
synopsis:      Haskell 98 semigroupoids: Category sans id
description:   
  Provides a wide array of semigroupoids and operations for working with semigroupds.
  .
  A Semigroupoid is a Category without the requirement of identity arrows for every object in the category.
  .
  When working with comonads you often have the @\<*\>@ portion of an @Applicative@, but
  not the @pure@. This was captured in Uustalu and Vene's \"Essence of Dataflow Programming\"
  in the form of the @ComonadZip@ class in the days before @Applicative@. Apply provides a weaker invariant, but for the comonads used for data flow programming (found in the streams package), this invariant is preserved. Applicative function composition forms a semigroupoid. 
  .
  Similarly many structures are nearly a comonad, but not quite, for instance lists provide a reasonable 'extend' operation in the form of 'tails', but do not always contain a value.
  .
  .
  Ideally the following relationships would hold:
  .
  > Traversable <---- Foldable <--- Functor ------> Alt ---------> Plus           Semigroupoid
  >      |               |            |                              |                  |
  >      v               v            v                              v                  v
  > Traversable1 <--- Foldable1     Apply --------> Applicative -> Alternative      Category
  >                                   |               |              |                  |
  >                                   v               v              v                  v
  >                                 Bind ---------> Monad -------> MonadPlus          Arrow
  >                         
  . 
  Apply, Bind, and Extract give rise the Static, Kleisli and Cokleisli semigroupoids respectively.
  .
  This lets us remove many of the restrictions from various monad transformers
  as in many cases the binding operation or @\<*\>@ operation does not require them.
  .
  Finally, to work with these weaker structures it is beneficial to have containers
  that can provide stronger guarantees about their contents, so versions of 'Traversable'
  and 'Foldable' that can be folded with just a 'Semigroup' are added.

source-repository head
  type: git
  location: git://github.com/ekmett/semigroupoids.git

library
  build-depends: 
    base >= 4 && < 5,
    transformers >= 0.2 && < 0.3,
    containers >= 0.3 && < 0.5,
    contravariant >= 0.1.2 && < 0.2,
    comonad >= 1.1 && < 1.2, 
    semigroups >= 0.6.1 && < 0.7

  exposed-modules:
    Data.Functor.Alt,
    Data.Functor.Apply,
    Data.Functor.Bind,
    Data.Functor.Bind.Trans,
    Data.Functor.Plus,
    Data.Semigroup.Foldable,
    Data.Semigroup.Traversable
    Data.Semigroupoid
    Data.Semigroupoid.Dual
    Data.Semigroupoid.Static
    Data.Traversable.Instances

  ghc-options: -Wall 


package-hashes:
    MD5:32873a7f40f600a4b5207b6c71148cb2
    SHA1:7708d3a1622748e6ea332a730ad18cbf1a57b3d3
    SHA256:3f43b030c9ac6c7a5724cc1e255c3be50515bd2836eafea1c0a49823674ebaf0
    SHA512:7beb50d5ca2ece761e42598775fa4df85eeb18ad143d374f903080d67453a8079b59f19e90d24b89adf3a3092159f6c93ce1c987f58c55cc5626efcb1be6aa89
    Skein512_512:60a35e52822bd0ac2e9c9af1218749e29e1858eb24c645c28b3d03843a5680000d76b8146a67c7c7bc8df92c8b2059a98886161b8e1a51b3a833e5902e56df02

package-locations:
    https://hackage.haskell.org/package/semigroupoids-1.2.2.4/semigroupoids-1.2.2.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/semigroupoids-1.2.2.4.tar.gz

package-size: 10138
