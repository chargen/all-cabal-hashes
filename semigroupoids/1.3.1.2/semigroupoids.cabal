name:          semigroupoids
category:      Control, Comonads
version:       1.3.1.2
x-revision: 1
license:       BSD3
cabal-version: >= 1.6
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://github.com/ekmett/semigroupoids
copyright:     Copyright (C) 2011 Edward A. Kmett
build-type:    Simple
synopsis:      Haskell 98 semigroupoids: Category sans id
description:   
  Provides a wide array of semigroupoids and operations for working with semigroupds.
  .
  A Semigroupoid is a Category without the requirement of identity arrows for every object in the category.
  .
  When working with comonads you often have the @\<*\>@ portion of an @Applicative@, but
  not the @pure@. This was captured in Uustalu and Vene's \"Essence of Dataflow Programming\"
  in the form of the @ComonadZip@ class in the days before @Applicative@. Apply provides a weaker invariant, but for the comonads used for data flow programming (found in the streams package), this invariant is preserved. Applicative function composition forms a semigroupoid. 
  .
  Similarly many structures are nearly a comonad, but not quite, for instance lists provide a reasonable 'extend' operation in the form of 'tails', but do not always contain a value.
  .
  .
  Ideally the following relationships would hold:
  .
  > Traversable <---- Foldable <--- Functor ------> Alt ---------> Plus           Semigroupoid
  >      |               |            |                              |                  |
  >      v               v            v                              v                  v
  > Traversable1 <--- Foldable1     Apply --------> Applicative -> Alternative      Category
  >                                   |               |              |                  |
  >                                   v               v              v                  v
  >                                 Bind ---------> Monad -------> MonadPlus          Arrow
  >                         
  . 
  Apply, Bind, and Extract give rise the Static, Kleisli and Cokleisli semigroupoids respectively.
  .
  This lets us remove many of the restrictions from various monad transformers
  as in many cases the binding operation or @\<*\>@ operation does not require them.
  .
  Finally, to work with these weaker structures it is beneficial to have containers
  that can provide stronger guarantees about their contents, so versions of 'Traversable'
  and 'Foldable' that can be folded with just a 'Semigroup' are added.

source-repository head
  type: git
  location: git://github.com/ekmett/semigroupoids.git

library
  build-depends:
    base          >= 4       && < 4.6,
    transformers  >= 0.2     && < 0.4,
    containers    >= 0.3     && < 0.6,
    contravariant >= 0.2.0.1 && < 0.3,
    comonad       >= 1.1.1.5 && < 1.2,
    semigroups    >= 0.8.3.1 && < 0.9

  exposed-modules:
    Data.Functor.Alt,
    Data.Functor.Apply,
    Data.Functor.Bind,
    Data.Functor.Bind.Trans,
    Data.Functor.Plus,
    Data.Semigroup.Foldable,
    Data.Semigroup.Traversable
    Data.Semigroupoid
    Data.Semigroupoid.Dual
    Data.Semigroupoid.Static
    Data.Traversable.Instances

  ghc-options: -Wall


package-hashes:
    MD5:7eadd3e106c7108f00c64f4df5f32c5a
    SHA1:eb18fe37953e2c04d807d237cee8640008250d45
    SHA256:02a78e22dfbe1aa53d85eaa5e1b8d6ad1e07657fab3244c0389b2cbd8e70c4bd
    SHA512:902811adc588954fe24b19b6e41af83ca0fac2b7e07b64847e05b69067aa0f77f83d2461fb2692bdf5209c87473a7852b00da1459c65da252f9e9b35d0a484e7
    Skein512_512:1dd3e7c1210b05e3bbeb9b85ab977db9431e16195ffde735e4ff458b2cdee4b517a7e0f5d15127659e37a1eec8031e3b2beb73006e036b196b97be608aa6916e

package-locations:
    https://hackage.haskell.org/package/semigroupoids-1.3.1.2/semigroupoids-1.3.1.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/semigroupoids-1.3.1.2.tar.gz

package-size: 10253
