-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:755ecb501f8d75a05be3688c2391ac6a
    SHA1:22b8f07fe01190e5996fc7fd38fd84512e9a20e2
    SHA256:e11d4c45d2874bdef8d0309ba33e078622c20a2839d4114d0ae0ccea63e1baa0
    SHA512:e026713ce3c9e8b83208ebfc0ea83bbbb22d634e0be429392c0786ab9ed206a3cd421494d46bc4b95dcd445091f6ea2a1728952a819fc7d3caf37b7053225e2a
    Skein512_512:248a62feac305fa7e1845b84cb27840cb281ca41ac68383950930b06e7fd06bdd5f47b775f65775c7641785714a49e2576b2edffbbd610498e21f2181eab878f

package-locations:
    https://hackage.haskell.org/package/semigroupoids-1.2.1/semigroupoids-1.2.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/semigroupoids-1.2.1.tar.gz

package-size: 11151
-- END Added by all-cabal-hashes-tool

name:          semigroupoids
category:      Control, Comonads
version:       1.2.1
license:       BSD3
cabal-version: >= 1.6
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://github.com/ekmett/semigroupoids
copyright:     Copyright (C) 2011 Edward A. Kmett
build-type:    Simple
synopsis:      Haskell 98 semigroupoids: Category sans id
description:   
  Provides a wide array of semigroupoids and operations for working with semigroupds.
  .
  A Semigroupoid is a Category without the requirement of identity arrows for every object in the category.
  .
  When working with comonads you often have the @\<*\>@ portion of an @Applicative@, but
  not the @pure@. This was captured in Uustalu and Vene's \"Essence of Dataflow Programming\"
  in the form of the @ComonadZip@ class in the days before @Applicative@. Apply provides a weaker invariant, but for the comonads used for data flow programming (found in the streams package), this invariant is preserved. Applicative function composition forms a semigroupoid. 
  .
  Similarly many structures are nearly a comonad, but not quite, for instance lists provide a reasonable 'extend' operation in the form of 'tails', but do not always contain a value.
  .
  .
  Ideally the following relationships would hold:
  .
  > Traversable <---- Foldable <--- Functor ------> Alt ---------> Plus   
  >      |               |            |                              |     
  >      v               v            v                              v       
  > Traversable1 <--- Foldable1     Apply --------> Applicative -> Alternative
  >                                   |               |              |        
  >                                   v               v              v       
  >                                 Bind ---------> Monad -------> MonadPlus  
  >                         
  >                          
  >
  > Bitraversable <-- Bifoldable <- Bifunctor                   Semigroupoid
  >     |                  |          |                              |
  >     v                  v          v                              v
  > Bitraversable1 <- Bifoldable1   Biapply                       Category
  >                                                                  |
  >                                                                  v
  >                                                                Arrow
  . 
  Apply, Bind, and Extract give rise the Static, Kleisli and Cokleisli semigroupoids respectively.
  .
  This lets us remove many of the restrictions from various monad transformers
  as in many cases the binding operation or @\<*\>@ operation does not require them.
  .
  Finally, to work with these weaker structures it is beneficial to have containers
  that can provide stronger guarantees about their contents, so versions of 'Traversable'
  and 'Foldable' that can be folded with just a 'Semigroup' are added.

source-repository head
  type: git
  location: git://github.com/ekmett/semigroupoids.git

library
  build-depends: 
    base >= 4 && < 4.4,
    transformers >= 0.2 && < 0.3,
    containers >= 0.3 && < 0.5,
    contravariant >= 0.1.2 && < 0.2,
    comonad >= 1.1 && < 1.2, 
    semigroups >= 0.5 && < 0.6,
    bifunctors >= 0.1 && < 0.2

  exposed-modules:
    Data.Bifunctor.Apply,
    Data.Functor.Alt,
    Data.Functor.Apply,
    Data.Functor.Bind,
    Data.Functor.Bind.Trans,
    Data.Functor.Plus,
    Data.Semigroup.Bifoldable,
    Data.Semigroup.Bitraversable
    Data.Semigroup.Foldable,
    Data.Semigroup.Traversable
    Data.Semigroupoid
    Data.Semigroupoid.Dual
    Data.Semigroupoid.Static
    Data.Traversable.Instances

  ghc-options: -Wall 
