-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:0095c6fb36e236178ebe83bddad06991
    SHA1:055e65dcba125f46d6477470e8b37220a13c6625
    SHA256:b428c03f70ecc4526eaacc4f437fe58974d0006610d6a72019b069ce569da934
    SHA512:a681d92f34ea07919d2ccf87af487e7714cde742abf207020800cb0f36c9fee37e5e5dceef32040a8e6e2955adc3cab3720cbfc904680157281ecb474e9f9244
    Skein512_512:25235b72c9ae4b9ed901e847e2593c8a8ed216d2b05b493c6b3df5f54d17622c42e81b0948483dd3ed7da24d0f9d05c1eb02762d3d2360e7b602e54fcb2f0d69

x-package-locations:
    https://hackage.haskell.org/package/BNFC-meta-0.4.0.2/BNFC-meta-0.4.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/BNFC-meta-0.4.0.2.tar.gz

x-package-size: 62020
-- END Added by all-cabal-hashes-tool

Name:	        BNFC-meta
version:        0.4.0.2
cabal-Version:  >= 1.6
build-type:     Simple
license:        GPL-2
license-file:   LICENSE
author:		    Jonas Duregård
maintainer:     Jonas Duregård (jonas.duregard@chalmers.se)
category:	    Development
synopsis:	    Deriving Parsers and Quasi-Quoters from BNF Grammars
description:    This package provides a very simple way of defining a compiler   
  front-end for a language by embedding a BNF grammar directly into a Haskell 
  source file. 
  
  Specifically, given a quasi-quoted LBNF grammar (as used by the BNF Converter)  
  it generates (using Template Haskell) a LALR parser and pretty pretty printer 
  for the language. The parser is then used to automatically define a 
  quasi-quoter for the defined language so it can also be seamlessly embedded
  in Haskell source code. With a 
  simple addition to the gramwmar, the user can define a universal syntax for 
  anti-quoting. This 
  means that any grammar non-terminal can be replaced by a quoted Haskell 
  expression of the appropriate type. A few example languages are included in
  the source tarball.
  .  
  The LBNF grammar formalism is described thoroughly in the BNF Converter 
  documentation: <http://bnfc.digitalgrammars.com/>
  .  
  This library and the additions it makes to LBNF is described in a 
  2011 Haskell Symposium paper titled \"Embedded Parser Generators\":
  <http://wiki.portal.chalmers.se/cse/pmwiki.php/FP/EmbeddedParserGenerators>

extra-source-files:
  examples/jll/JavaletteLight.hs
  examples/jll/UseJll.hs
  examples/typesafe/Example.hs
  examples/typesafe/Typesafe.hs
  Bootstrap/Bootstrap.hs

Library
  Build-Depends: 
    base>=4.2&&<5
    , array>=0.4&&<0.6
    , template-haskell >=2.4&&<2.10
    , haskell-src-meta >= 0.5 && < 1.0
    , happy-meta >= 0.2.0.4 && < 0.3
    , alex-meta >= 0.3.0.5 && < 0.4
    , syb >= 0.2 && <1.0
  Exposed-modules:
    Language.LBNF
    , Language.LBNF.Runtime
    , Language.LBNF.Compiletime
    , Language.LBNF.Grammar
  Other-modules:
    Language.LBNF.CF
    , Language.LBNF.CFtoAbstract
    , Language.LBNF.CFtoAlex2
    , Language.LBNF.CFtoHappy 
    , Language.LBNF.CFtoLayout 
    , Language.LBNF.CFtoPrinter
    , Language.LBNF.CFtoQQ
    , Language.LBNF.GetCF
    , Language.LBNF.TypeChecker
    , Language.LBNF.Utils
    , Language.Haskell.TH.Hide
