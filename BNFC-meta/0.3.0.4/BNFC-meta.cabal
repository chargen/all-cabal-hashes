-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:15b913ec6b1b777fd59fc0f2f07af45e
    SHA1:b6387ae44d7ed1f16d66a0e96140a4e23b83fb6c
    SHA256:3dba3d59a4c46e549a0338daa981e4e7eb0a86b48635b87cd440fe0324babed6
    SHA512:67d13d5e6c7c190572d2e29c48dd92087e14e26a10c175ea42118f9072cad0b8a1b119e8c4c8bd8f98afcf53cfb1e61eb6efc29b0a4742e201d4e29a49e7115e
    Skein512_512:f79ba8a32fa0152116ba7cfb653f89f0bdd005ac6c97f84add7deca1b78444e08fde077ae95580161e5c7cd6649fbf199ac259f530b97ffb139733d2c45f7438

x-package-locations:
    https://hackage.haskell.org/package/BNFC-meta-0.3.0.4/BNFC-meta-0.3.0.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/BNFC-meta-0.3.0.4.tar.gz

x-package-size: 62678
-- END Added by all-cabal-hashes-tool

Name:		BNFC-meta
version:	0.3.0.4
cabal-Version:  >= 1.6
build-type:     Simple
license:        GPL-2
license-file:   LICENSE
author:		Jonas Duregård
maintainer:     Jonas Duregård (jonas.duregard@chalmers.se)
category:	Development
synopsis:	Deriving Quasi-Quoters from BNF Grammars
description:    This package provides a comfortable way of defining quasi-quoters. 
  Specifically, given a quasi-quoted LBNF grammar (as used by the BNF Converter)  
  it generates (using Template Haskell) an LALR parser and pretty pretty printer 
  for the language. The parser is then used to define a quasi-quoter. With a simple
  pragma, the user can define a universal syntax for anti-quoting. This means that 
  any grammar non-terminal can be replaced by a quoted Haskell expression of the 
  appropriate type. A few examples are included in the source tarball.

extra-source-files:
  examples/ghc7/jll/JavaletteLight.hs
  examples/ghc7/jll/UseJll.hs
  examples/ghc6/jll/JavaletteLight.hs
  examples/ghc6/jll/UseJll.hs
  Bootstrap/Bootstrap.hs

Library
  Build-Depends: 
    base>=4.2&&<5
    , array>=0.3 && <0.5
    , template-haskell >=2.4&&<2.8
    , haskell-src-meta >= 0.5 && < 1.0
    , happy-meta >= 0.2.0.4 && < 0.3
    , alex-meta >= 0.3.0.3 && < 0.4
    , syb >= 0.2 && <1.0
  Exposed-modules:
    Language.LBNF
    , Language.LBNF.Runtime
    , Language.LBNF.Compiletime
    , Language.LBNF.Grammar
  Other-modules:
    Language.LBNF.CF
    , Language.LBNF.CFtoAbstract
    , Language.LBNF.CFtoAlex2
    , Language.LBNF.CFtoHappy 
    , Language.LBNF.CFtoLayout 
    , Language.LBNF.CFtoPrinter
    , Language.LBNF.CFtoQQ
    , Language.LBNF.GetCF
    , Language.LBNF.TypeChecker
    , Language.LBNF.Utils
    , Language.Haskell.TH.Hide
