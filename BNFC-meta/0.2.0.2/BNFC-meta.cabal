-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:074a785a6525e8da25adbb14972914e6
    SHA1:92dfda5bfb6479c9ee4ea747f03f3152f0392044
    SHA256:27e1e55e63c477d4f4332a2fda9e2ac33e661687188605f3f052c9a26f906def
    SHA512:d837c7c1deb6269c49ed770d0ccc1a354a3ee3a50402b89b79428b424c8033d00f98f67a344b7e84752f0ea2082c529992949d4c9fea4cf47d1504faeff7540e
    Skein512_512:193037c22ca8b34a4c813eaad4f93af2c68ef808d8ab3df13493bcf90ae3084d40796b45a271361a54207474c0083385842ce42c6adba76c556a7f64cc771bad

package-locations:
    https://hackage.haskell.org/package/BNFC-meta-0.2.0.2/BNFC-meta-0.2.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/BNFC-meta-0.2.0.2.tar.gz

package-size: 56901
-- END Added by all-cabal-hashes-tool

Name:		BNFC-meta
version:	0.2.0.2
cabal-Version:  >= 1.6
build-type:     Simple
license:        GPL-2
license-file:   LICENSE
author:		Jonas Duregård
maintainer:     Jonas Duregård (jonas.duregard@chalmers.se)
category:	Development
synopsis:	Deriving Quasi-Quoters from BNF Grammars
description:    This package provides a comfortable way of defining quasi-quoters. 
  Specifically, given a quasi-quoted LBNF grammar (as used by the BNF Converter)  
  it generates (using Template Haskell) an LALR parser and pretty pretty printer 
  for the language. The parser is then used to define a quasi-quoter. With a simple
  pragma, the user can define a universal syntax for anti-quoting. This means that 
  any grammar non-terminal can be replaced by a quoted Haskell expression of the 
  appropriate type. A few examples are included in the source tarball.

extra-source-files:
  examples/GHC7/jll/JavaletteLight.hs
  examples/GHC7/jll/UseJll.hs
  examples/GHC6/jll/JavaletteLight.hs
  examples/GHC6/jll/UseJll.hs
  Bootstrap/Bootstrap.hs

Library
  Build-Depends: 
    base>=4.2&&<5
    , array==0.3.0.*
    , template-haskell >=2.4&&<2.6
    , haskell-src-meta >= 0.3 && < 1.0
    , happy-meta >= 0.2.0.2
    , alex-meta >= 0.2.0.1
  Exposed-modules:
    Language.LBNF
    , Language.LBNF.Runtime
    , Language.LBNF.Compiletime
    , Language.LBNF.Grammar
  Other-modules:
    Language.LBNF.CF
    , Language.LBNF.CFtoAbstract
    , Language.LBNF.CFtoAlex2
    , Language.LBNF.CFtoHappy 
    , Language.LBNF.CFtoPrinter
    , Language.LBNF.CFtoQQ
    , Language.LBNF.GetCF
    , Language.LBNF.TypeChecker
    , Language.LBNF.Utils
    , Language.Haskell.TH.Hide
