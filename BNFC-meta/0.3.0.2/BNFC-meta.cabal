-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:50425189dc63d2eee96d5f31499a119a
    SHA1:aa482b50c8cd1037c02b122bbc0b30acf8f22352
    SHA256:447d4fc7421c2b1ead582e49c98978b46fd997a35c6ce35b462d4a8e2f1d9d74
    SHA512:672eb1d2ebcf3d61d6d15d455fe84f075d35405ceafa9464d772c600935abc815e3276106cc756d566c4167d40a91abf416c5b019555cad3bb1320e6f50af55d
    Skein512_512:b98d2fe247807fcaf68acca8d0510bd4b75c0afb4c62d7d8d3fef8b0f11574ece6133a7f0c577ff0aa87bab39748bbe2c2c4c0c8ef9d9d90b276dc0ae46cd432

x-package-locations:
    https://hackage.haskell.org/package/BNFC-meta-0.3.0.2/BNFC-meta-0.3.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/BNFC-meta-0.3.0.2.tar.gz

x-package-size: 61059
-- END Added by all-cabal-hashes-tool

Name:		BNFC-meta
version:	0.3.0.2
cabal-Version:  >= 1.6
build-type:     Simple
license:        GPL-2
license-file:   LICENSE
author:		Jonas Duregård
maintainer:     Jonas Duregård (jonas.duregard@chalmers.se)
category:	Development
synopsis:	Deriving Quasi-Quoters from BNF Grammars
description:    This package provides a comfortable way of defining quasi-quoters. 
  Specifically, given a quasi-quoted LBNF grammar (as used by the BNF Converter)  
  it generates (using Template Haskell) an LALR parser and pretty pretty printer 
  for the language. The parser is then used to define a quasi-quoter. With a simple
  pragma, the user can define a universal syntax for anti-quoting. This means that 
  any grammar non-terminal can be replaced by a quoted Haskell expression of the 
  appropriate type. A few examples are included in the source tarball.

extra-source-files:
  examples/ghc7/jll/JavaletteLight.hs
  examples/ghc7/jll/UseJll.hs
  examples/ghc6/jll/JavaletteLight.hs
  examples/ghc6/jll/UseJll.hs
  Bootstrap/Bootstrap.hs

Library
  Build-Depends: 
    base>=4.2&&<5
    , array==0.4.*
    , template-haskell >=2.4&&<2.8
    , haskell-src-meta >= 0.5 && < 1.0
    , happy-meta >= 0.2.0.4 && < 0.3
    , alex-meta >= 0.3.0.3 && < 0.4
    , syb >= 0.2 && <1.0
  Exposed-modules:
    Language.LBNF
    , Language.LBNF.Runtime
    , Language.LBNF.Compiletime
    , Language.LBNF.Grammar
  Other-modules:
    Language.LBNF.CF
    , Language.LBNF.CFtoAbstract
    , Language.LBNF.CFtoAlex2
    , Language.LBNF.CFtoHappy 
    , Language.LBNF.CFtoLayout 
    , Language.LBNF.CFtoPrinter
    , Language.LBNF.CFtoQQ
    , Language.LBNF.GetCF
    , Language.LBNF.TypeChecker
    , Language.LBNF.Utils
    , Language.Haskell.TH.Hide
