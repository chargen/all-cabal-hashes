-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:5cb01661531a3fcd2690ab2da433d73e
    SHA1:805b6e79e1b78f9a36eeb8f0f0bfd3a4407ce888
    SHA256:9c11b4098c31e79f1a33d95d12547c5b7ef554fe1da6c6ad3594aa4ce8d8f9d5
    SHA512:db799fb667b44cf68189fc1f33c609773671d14a342d75c42f1d309ad12c4c16275f3d9e2dbb1ba20eb9add99fbc6f2e0969350b06357dd8e9bdc52136e9c1ed
    Skein512_512:30bd4348e27482bf1e4e1c2bf9cd8144d916796686f54ffe75f9525e7224950a592dfbb57001fea41dc7a336648104a81a6d50227986ca0ab1c9831f5ea47bc4

x-package-locations:
    https://hackage.haskell.org/package/BNFC-meta-0.1.0.3/BNFC-meta-0.1.0.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/BNFC-meta-0.1.0.3.tar.gz

x-package-size: 45780
-- END Added by all-cabal-hashes-tool

Name:		BNFC-meta
version:	0.1.0.3
cabal-Version:  >= 1.6
build-type:     Simple
license:        GPL-2
license-file:   LICENSE
author:		Jonas Duregård
maintainer:     Jonas Duregård (jonas.duregard@chalmers.se)
category:	Language
synopsis:	Deriving Quasi-Quoters from BNF Grammars
description:    This package provides a comfortable way of defining quasi-quoters. 
  Specifically, given a quasi-quoted LBNF grammar (as used by the BNF Converter)  
  it generates (using Template Haskell) an LALR parser and pretty pretty printer 
  for the language. The parser is then used to define a quasi-quoter. With a simple
  pragma, the user can define a universal syntax for anti-quoting. This means that 
  any grammar non-terminal can be replaced by a quoted Haskell expression of the 
  appropriate type. A few examples are included in the source tarball.

extra-source-files:
  examples/jll/JavaletteLight.hs
  examples/jll/UseJll.hs
  examples/sql/Sql.hs
  examples/sql/UseSql.hs

Library
  Build-Depends: 
    base>=4.2&&<5
    , array==0.3.0.*
    , template-haskell >=2.4&&<2.6
    , haskell-src-meta >= 0.1.1 && < 0.4
    , th-lift >=0.5&&<0.6
    , happy-meta < 0.3
    , alex-meta < 0.3
  Exposed-modules:
    Language.LBNF
  Other-modules:
    Language.LBNF.AbsBNF
    , Language.LBNF.CF
    , Language.LBNF.CFtoAbstract
    , Language.LBNF.CFtoAlex2
    , Language.LBNF.CFtoHappy 
    , Language.LBNF.CFtoPrinter
    , Language.LBNF.ErrM
    , Language.LBNF.GetCF
    , Language.LBNF.LiftBNF
    , Language.LBNF.PrintPrelude
    
    , Language.LBNF.LexBNF
    , Language.LBNF.ParBNF
    , Language.LBNF.RegToAlex
    , Language.LBNF.TypeChecker
    , Language.LBNF.Utils
