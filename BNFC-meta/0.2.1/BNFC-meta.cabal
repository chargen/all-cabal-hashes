-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:69f2afcb11b1c1aee4641931c9390322
    SHA1:7dd4741402b938d238f0f23d1404b66351911ed3
    SHA256:b53e324175674d48155fcd90df688bd781b1f073369c3c5cba8f7a357ba8a830
    SHA512:eed1438840650f148b8ab7940596aa4438f512bd9ac343b2b69080ab44fbe82b832e7334f1f75718c09692ef5115e59b7daf789b635a39c350e1b6a5da670333
    Skein512_512:9ccf4285e8faeba4cb50ff37034a640df117daf1a210ce7adb76b13c6a04b5a4743b116171316d46fe67782b69bdee96d37c1e5605d0160caf0758229d19a18a

x-package-locations:
    https://hackage.haskell.org/package/BNFC-meta-0.2.1/BNFC-meta-0.2.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/BNFC-meta-0.2.1.tar.gz

x-package-size: 57446
-- END Added by all-cabal-hashes-tool

Name:		BNFC-meta
version:	0.2.1
cabal-Version:  >= 1.6
build-type:     Simple
license:        GPL-2
license-file:   LICENSE
author:		Jonas Duregård
maintainer:     Jonas Duregård (jonas.duregard@chalmers.se)
category:	Development
synopsis:	Deriving Quasi-Quoters from BNF Grammars
description:    This package provides a comfortable way of defining quasi-quoters. 
  Specifically, given a quasi-quoted LBNF grammar (as used by the BNF Converter)  
  it generates (using Template Haskell) an LALR parser and pretty pretty printer 
  for the language. The parser is then used to define a quasi-quoter. With a simple
  pragma, the user can define a universal syntax for anti-quoting. This means that 
  any grammar non-terminal can be replaced by a quoted Haskell expression of the 
  appropriate type. A few examples are included in the source tarball.

extra-source-files:
  examples/GHC7/jll/JavaletteLight.hs
  examples/GHC7/jll/UseJll.hs
  examples/GHC6/jll/JavaletteLight.hs
  examples/GHC6/jll/UseJll.hs
  Bootstrap/Bootstrap.hs

Library
  Build-Depends: 
    base>=4.2&&<5
    , array==0.3.0.*
    , template-haskell >=2.4&&<2.6
    , haskell-src-meta >= 0.3 && < 1.0
    , happy-meta >= 0.2.0.2
    , alex-meta >= 0.2.0.1
  Exposed-modules:
    Language.LBNF
    , Language.LBNF.Runtime
    , Language.LBNF.Compiletime
    , Language.LBNF.Grammar
  Other-modules:
    Language.LBNF.CF
    , Language.LBNF.CFtoAbstract
    , Language.LBNF.CFtoAlex2
    , Language.LBNF.CFtoHappy 
    , Language.LBNF.CFtoPrinter
    , Language.LBNF.CFtoQQ
    , Language.LBNF.GetCF
    , Language.LBNF.TypeChecker
    , Language.LBNF.Utils
    , Language.Haskell.TH.Hide
