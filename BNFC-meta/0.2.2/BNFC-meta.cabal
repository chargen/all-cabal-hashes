-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:615eea275870ed83043384e5e66f535c
    SHA1:fd5fbb3e8a80b14284c358ccb63ac6febd7ff386
    SHA256:bd21976318cf43e086d06c3aea9d4cccd2d10f0c8a75c0d78a93b1cc1a604e1e
    SHA512:9add5ccdcbfa5d9d99ba96d9767fb36efceadb9e8a213f6947f6de3772268a61d928c5c3644911db143fc4a95078a8e16561479578af4834900e2f6235fa15a2
    Skein512_512:ed35112dbab9e5902ac37a6fd6e508cc7fb2c2415a5d69b55271d88b358d62b40edd6692a5c7faadc02c79c0e4c3a7a0bcedf57117368341f852ba3b19de5b77

package-locations:
    https://hackage.haskell.org/package/BNFC-meta-0.2.2/BNFC-meta-0.2.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/BNFC-meta-0.2.2.tar.gz

package-size: 56699
-- END Added by all-cabal-hashes-tool

Name:		BNFC-meta
version:	0.2.2
cabal-Version:  >= 1.6
build-type:     Simple
license:        GPL-2
license-file:   LICENSE
author:		Jonas Duregård
maintainer:     Jonas Duregård (jonas.duregard@chalmers.se)
category:	Development
synopsis:	Deriving Quasi-Quoters from BNF Grammars
description:    This package provides a comfortable way of defining quasi-quoters. 
  Specifically, given a quasi-quoted LBNF grammar (as used by the BNF Converter)  
  it generates (using Template Haskell) an LALR parser and pretty pretty printer 
  for the language. The parser is then used to define a quasi-quoter. With a simple
  pragma, the user can define a universal syntax for anti-quoting. This means that 
  any grammar non-terminal can be replaced by a quoted Haskell expression of the 
  appropriate type. A few examples are included in the source tarball.

extra-source-files:
  examples/GHC7/jll/JavaletteLight.hs
  examples/GHC7/jll/UseJll.hs
  examples/GHC6/jll/JavaletteLight.hs
  examples/GHC6/jll/UseJll.hs
  Bootstrap/Bootstrap.hs

Library
  Build-Depends: 
    base>=4.2&&<5
    , array==0.3.0.*
    , template-haskell >=2.4&&<2.7
    , haskell-src-meta >= 0.3 && < 1.0
    , happy-meta >= 0.2.0.2
    , alex-meta >= 0.2.0.1
  Exposed-modules:
    Language.LBNF
    , Language.LBNF.Runtime
    , Language.LBNF.Compiletime
    , Language.LBNF.Grammar
  Other-modules:
    Language.LBNF.CF
    , Language.LBNF.CFtoAbstract
    , Language.LBNF.CFtoAlex2
    , Language.LBNF.CFtoHappy 
    , Language.LBNF.CFtoPrinter
    , Language.LBNF.CFtoQQ
    , Language.LBNF.GetCF
    , Language.LBNF.TypeChecker
    , Language.LBNF.Utils
    , Language.Haskell.TH.Hide
