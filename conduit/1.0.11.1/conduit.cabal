Name:                conduit
Version:             1.0.11.1
Synopsis:            Streaming data processing library.
Description:
    @conduit@ is a solution to the streaming data problem, allowing for production, transformation, and consumption of streams of data in constant memory. It is an alternative to lazy I\/O which guarantees deterministic resource handling, and fits in the same general solution space as @enumerator@\/@iteratee@ and @pipes@. For a tutorial, please visit <https://haskell.fpcomplete.com/user/snoyberg/library-documentation/conduit-overview>.
	.
	Release history:
    .
    [1.0] Simplified the user-facing interface back to the Source, Sink, and Conduit types, with Producer and Consumer for generic code. Error messages have been simplified, and optional leftovers and upstream terminators have been removed from the external API. Some long-deprecated functions were finally removed.
    .
    [0.5] The internals of the package are now separated to the .Internal module, leaving only the higher-level interface in the advertised API. Internally, switched to a @Leftover@ constructor and slightly tweaked the finalization semantics.
    .
    [0.4] Inspired by the design of the pipes package: we now have a single unified type underlying @Source@, @Sink@, and @Conduit@. This type is named @Pipe@. There are type synonyms provided for the other three types. Additionally, @BufferedSource@ is no longer provided. Instead, the connect-and-resume operator, @$$+@, can be used for the same purpose.
    .
    [0.3] ResourceT has been greatly simplified, specialized for IO, and moved into a separate package. Instead of hard-coding ResourceT into the conduit datatypes, they can now live around any monad. The Conduit datatype has been enhanced to better allow generation of streaming output. The SourceResult, SinkResult, and ConduitResult datatypes have been removed entirely.
	.
    [0.2] Instead of storing state in mutable variables, we now use CPS. A @Source@ returns the next @Source@, and likewise for @Sink@s and @Conduit@s. Not only does this take better advantage of GHC\'s optimizations (about a 20% speedup), but it allows some operations to have a reduction in algorithmic complexity from exponential to linear. This also allowed us to remove the @Prepared@ set of types. Also, the @State@ functions (e.g., @sinkState@) use better constructors for return types, avoiding the need for a dummy state on completion.
    .
	[0.1] @BufferedSource@ is now an abstract type, and has a much more efficient internal representation. The result was a 41% speedup on microbenchmarks (note: do not expect speedups anywhere near that in real usage). In general, we are moving towards @BufferedSource@ being a specific tool used internally as needed, but using @Source@ for all external APIs.
	.
	[0.0] Initial release.
License:             MIT
License-file:        LICENSE
Author:              Michael Snoyman
Maintainer:          michael@snoyman.com
Category:            Data, Conduit
Build-type:          Simple
Cabal-version:       >=1.8
Homepage:            http://github.com/snoyberg/conduit
extra-source-files:  test/main.hs, test/random

flag nohandles
    default: False
    Description: experimental code to use raw system calls in place of handles. Not recommended for general use

Library
  if os(windows)
      cpp-options: -DCABAL_OS_WINDOWS
      other-modules: System.Win32File
  else
      other-modules: System.PosixFile
      if flag(nohandles)
          cpp-options: -DNO_HANDLES
  Exposed-modules:     Data.Conduit
                       Data.Conduit.Binary
                       Data.Conduit.Text
                       Data.Conduit.List
                       Data.Conduit.Lazy
                       Data.Conduit.Internal
                       Data.Conduit.Util
                       Data.Conduit.Lift
  Build-depends:       base                     >= 4.3          && < 5
                     , resourcet                >= 0.4.3        && < 0.5
                     , lifted-base              >= 0.1
                     , transformers-base        >= 0.4.1        && < 0.5
                     , monad-control            >= 0.3.1        && < 0.4
                     , containers
                     , transformers             >= 0.2.2        && < 0.4
                     , mtl
                     , bytestring               >= 0.9
                     , text                     >= 0.11
                     , void                     >= 0.5.5
                     , mmorph
                     , directory
  ghc-options:     -Wall

test-suite test
    hs-source-dirs: test
    main-is: main.hs
    type: exitcode-stdio-1.0
    cpp-options:   -DTEST
    build-depends:   conduit
                   , base
                   , hspec >= 1.3
                   , QuickCheck
                   , bytestring
                   , transformers
                   , mtl
                   , text
                   , resourcet
                   , void
    ghc-options:     -Wall

--test-suite doctests
--    hs-source-dirs: test
--    main-is: doctests.hs
--    type: exitcode-stdio-1.0
--    ghc-options: -threaded
--    build-depends: base, directory, doctest >= 0.8

source-repository head
  type:     git
  location: git://github.com/snoyberg/conduit.git


package-hashes:
    MD5:e3d46e0c4b63f54bfa91e0b930556523
    SHA1:71c8b843b21e970a25b65bc218646b2c7803c4c5
    SHA256:8f1643abb52af06dd3898301c5d454624d7f4d5d7509bfea22c0daca61c3b184
    SHA512:c87de1df2cef7a52204f74d6829baabb11e3708d0f717b65087b7a4802a0c9d946f9701f4e575ca5ad8af2bd7ddda65bcc2f69f2ec5068ea9cdb36e186f88518
    Skein512_512:2aa71dabb7c84bdb6a0b80060eeffaa91a5de88e48b44f9c226840ebf085faeb73ec51b6aa11e852d1bee877f50b76c83101ad57c40472a829281deeb7ae211f

package-locations:
    https://hackage.haskell.org/package/conduit-1.0.11.1/conduit-1.0.11.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/conduit-1.0.11.1.tar.gz

package-size: 38589
