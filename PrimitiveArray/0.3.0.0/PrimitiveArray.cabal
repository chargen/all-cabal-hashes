-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:52c3327993b3bf6fb2777c927ea75aca
    SHA1:ab13c9a0b7bff9c7a8f5760aa2457aca701b6354
    SHA256:212600b5d5541d0881c749ecb35131f11eebe7d17fd5aa885881fdc9ebce47cf
    SHA512:5d829736eaaea15faee630d55f50ab687840cac1d7794e7b14c53934591a867c14fbc431a0f703a77d3ce269281483db3aaa4c273b9be8ba1cb14878fd6d69e1
    Skein512_512:ab88fc2be8c73a48fcde947cb1bd01234f2200bd39842e011cde5723e0f175c43d6dbf1089a9768bd5e2f52804fd13489d3567cc70b372693676dd4f070d8da1

x-package-locations:
    https://hackage.haskell.org/package/PrimitiveArray-0.3.0.0/PrimitiveArray-0.3.0.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/PrimitiveArray-0.3.0.0.tar.gz

x-package-size: 7037
-- END Added by all-cabal-hashes-tool

Name:           PrimitiveArray
Version:        0.3.0.0
License:        BSD3
License-file:   LICENSE
Author:         Christian Hoener zu Siederdissen
Maintainer:     choener@tbi.univie.ac.at
Copyright:      Christian Hoener zu Siederdissen, 2010-2012
Homepage:       http://www.tbi.univie.ac.at/~choener/
Stability:      Experimental
Category:       Data
Build-type:     Simple
Cabal-version:  >=1.6
Synopsis:
                Efficient multidimensional arrays
Description:
                This library provides efficient multidimensional arrays.
                .
                In general all operations are (highly) unsafe, no
                bounds-checking or other sanity-checking is performed.
                Operations are aimed toward efficiency as much as possible.
                Goals of the library are to have arrays according to three
                ideas: immutable/mutable arrays, strict/lazy arrays,
                zero-based/lower-bound arrays. Zero-based arrays save one
                addition on each access if the lower bound or the array is
                always zero.
                .
                We have forked two repa modules: Shape and Index.
                .
                Unboxed vectors are available with implementations based on
                "primitive" and "vector". The "primitive" version is probably
                obsolete now, as I don't see any slowdowns anymore. If this
                continues into GHC 7.6.1, I'll remove the old code (This will
                probably not break user code using Unboxed.Zero).

Library
  Exposed-modules:
    Data.Array.Repa.Index
    Data.Array.Repa.Shape
    Data.ExtShape
    Data.PrimitiveArray
    Data.PrimitiveArray.Unboxed.Zero
    Data.PrimitiveArray.Unboxed.VectorZero
    Data.PrimitiveArray.Zero
  Build-depends:
    base >= 4 && <5,
    primitive >= 0.4,
    vector >= 0.9
  ghc-options:
    -O2
    -funbox-strict-fields


source-repository head
  type: git
  location: git://github.com/choener/PrimitiveArray

