-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:517130a34b97674d7573c3a2c67f4269
    SHA1:f6af20798cf8e805917f71b351257b916e0e205b
    SHA256:6c6155463309dd93659904f1a0c6d301a657ed155efa077fd9a02d80234ba8ee
    SHA512:61a0948ab9c84507f40c5dc3d617bf9c8b0f3df4acd3768cce968375c3111062d0ac0f587b7fbb66de48a8a47e7e24d6139e021bd95b2a65dd36a262db2432bb
    Skein512_512:4e3bd8891891cad951c38f0934358543576eabbe9c010f7edf9dbe4c8f6d8682746442999fa42c76c8c4e5f511a7740a42f58a408902c0de00fee8b916bf9781

package-locations:
    https://hackage.haskell.org/package/PrimitiveArray-0.2.2.0/PrimitiveArray-0.2.2.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/PrimitiveArray-0.2.2.0.tar.gz

package-size: 6728
-- END Added by all-cabal-hashes-tool

Name:           PrimitiveArray
Version:        0.2.2.0
License:        BSD3
License-file:   LICENSE
Author:         Christian Hoener zu Siederdissen
Maintainer:     choener@tbi.univie.ac.at
Copyright:      Christian Hoener zu Siederdissen, 2010-2012
Homepage:       http://www.tbi.univie.ac.at/~choener/
Stability:      Experimental
Category:       Data
Build-type:     Simple
Cabal-version:  >=1.6
Synopsis:
                Efficient multidimensional arrays
Description:
                This library provides efficient multidimensional arrays.
                .
                In general all operations are (highly) unsafe, no
                bounds-checking or other sanity-checking is performed.
                Operations are aimed toward efficiency as much as possible.
                Goals of the library are to have arrays according to three
                ideas: immutable/mutable arrays, strict/lazy arrays,
                zero-based/lower-bound arrays. Zero-based arrays save one
                addition on each access if the lower bound or the array is
                always zero.
                .
                We have forked two repa modules: Shape and Index.
                .
                Unboxed vectors are available with implementations based on
                "primitive" and "vector". For some reason, we loose 50%
                performance with RNAfold if we use "vector" as the underlying
                data type, while Nussinov78 does not suffer.

Library
  Exposed-modules:
    Data.Array.Repa.Index
    Data.Array.Repa.Shape
    Data.ExtShape
    Data.PrimitiveArray
    Data.PrimitiveArray.Unboxed.Zero
    Data.PrimitiveArray.Unboxed.VectorZero
    Data.PrimitiveArray.Zero
  Build-depends:
    base >= 4 && <5,
    primitive >= 0.4,
    vector >= 0.9
  ghc-options:
    -O2
    -funbox-strict-fields


source-repository head
  type: git
  location: git://github.com/choener/PrimitiveArray

