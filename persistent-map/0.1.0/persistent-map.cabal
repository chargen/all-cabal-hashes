-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:b7834c221339605a2a89d0d90d390947
    SHA1:72a2b137879aad141e511d850cce6f7402edb286
    SHA256:3c27091f378fb6433a5060c1f51a5c58abac5dba90b27c0888e6a15404bb97d6
    SHA512:20a91e824a5deb2c4a8d7ab6b9a7b919de354a729abf90a1a7e73e026199fee8374910fffcad077a29e8fa4c4971aa1fb9b880ba31a88cd6588164d0e658980f
    Skein512_512:37b6bef2fb69b6cb0bf07c861e53e0cf41e45e4018172a1ba0cd4ace86c7ca978a28e760a3894b9cdac60663743e4c1ab329b9a8cfbb5dba90293c56b361870f

package-locations:
    https://hackage.haskell.org/package/persistent-map-0.1.0/persistent-map-0.1.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/persistent-map-0.1.0.tar.gz

package-size: 17488
-- END Added by all-cabal-hashes-tool

Name:           persistent-map
Synopsis:       A thread-safe interface for finite map types with optional persistency support.
Description:

    /Changes in 0.1.0:/
    .
    * Added the binary serialization backend.
    .
    This library provides a thread-safe (STM) frontend for finite map types together with a
    backend interface for persistent storage. The /TMap/ data type
    is thread-safe, since all access functions run inside an STM monad . Any type 
    instantiating 'Data.Edison.Assoc.FiniteMapX' 
    (see EdisonAPI) can be used as a map type. 
    .
    When a TMap is modified within an STM transaction, a corresponding
    backend IO-request is added using the onCommit hook (cf. stm-io-hooks
    package). To ensure consistency,
    the (Adv)STM monad runs these requests iff the transaction commits.  
    Additional backends (e.g. HDBC) can be added by instantiating the class 
    'Backend'.
    .
    /Example:/
    .
    Thread 1:
    .
    > atomically $ do
    >   isMemb <- member 1 tmap
    >   when (not isMemb) $ 
    >     insert 1 "john doe" tmap
    .
    Thread 2:
    .
    > atomically $ do
    >   v <- lookup 1 tmap
    >   -- ... do something with 'v'
    >   adjust (\_ -> "jd") 1 tmap
    .
    The function 'member' will first check whether the key value '1' is in the map;
    if not, it sends a lookup-request to the persistent backend 
    and then retries the transaction. Note that \"sending a lookup-request\"
    essentially means adding a call to the corresponding IO-function of the backend 
    to the list of retry-IO actions. (This is done using the 'retryWith' 
    IO hook of the stm-io-package.)
    .
    If the value does not exist yet, function 'insert' adds the key-value mapping to the
    TMap and sends an insert-request to the backend using the
    'onCommit' hook of the stm-io-package. Note that 'onCommit' guarantees that
    the backend IO action is only executed iff the transaction commits. Any 
    changes that were made to the TMap are invisible to other threads until 
    the onCommit actions are run.  Therefore, the threads will always observe a
    consistent state.
    .
    The module 'Data.TStorage' provides a high level interface to TMap inspired
    by the TCache package ((C) Alberto Gomez Corona). It
    can store any type that has a key (i.e. is an instance of type class 'HasKey').
    See file Sample.hs for an example on how to use it.
    .
    /Warning:/ This package is very experimental and the interface will
    probably change.

Author:         Peter Robinson
Maintainer:     Peter Robinson <thaldyron@gmail.com>
License:        LGPL
License-file:   LICENSE
Version:        0.1.0
Category:       Middleware, Concurrency
Stability:      experimental
Homepage:       http://darcs.monoid.at/persistent-map

build-type:     Simple                        
cabal-version: >= 1.2.3
library
    ghc-options:        -Wall -fno-ignore-asserts -fno-warn-missing-fields

    exposed-modules:    Data.TMap
                        Data.TStorage
                        Data.TMap.Backend
                        Data.TMap.Backend.Binary
                        Data.TMap.Backend.NoBackend
                        Data.TMap.Backend.StdoutBackend
                        Data.CacheStructure
                        Data.CacheStructure.LRU

    other-modules:      Sample
                        Data.TMap.Exception

    build-depends:      base >= 4 && < 5, 
                        EdisonAPI  >= 1.2.1 && < 1.3,
                        LRU >= 0.1.1 && < 0.2,
                        EdisonCore >= 1.2.1.3 && < 1.3,
                        stm-io-hooks >= 0.3.0 && < 0.4, 
--                        HDBC >= 2.0 && < 2.1, 
                        mtl >= 1.1.0.2 && < 1.2,
                        binary >= 0.5 && < 0.6,
                        filepath >= 1.1 && < 1.2,
                        directory >= 1.0.0.3 && < 1.1

    extensions:         MultiParamTypeClasses,
                        RankNTypes, 
                        FunctionalDependencies, 
                        FlexibleContexts,
                        FlexibleInstances,
                        UndecidableInstances,
                        DeriveDataTypeable,
                        ScopedTypeVariables

