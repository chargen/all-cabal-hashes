-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:a808652bd6a35180214e4ae732208189
    SHA1:e8d8e1ffd764813869e871af0c896ac07ebde946
    SHA256:391dbe910a611221b37cc9c047177d83a390fe9e539365cc7948e6b8cd506d9d
    SHA512:cebaae0fa9545e4755b0d98eb487746b7ba8efd8614328e087acacb8d14b1cdac8c1249286180db8311fac31fe3258e988f46619ab381dc250cd05907a6c26a2
    Skein512_512:17c994855263983a72e6191a461506520c702a08e2fadf40067bf9d1f3c4933a611cf41a70b2257d260ed1398bc7d068c1ac69fe3d5fd411a10cfcc3e63a657e

x-package-locations:
    https://hackage.haskell.org/package/comptrans-0.1.0.1/comptrans-0.1.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/comptrans-0.1.0.1.tar.gz

x-package-size: 9170
-- END Added by all-cabal-hashes-tool

Name:                comptrans
Version:             0.1.0.1
Synopsis:            
Description:         
License:             BSD3
License-File:        LICENSE
Author:              James Koppel
Maintainer:          James Koppel
Synopsis:            Automatically converting ASTs into compositional data types
Description:        
    Template Haskell for converting an AST for a language written using normal
    algebraic data types into ones written using multi-sorted compositional data types
    (Data.Comp.Multi from the compdata library) so that you can use generic and modular operators
    on it. You might need to add additional constructors that can e.g.: convert a (Term e Foo) into a
    (Term e [Foo]).
     The source files have comments showing example output for a simple language. See the examples directory
    for an extended example of generating a compositional data type for the entire Java language, with labelled variants
    as well as variants where an entire project of source files can be treated as a single AST -- and you can use the same operations
    on all of them!
Homepage:            https://github.com/jkoppel/comptrans
Category:            Data,Generics
Build-type:          Simple
Cabal-version:       >=1.9.2

Source-Repository head
  Type:      git
  Location:  https://github.com/jkoppel/comptrans

Library

  Extensions:
    DeriveGeneric
    EmptyDataDecls
    FlexibleContexts
    FlexibleInstances
    FunctionalDependencies
    GADTs
    KindSignatures
    MultiParamTypeClasses
    OverlappingInstances
    TemplateHaskell
    TypeFamilies
    TypeOperators
    TypeSynonymInstances
    UndecidableInstances

  Ghc-Options:
    -Wall

  Exposed-Modules:     
                       Data.Comp.Derive.Generic
                       Data.Comp.Trans

  Other-Modules:       
                       Data.Comp.Trans.Collect
                       Data.Comp.Trans.DeriveMulti
                       Data.Comp.Trans.DeriveTrans
                       Data.Comp.Trans.DeriveUntrans
                       Data.Comp.Trans.Names

  Build-Depends:       base >= 4.7, base < 5
                     , compdata < 1
                     , containers <= 0.6
                     , lens < 5
                     , template-haskell
                     , th-expand-syns <= 0.4
                     , ghc-prim >= 0.2
                     , deepseq < 1.4
                     , deepseq-generics < 0.1.2
