-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:a1af0adfa828fbaa80321e47cd8dba92
    SHA1:8ed034c164cac350e555cc41a0772617a3bd6dfa
    SHA256:a7d7629052a8f9ea4c14094d35dfb06868935ec01ed4e1b868c6334544898a21
    SHA512:f49a906bd07deb4f97154dbe281b059f135769f731cc46570cca0f684af13de6d2c17612af45c35b49afea62c144c3777529c58f58af40ecfc6c6573f9cb68b8
    Skein512_512:2ad3800e3cf5303504c89bc8507f08be991aaca40701f789de11a0581da10cfa2be88f23f2a088063c47fb11246c6cfb27ce9dc27fff347d64e132116a37ba28

x-package-locations:
    https://hackage.haskell.org/package/harpy-0.4.1/harpy-0.4.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/harpy-0.4.1.tar.gz

x-package-size: 72346
-- END Added by all-cabal-hashes-tool

Cabal-version:  >=1.2
Build-type: Simple
Name:           harpy
Version:        0.4.1
License:        GPL
License-file:   COPYING
Author:         Dirk Kleeblatt <klee@cs.tu-berlin.de>
                Martin Grabmueller <magr@cs.tu-berlin.de>
Maintainer:     klee@cs.tu-berlin.de, magr@cs.tu-berlin.de
Homepage:       http://uebb.cs.tu-berlin.de/harpy/
Category:       Code Generation
Synopsis:       Runtime code generation for x86 machine code
Description:	The package contains the following components:
	.
	* An x86 assembler.  We provide both low-level code generation in
	  module "Harpy.X86CodeGen" as well as a (slightly) higher-level
	  implementation in module "Harpy.X86Assembler", which figures out
	  addressing modes based on an instruction's operand types.
	.
	* An x86 disassembler which knows most of the opcodes available on
	  modern x86 processors and can display its output both in the style
	  used in Intel documents an in AT&T style, like the GNU tools. The
	  disassmbler can be found in module "Harpy.X86Disassembler".
	.
	* Some abstractions over the abovementioned code generation modules,
	  such as automatic label management and code generation
	  combinators (for if-then-else statements, while-loops, functions)
	  (module "Harpy.X86CGCombinators").
	.
	* All the above modules use the code generation monad defined in module
	  "Harpy.CodeGenMonad".
        .
        * The Darcs repo and two tutorials on using Harpy can be found at
          Harpy's homepage: <http://uebb.cs.tu-berlin.de/harpy/>
Stability:      Experimental

Extra-source-files: 
    NEWS README Makefile
    doc/Makefile doc/tutorial.lhs doc/larger-tutorial.lhs
    examples/evaluator/ArithTypes.hs examples/evaluator/ArithParser.hs
    examples/evaluator/Evaluator.hs

Flag small_base
  Description: Choose the new smaller, split-up base package.

Library
  if flag(small_base)
    Build-depends:  base >= 3,parsec,mtl,template-haskell,pretty,containers,array
  else
    Build-Depends: base < 3,parsec,mtl,template-haskell
  Exposed-Modules:
    Harpy,
    Harpy.X86CodeGen,
    Harpy.X86Assembler,
    Harpy.CodeGenMonad,
    Harpy.Call,
    Harpy.X86Disassembler,
    Harpy.X86CGCombinators
  Extensions: 
    ForeignFunctionInterface, MultiParamTypeClasses, 
    TemplateHaskell, CPP, FlexibleContexts, FlexibleInstances,
    RankNTypes
  Ghc-options: -O2 
