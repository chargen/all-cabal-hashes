-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:a4d9f9e3eb24c759011c16ec8aef2040
    SHA1:e66e42b43283f85e6a099f3d5068e1906a2ce7fb
    SHA256:f67ec81a4524bd86067dc489311a1bfa5adc2811a1e207690b6d6c2b3111c89a
    SHA512:b8ba256f67b7f2eec2898c743696bb070086fc1ee73ddca19d717cae28157122eefccd9860fd01d71460cd49066625ea2855c44f3b2f8bf871daa6d2fd7a756c
    Skein512_512:d45a3ca58b0c211b48abf34ffee014b4afed5d54bc791b6bb09fb5fbb2f25b7f944d4796fa7ce0eb0e915532d76d03c58912ea8f6b14813c4a798d56d70d7d6e

x-package-locations:
    https://hackage.haskell.org/package/tighttp-0.0.0.6/tighttp-0.0.0.6.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/tighttp-0.0.0.6.tar.gz

x-package-size: 11071
-- END Added by all-cabal-hashes-tool

build-type:	Simple
cabal-version:	>= 1.8

name:		tighttp
version:	0.0.0.6
stability:	Experimental
author:		Yoshikuni Jujo <PAF01143@nifty.ne.jp>
maintainer:	Yoshikuni Jujo <PAF01143@nifty.ne.jp>
homepage:	https://github.com/YoshikuniJujo/tighttp/wiki

license:	BSD3
license-file:	LICENSE

category:	Network
Synopsis:	Tiny and Incrementally-Growing HTTP library
description:
    Example programs
    .
    examples/get.hs
    .
    This is simple client.
    This send GET request and show page source.
    Run as following.
    .
    > runhaskell get.hs hackage.haskell.org /packages/
    .
    extensions
    .
    * PackageImports
    .
    > import "monads-tf" Control.Monad.Trans
    > import Data.Pipe
    > import System.Environment
    > import Network
    > import Network.TigHTTP.Client
    > import Network.TigHTTP.Types
    > 
    > import qualified Data.ByteString as BS
    >
    > main :: IO ()
    > main = do
    > 	addr : pth : _ <- getArgs
    > 	h <- connectTo addr $ PortNumber 80
    > 	r <- request h $ get addr 80 pth
    > 	_ <- runPipe $ responseBody r =$= finally printP (putStrLn "")
    > 	return ()
    >
    > printP :: MonadIO m => Pipe BS.ByteString () m ()
    > printP = await >>= maybe (return ()) (\s -> liftIO (BS.putStr s) >> printP)
    .
    examples/server.hs
    .
    This is simple server.
    This recieve client's request.
    And send command line arguments as response.
    Run as following.
    .
    > runhaskell server.hs Hello World I Am TigHTTP
    .
    > import Control.Monad
    > import Control.Concurrent
    > import Data.Pipe
    > import System.IO
    > import System.Environment
    > import Network
    > import Network.TigHTTP.Server
    > import Network.TigHTTP.Types
    >
    > import qualified Data.ByteString.Char8 as BSC
    > import qualified Data.ByteString.Lazy as LBS
    >
    > main :: IO ()
    > main = do
    > 	as <- getArgs
    > 	soc <- listenOn $ PortNumber 80
    > 	forever $ do
    > 		(h, _, _) <- accept soc
    > 		void . forkIO $ do
    > 			req <- getRequest h
    > 			print $ requestPath req
    > 			putResponse h
    >				. (response :: LBS.ByteString -> Response Pipe Handle)
    >				. LBS.fromChunks $ map BSC.pack as
    .
    If you want more examples. Please see examples directory.

extra-source-files:
    examples/get.hs
    examples/server.hs
    examples/post.hs
    examples/serverp.hs
    examples/gets.hs
    examples/servers.hs
    examples/posts.hs
    examples/serverps.hs

source-repository	head
    type:	git
    location:	git://github.com/YoshikuniJujo/tighttp.git

source-repository	this
    type:	git
    location:	git://github.com/YoshikuniJujo/tighttp.git
    tag:	tighttp-0.0.0.6

library
    hs-source-dirs:	src
    exposed-modules:
        Network.TigHTTP.Client, Network.TigHTTP.Server,
        Network.TigHTTP.Types
    other-modules:
        Network.TigHTTP.HttpTypes, Network.TigHTTP.Papillon,
        Network.TigHTTP.Token
    build-depends:
        base == 4.*, bytestring == 0.10.*, handle-like == 0.1.*,
        old-locale == 1.0.*, time == 1.4.*, monads-tf == 0.1.*,
        papillon == 0.1.*, simple-pipe == 0.0.0.*
    ghc-options:	-Wall
    extensions:		PatternGuards
