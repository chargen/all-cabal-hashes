-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:48354182d109a2f8814f517a0d480d55
    SHA1:1199931148b8b1c10b183b4c30cfdd96697b4b4c
    SHA256:09fe9f1671f0fad52b0bb4866f88634a008aa47c3070ee52fceb7040db3f0300
    SHA512:6513459aed6b7ae9adea4144605601f4b5440187f10bfbd220164fe56ebae07e73f2fb61ea20f7266c8bc576acac8203c0b88174f388015fd2043d06eb700dd5
    Skein512_512:e269da8702a9533bd670b07cf9b9463342ff2d0f30595de0dd98e311100dcaef072aaaa216d24fde9544e58a9922547cf0f9b404f6cfa9db9c6780ca7d1e097b

package-locations:
    https://hackage.haskell.org/package/tighttp-0.0.0.4/tighttp-0.0.0.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/tighttp-0.0.0.4.tar.gz

package-size: 11066
-- END Added by all-cabal-hashes-tool

build-type:	Simple
cabal-version:	>= 1.8

name:		tighttp
version:	0.0.0.4
stability:	Experimental
author:		Yoshikuni Jujo <PAF01143@nifty.ne.jp>
maintainer:	Yoshikuni Jujo <PAF01143@nifty.ne.jp>
homepage:	https://github.com/YoshikuniJujo/tighttp/wiki

license:	BSD3
license-file:	LICENSE

category:	Network
Synopsis:	Tiny and Incrementally-Growing HTTP library
description:
    Example programs
    .
    examples/get.hs
    .
    This is simple client.
    This send GET request and show page source.
    Run as following.
    .
    > runhaskell get.hs hackage.haskell.org /packages/
    .
    extensions
    .
    * PackageImports
    .
    > import "monads-tf" Control.Monad.Trans
    > import Data.Pipe
    > import System.Environment
    > import Network
    > import Network.TigHTTP.Client
    > import Network.TigHTTP.Types
    > 
    > import qualified Data.ByteString as BS
    >
    > main :: IO ()
    > main = do
    > 	addr : pth : _ <- getArgs
    > 	h <- connectTo addr $ PortNumber 80
    > 	r <- request h $ get addr 80 pth
    > 	_ <- runPipe $ responseBody r =$= finally printP (putStrLn "")
    > 	return ()
    >
    > printP :: MonadIO m => Pipe BS.ByteString () m ()
    > printP = await >>= maybe (return ()) (\s -> liftIO (BS.putStr s) >> printP)
    .
    examples/server.hs
    .
    This is simple server.
    This recieve client's request.
    And send command line arguments as response.
    Run as following.
    .
    > runhaskell server.hs Hello World I Am TigHTTP
    .
    > import Control.Monad
    > import Control.Concurrent
    > import Data.Pipe
    > import System.IO
    > import System.Environment
    > import Network
    > import Network.TigHTTP.Server
    > import Network.TigHTTP.Types
    >
    > import qualified Data.ByteString.Char8 as BSC
    > import qualified Data.ByteString.Lazy as LBS
    >
    > main :: IO ()
    > main = do
    > 	as <- getArgs
    > 	soc <- listenOn $ PortNumber 80
    > 	forever $ do
    > 		(h, _, _) <- accept soc
    > 		void . forkIO $ do
    > 			req <- getRequest h
    > 			print $ requestPath req
    > 			putResponse h
    >				. (response :: LBS.ByteString -> Response Pipe Handle)
    >				. LBS.fromChunks $ map BSC.pack as
    .
    If you want more examples. Please see examples directory.

extra-source-files:
    examples/get.hs
    examples/server.hs
    examples/post.hs
    examples/serverp.hs
    examples/gets.hs
    examples/servers.hs
    examples/posts.hs
    examples/serverps.hs

source-repository	head
    type:	git
    location:	git://github.com/YoshikuniJujo/tighttp.git

source-repository	this
    type:	git
    location:	git://github.com/YoshikuniJujo/tighttp.git
    tag:	tighttp-0.0.0.2

library
    hs-source-dirs:	src
    exposed-modules:
        Network.TigHTTP.Client, Network.TigHTTP.Server,
        Network.TigHTTP.Types
    other-modules:
        Network.TigHTTP.HttpTypes, Network.TigHTTP.Papillon,
        Network.TigHTTP.Token
    build-depends:
        base == 4.*, bytestring == 0.10.*, handle-like == 0.1.*,
        old-locale == 1.0.*, time == 1.4.*, monads-tf == 0.1.*,
        papillon == 0.1.*, simple-pipe == 0.0.0.*
    ghc-options:	-Wall
    extensions:		PatternGuards
