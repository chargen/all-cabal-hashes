-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:b5b2c1681d448f986234c4708d821510
    SHA1:5698d5a46863c660133e7ec0b5089648f74bf8ac
    SHA256:4cfc2e1d45bdf505e1c08ed6da32e3af1083f53b145ed83703e8634b956b0ec6
    SHA512:2b33168953a7b74efc48e6a15517f01a7e1cf359d72710cb47e02b1e553115d1c37e9d0b6fed39e7374a0f8c46c63502db664ca6f85d80500759fb394cf47318
    Skein512_512:e427b1c6c25e29b322f0bdfe3fd402d395494f2abedb3c494fbea6c6f213261c3d5ec1ce4a0d1a1e84e09818ab3827958fcb12f9fbf379eeea7c29625ceff6cb

x-package-locations:
    https://hackage.haskell.org/package/event-list-0.0.7/event-list-0.0.7.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/event-list-0.0.7.tar.gz

x-package-size: 48170
-- END Added by all-cabal-hashes-tool

Name:             event-list
Version:          0.0.7
License:          GPL
License-File:     LICENSE
Author:           Henning Thielemann <haskell@henning-thielemann.de>
Maintainer:       Henning Thielemann <haskell@henning-thielemann.de>
Homepage:         http://darcs.haskell.org/event-list/
Category:         Data
Synopsis:         Event lists with relative or absolute time stamps
Description:
   These lists manage events that are associated with times.
   Times may be given as difference between successive events
   or as absolute time values.
   Pauses before the first and after the last event are supported.
   The underlying data structures are lists of elements of alternating types,
   that is [b,a,b,...,a,b] or [a,b,a,...,a,b].
   The data structures can be used to represent
   MIDI files, OpenSoundControl message streams, music performances etc.
Tested-With:       GHC==6.4.1, GHC==6.6.1, GHC==6.8.2
Cabal-Version:     >=1.2
Build-Type:        Simple

Flag splitBase
  description: Choose the new smaller, split-up base package.

Flag buildTests
  description: Build test executables
  default:     False

Library
  Build-Depends: non-negative>=0.0 && <0.1
  Build-Depends: mtl >=1 && <2, QuickCheck >=1 && <2
  If flag(splitBase)
    Build-Depends: base >= 2, random
    -- random is needed for the Test
  Else
    Build-Depends: base >= 1.0 && < 2
    -- From the Monad Template Library we only need the State monad.
    -- If your compiler does not support functional dependencies,
    -- it would be easy to replace that by mapAccumL.

  GHC-Options:      -Wall
  Hs-Source-Dirs:   src
  Exposed-Modules:
    Data.EventList.Absolute.TimeBody
    Data.EventList.Absolute.TimeTime
    Data.EventList.Absolute.TimeMixed
    Data.EventList.Relative.TimeBody
    Data.EventList.Relative.TimeTime
    Data.EventList.Relative.TimeMixed
    Data.EventList.Relative.BodyBody
    Data.EventList.Relative.BodyTime
    Data.EventList.Relative.MixedTime
    Data.EventList.Relative.MixedBody
  Other-Modules:
    Data.EventList.Utility
    Data.EventList.Absolute.TimeBodyPrivate
    Data.EventList.Absolute.TimeTimePrivate
    Data.EventList.Relative.TimeBodyPrivate
    Data.EventList.Relative.BodyBodyPrivate
    Data.EventList.Relative.TimeTimePrivate
    Data.EventList.Relative.BodyTimePrivate
    Data.AlternatingList.Custom
    Data.AlternatingList.List.Disparate
    Data.AlternatingList.List.Uniform
    Data.AlternatingList.List.Mixed

Executable       test
  If !flag(buildTests)
    Buildable:         False

  If flag(splitBase)
    Hs-source-dirs:   src, src-2
  Else
    Hs-source-dirs:   src, src-1

  GHC-Options:      -Wall
  Main-Is:          Test/Main.hs
  Other-Modules:
    Test.Instances
    Test.Utility
    Test.Data.EventList.Absolute.BodyEnd
    Test.Data.EventList.Absolute.TimeEnd
    Test.Data.EventList.Relative.BodyEnd
    Test.Data.EventList.Relative.TimeEnd
