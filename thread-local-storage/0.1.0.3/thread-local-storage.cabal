-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:37ea027a583b14ab7bacd206f8d1e875
    SHA1:8562b07841486e4a8fff44c41f9dbe06018ec907
    SHA256:74ccc31b79a3a0b087b654185ddafc42ac4609846213c670495f70fd7bee464d
    SHA512:4d1ba5213f2914a72064de0fcb6b4ae82cba2d8937db4000def8f0a2cabe682986278efa00693ea3c48e800d3e4edd21bc43e294e7dbc41f21453206d878a7f7
    Skein512_512:f4b5c6450c2abfee894d89922f5f227ef9b7e80087de0234ea0523bacbcbb82bba31e050185ea45f05a2e79f311eaf836a6884cce6edbcec1b5d4be323c7d77a

package-locations:
    https://hackage.haskell.org/package/thread-local-storage-0.1.0.3/thread-local-storage-0.1.0.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/thread-local-storage-0.1.0.3.tar.gz

package-size: 6840
-- END Added by all-cabal-hashes-tool

-- Initial thread-local-storage.cabal generated by cabal init.  For further
--  documentation, see http://haskell.org/cabal/users-guide/

name:                thread-local-storage
version:             0.1.0.3
synopsis:            Several options for thread-local-storage (TLS) in Haskell.
description:
   .
   Thread-local storage, or TLS, is an important ingredient in many
   algorithms and data structures.
   . 
   The GHC compiler does not provide a built-in notion of TLS either
   at the IO-thread or OS thread level.  This package provides a few
   different implementations of a simple TLS API.
   . 
   All exported modules provide exactly the same interface with
   different implementations.  Run the included criterion benchmark
   suite to ascertain which performs the best on your platform.
   . 
   Example criterion benchmark data can be found here (from an Intel Ivy-Bridge i7-3770 desktop):
      <http://www.cs.indiana.edu/~rrnewton/datasets/xmen_tls_report.html>
           
         
license:             BSD3
license-file:        LICENSE
author:              Ryan Newton
maintainer:          rrnewton@gmail.com
-- copyright:           
category:            System
build-type:          Simple
-- extra-source-files:  
cabal-version:       >=1.10

extra-source-files:  Data/TLS/TLS_Sig.hs

library
  exposed-modules:     Data.TLS.GHC, Data.TLS.PThread
--  Data.TLS.GCC,  
  other-modules:       Data.TLS.PThread.Internal
  other-extensions:    BangPatterns, NamedFieldPuns, CPP
  build-depends:       base >=4.6 && < 5.0,
                       containers >=0.5
  -- hs-source-dirs:      
  default-language:    Haskell2010
  ghc-options: -O2
  c-sources: cbits/helpers.c  
     
benchmark bench-haskell-tls
  main-is: Main.hs
  hs-source-dirs: ./bench/
  type: exitcode-stdio-1.0
  build-depends: thread-local-storage
  build-depends: base >= 4.6 && < 5.0,
                 criterion >= 1.0,
                 atomic-primops >= 0.6.0.6
  default-language:    Haskell2010
  ghc-options: -rtsopts -O2 -threaded -with-rtsopts=-T 
 

test-suite test-tls
  main-is: Main.hs
  -- Here we reinclude/rebuild the main sources so we can test the .Internal module:
  hs-source-dirs: ./ ./tests/
  type: exitcode-stdio-1.0
  build-depends: base >= 4.6 && < 5.0,
                 atomic-primops >= 0.6.0.6
  default-language:    Haskell2010
  ghc-options: -rtsopts -O2 -threaded -with-rtsopts=-N4

  -- DUPLICATED, from above:
  build-depends: containers >=0.5
  c-sources: cbits/helpers.c       
