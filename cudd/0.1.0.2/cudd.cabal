-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:636a2c6c2a5eb47444dbe651f55a5dc0
    SHA1:d4ad097043b46710492c5e5cb759ad1f179b5681
    SHA256:59008e024553375eeeabfd9dd7c2e8a186b0edd75edb52640e38cc9d31911a7e
    SHA512:e3a4c2e0470af9fe6c22ee5fcc2c6a0af9360083ec02b49546438030e96c027968ddd0192305e46e8e22ac8fd45b10f6b5cf613eb85df1b7dd20dd782be81298
    Skein512_512:a5c100e2c14ed79003d0b8df1815b2880146ee91a2797d059741db37374eb8bb3f757e1f80b1174183b07bda330d3beb22fc7cc57654d8873aaab8592a204dec

x-package-locations:
    https://hackage.haskell.org/package/cudd-0.1.0.2/cudd-0.1.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/cudd-0.1.0.2.tar.gz

x-package-size: 15859
-- END Added by all-cabal-hashes-tool

-- Initial cudd.cabal generated by cabal init.  For further 
-- documentation, see http://haskell.org/cabal/users-guide/
name:                cudd
version:             0.1.0.2
synopsis:            Bindings to the CUDD binary decision diagrams library
description:         
    Bindings to version 2.5.0 of the CUDD binary decision diagrams library. 
    .
    <http://vlsi.colorado.edu/~fabio/CUDD/>
    .
    /Installation/
    .
    Either install CUDD using your system's package manager or download and build CUDD from here: <https://github.com/adamwalker/cudd>. This is a mirror of the CUDD source that has been modified to build shared object files.
    .
    If you chose the latter option you need to tell cabal where to find cudd:
    .
    "cabal install cudd --extra-include-dirs=\/path\/to\/cudd\/src\/include --extra-lib-dirs=\/path\/to\/cudd\/src\/libso"
    .
    and you need to tell your program where to find the shared libraries:
    .
    "LD_LIBRARY_PATH=\/path\/to\/cudd\/src\/libso ghci"
    .
    /Usage/
    .
    This package provides two interfaces to the CUDD library:
    .
    * A purely functional one in "Cudd.Cudd" that automatically dereferences BDDs during garbage collection.
    .
    * An ST Monad based one in "Cudd.Imperative" that gives you precise control over the ordering of BDD operations and when BDDs are dereferenced. Use this one if you want your code to perform well.

license:             BSD3
license-file:        LICENSE
author:              Adam Walker
maintainer:          adamwalker10@gmail.com
copyright:           2014 Adam Walker
category:            Data
homepage:            https://github.com/adamwalker/haskell_cudd
bug-reports:         https://github.com/adamwalker/haskell_cudd/issues
build-type:          Simple
-- extra-source-files:  
cabal-version:       >=1.10


library
    exposed-modules:     
        Cudd.File, 
        Cudd.Convert, 
        Cudd.Reorder, 
        Cudd.MTR, 
        Cudd.Hook, 
        Cudd.Common, 
        Cudd.C, 
        Cudd.Cudd, 
        Cudd.GC, 
        Cudd.Imperative
    other-modules:       Cudd.ForeignHelpers
    other-extensions:    ForeignFunctionInterface, CPP, FlexibleContexts, RankNTypes, EmptyDataDecls
    build-depends:       
        base         >=4.7 && <4.9, 
        mtl          >=2.1 && <2.3, 
        array        >=0.4 && <0.6, 
        transformers >=0.3 && <0.5
    -- hs-source-dirs:      
    build-tools:         c2hs, hsc2hs
    default-language:    Haskell2010
    include-dirs:        .
    c-sources:           
        c_sources/cuddwrap.c, 
        c_sources/stubs.c
    extra-libraries:     cudd, mtr, st, util, epd, dddmp, m
