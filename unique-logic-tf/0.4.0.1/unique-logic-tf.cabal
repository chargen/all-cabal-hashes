-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:8f32a6f91eb39426dd161ffc7dc1e41a
    SHA1:3831cb2f78cea6c30694d0227294ae44e280bf3d
    SHA256:fd2027ffd784ffa83bb9928b7b697a737fa6cde47bd43fcb93a33e891dd9112a
    SHA512:3132999640e90df967451b307e6461225464a8d6afc6b3a05f77094f50550e38dd28c26686482c3c1541f5f29bd207d9682f709c1e1e4faebeca94ec5c05d8e4
    Skein512_512:42cb44610ac048bfd6d2fd0464b49072d29a172116886b0f129bd8a992f07e65c95c2626069615a216ba802e98105b7774b122487e6f7748eb8c5cfd6bb00b6b

package-locations:
    https://hackage.haskell.org/package/unique-logic-tf-0.4.0.1/unique-logic-tf-0.4.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/unique-logic-tf-0.4.0.1.tar.gz

package-size: 10021
-- END Added by all-cabal-hashes-tool

Name:             unique-logic-tf
Version:          0.4.0.1
License:          BSD3
License-File:     LICENSE
Author:           Henning Thielemann
Maintainer:       Henning Thielemann <haskell@henning-thielemann.de>
Homepage:         http://code.haskell.org/~thielema/unique-logic-tf/
Category:         Logic programming
Synopsis:         Solve simple simultaneous equations
Description:
  Solve a number of equations simultaneously.
  This is not Computer Algebra,
  better think of a kind of type inference algorithm
  or logic programming with only one allowed solution.
  .
  Only one solution is computed.
  Simultaneous equations with multiple solutions are not allowed.
  However, variables may remain undefined.
  The solver may optionally check for consistency.
  It does not do so by default
  since with floating point numbers or symbolic expressions
  even simple rules may not be consistent.
  .
  The modules ordered with respect to abstraction level are:
  .
  * "UniqueLogic.ST.TF.System":
    Construct and solve sets of functional dependencies.
    Example: @assignment3 (+) a b c@ meaning dependency @a+b -> c@.
  .
  * "UniqueLogic.ST.TF.Rule":
    Combine functional dependencies to rules
    that can apply in multiple directions.
    Example: @add a b c@ means relation @a+b = c@
    which resolves to dependencies @a+b -> c, c-a -> b, c-b -> a@.
    For an executable example see "UniqueLogic.ST.TF.Example.Rule".
  .
  * "UniqueLogic.ST.TF.Expression":
    Allows to write rules using arithmetic operators.
    It creates temporary variables automatically.
    Example: @(a+b)*c =:= d@ resolves to @a+b = x, x*c = d@.
    For an executable example see "UniqueLogic.ST.TF.Example.Expression".
  .
  * "UniqueLogic.ST.TF.System.Simple":
    Provides specialised functions from "UniqueLogic.ST.TF.System"
    for the case of a system without labels and consistency checks.
  .
  * "UniqueLogic.ST.TF.System.Label":
    Provides a custom constructor for variables.
    When creating a variable you decide whether and how
    an assignment to this variable shall be logged.
    There is an example that shows how to solve a logic system
    using symbolic expressions.
    The naming and logging allows us to observe shared intermediate results.
    For an executable example see "UniqueLogic.ST.TF.Example.Label".
  .
  * By using more sophisticated monad transformers,
    we can check the equations for consistency,
    report inconsistencies and how they arised.
    We demonstrate that in "UniqueLogic.ST.TF.Example.Verify".
  .
  This variant of the package requires type families.
Tested-With:       GHC==7.4.2
Cabal-Version:     >=1.8
Build-Type:        Simple

Source-Repository this
  Tag:         0.4.0.1
  Type:        darcs
  Location:    http://code.haskell.org/~thielema/unique-logic-tf/

Source-Repository head
  Type:        darcs
  Location:    http://code.haskell.org/~thielema/unique-logic-tf/

Library
  Build-Depends:
    explicit-exception >=0.1.7 && <0.2,
    transformers >=0.2 && <0.4,
    containers >=0.4 && <0.6,
    utility-ht >=0.0.9 && <0.1,
    base >= 4 && <5
  GHC-Options:      -Wall
  Hs-Source-Dirs:   src

  Exposed-Modules:
    UniqueLogic.ST.TF.MonadTrans
    UniqueLogic.ST.TF.System
    UniqueLogic.ST.TF.System.Simple
    UniqueLogic.ST.TF.System.Label
    UniqueLogic.ST.TF.Rule
    UniqueLogic.ST.TF.Expression
    -- example modules
    UniqueLogic.ST.TF.Example.Rule
    UniqueLogic.ST.TF.Example.Label
    UniqueLogic.ST.TF.Example.Expression
    UniqueLogic.ST.TF.Example.Verify
    UniqueLogic.ST.TF.Example.Term

Test-Suite test-unique-logic
  Type:    exitcode-stdio-1.0
  Main-Is: src/UniqueLogic/ST/TF/Test.hs
  GHC-Options: -Wall
  Build-Depends:
    unique-logic-tf,
    QuickCheck >=2.4 && <2.6,
    non-empty >=0.0 && <0.1,
    transformers,
    utility-ht,
    base
