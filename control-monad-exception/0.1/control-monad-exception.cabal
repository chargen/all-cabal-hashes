-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:ebbfc6ff9fc3f3330b47d0aeb9c3ee14
    SHA1:efc64628205e9bddd9b4d9443c6f2aa4d884c3da
    SHA256:ab70cc7bca51467665afe9c2a33e90325ebf091d035bcadf07c9370bafd2d0c9
    SHA512:9f42a5ee785000bbedbd62d0b7d8c9c5b6bfa22062bbfcf8f38e47c267ce32d70f49cb96950fcdf7b92d33cbf5c43cb72301c1826547e905f8cad07b7ba5e174
    Skein512_512:4fc196486a667a75c73050cb8845a2b8123a42cf3d69454d354a5bdddb333aa633adea781f91aff61bfd47234aff661005ca6a020ab4b08b06cd1e38a41bfbe3

package-locations:
    https://hackage.haskell.org/package/control-monad-exception-0.1/control-monad-exception-0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/control-monad-exception-0.1.tar.gz

package-size: 2594
-- END Added by all-cabal-hashes-tool

name: control-monad-exception
version: 0.1
Cabal-Version:  >= 1.2.3
build-type: Simple
license: PublicDomain
author: Pepe Iborra
maintainer: pepeiborra@gmail.com
homepage: http://github.com/pepeiborra/control-monad-exception
description: 
  This package provides explicitly typed exceptions as a library.
  .
  /Example/
  .
  > data Expr = Add Expr Expr | Div Expr Expr | Val Double
  > eval (Val x)     = return x
  > eval (Add a1 a2) = do
  >    v1 <- eval a1
  >    v2 <- eval a2
  >    let sum = v1 + v2
  >    if sum < v1 || sum < v2 then throw SumOverflow else return sum
  > eval (Div a1 a2) = do
  >    v1 <- eval a1
  >    v2 <- eval a2
  >    if v2 == 0 then throw DivideByZero else return (v1 / v2)
  .
  > data DivideByZero = DivideByZero deriving (Show, Typeable)
  > data SumOverflow  = SumOverflow  deriving (Show, Typeable)
  .
  > instance Exception DivideByZero
  > instance Exception SumOverflow
  .
  GHCi infers the following types
  .
  > eval :: (Throws DivideByZero l, Throws SumOverflow l) => Expr -> EM l Double
  > eval `catch` \ (e::DivideByZero) -> return (-1)  :: Throws SumOverflow l => Expr -> EM l Double
synopsis: Explicitly typed exceptions
category: Control, Monads
stability: experimental


Library
  buildable: True
  build-depends: base >= 4.0, transformers, monads-fd
  extensions:  MultiParamTypeClasses, 
               FunctionalDependencies,
               OverlappingInstances, 
               FlexibleInstances,
               EmptyDataDecls,
               DeriveDataTypeable,
               UndecidableInstances
  exposed-modules:
     Control.Monad.Exception.Class
     Control.Monad.Exception
