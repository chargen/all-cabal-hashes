-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:67678e14d9c8dcae74eaee0565fc82bd
    SHA1:e67fc7b851424ceb8b790b514d4efd83e4749751
    SHA256:eb08368abf01b92c4697488489ece79d820c6fbdc14eac2ef8b2609f162d6fa3
    SHA512:bf83250f012d6ab44acba8155c301823e2d29e0d9f94467323f2903fdbc6fdd670ca677afa62f8e3d3700455042af1d94f8fd9429df815e5d2d1f51884541cb8
    Skein512_512:1ab4f16acc99891e42058b211ae776f4e6be106073d64d8839cc86284b7d538ee391b9a23ee0db4777017a2145e63a02ae73c1c457c7a8a200fdf8bb17c658bb

x-package-locations:
    https://hackage.haskell.org/package/control-monad-exception-0.9.1/control-monad-exception-0.9.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/control-monad-exception-0.9.1.tar.gz

x-package-size: 6509
-- END Added by all-cabal-hashes-tool

name: control-monad-exception
version: 0.9.1
Cabal-Version:  >= 1.6
build-type: Simple
license: PublicDomain
author: Pepe Iborra
maintainer: pepeiborra@gmail.com
homepage: http://pepeiborra.github.com/control-monad-exception
description: 
  This package provides explicitly typed, checked exceptions as a library.
  .
  Computations throwing different types of exception can be combined seamlessly.
  .
  /Example/
  .
  > data Expr = Add Expr Expr | Div Expr Expr | Val Double
  > eval (Val x)     = return x
  > eval (Add a1 a2) = do
  >    v1 <- eval a1
  >    v2 <- eval a2
  >    let sum = v1 + v2
  >    if sum < v1 || sum < v2 then throw SumOverflow else return sum
  > eval (Div a1 a2) = do
  >    v1 <- eval a1
  >    v2 <- eval a2
  >    if v2 == 0 then throw DivideByZero else return (v1 / v2)
  .
  > data DivideByZero = DivideByZero deriving (Show, Typeable)
  > data SumOverflow  = SumOverflow  deriving (Show, Typeable)
  .
  > instance Exception DivideByZero
  > instance Exception SumOverflow
  .
  GHCi infers the following types
  .
  > eval :: (Throws DivideByZero l, Throws SumOverflow l) => Expr -> EM l Double
  > eval `catch` \ (e::DivideByZero) -> return (-1)  :: Throws SumOverflow l => Expr -> EM l Double
  > runEM(eval `catch` \ (e::SomeException) -> return (-1))  :: Expr -> Double
  .
  .
  In addition to explicitly typed exceptions his package provides:
  .
    * Support for explicitly documented, unchecked exceptions (via 'Control.Monad.Exception.tryEMT').
  .
    * Support for selective unchecked exceptions (via 'Control.Monad.Exception.UncaughtException').
  .
    * Support for exception call traces via 'Control.Monad.Loc.MonadLoc'. /Example:/
  .
  >
  > f () = do throw MyException
  > g a  = do f a
  >
  > main = runEMT $ do g () `catchWithSrcLoc`
  >                        \loc (e::MyException) -> lift(putStrLn$ showExceptionWithTrace loc e)
  >
  > -- Running main produces the output:
  >
  > *Main> main
  >  MyException
  >    in f, Main(example.hs): (1,6)
  >       g, Main(example.hs): (2,6)
  >       main, Main(example.hs): (5,9)
  >       main, Main(example.hs): (4,16)
  .
  /Changes since 0.9.0/:
  .
    * Moved to transformers (finally leaving the whole mtl-transformers cisma behind)

synopsis: Explicitly typed, checked exceptions with stack traces
category: Control, Monads, Failure
stability: experimental
tested-with: GHC == 6.12.1
bug-reports: http://github.com/pepeiborra/control-monad-exception/issues

Flag extensibleExceptions
  description: Use extensible-exception package
  default: False

Library
  buildable: True 
  build-depends: failure >= 0.1 && < 0.2
               , safe-failure >= 0.5
               , transformers
               , monadloc

  if flag(extensibleExceptions)
    build-depends:
      extensible-exceptions >= 0.1 && <0.2,
      base >= 3.0 && <4
  else
    build-depends:
      base >= 4 && < 5

  extensions:  MultiParamTypeClasses,
               ScopedTypeVariables,
               FlexibleContexts,
               FlexibleInstances,
               TypeSynonymInstances,
               EmptyDataDecls,
               DeriveDataTypeable,
               PatternGuards

  exposed-modules:
     Control.Monad.Exception
     Control.Monad.Exception.Base
     Control.Monad.Exception.Catch
     Control.Monad.Exception.Throws
     Control.Monad.Exception.Instances

  ghc-options: -Wall -fno-warn-name-shadowing -fno-warn-orphans



source-repository head
  type:     git
  location: git://github.com/pepeiborra/control-monad-exception.git
