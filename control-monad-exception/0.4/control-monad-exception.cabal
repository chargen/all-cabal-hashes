name: control-monad-exception
version: 0.4
Cabal-Version:  >= 1.2.3
build-type: Simple
license: PublicDomain
author: Pepe Iborra
maintainer: pepeiborra@gmail.com
homepage: http://safe-tools.dsic.upv.es/mediawiki/index.php/Jose_Iborra/Papers/Exceptions
description: 
  This package provides explicitly typed, checked exceptions as a library.

  /Example/
  .
  > data Expr = Add Expr Expr | Div Expr Expr | Val Double
  > eval (Val x)     = return x
  > eval (Add a1 a2) = do
  >    v1 <- eval a1
  >    v2 <- eval a2
  >    let sum = v1 + v2
  >    if sum < v1 || sum < v2 then throw SumOverflow else return sum
  > eval (Div a1 a2) = do
  >    v1 <- eval a1
  >    v2 <- eval a2
  >    if v2 == 0 then throw DivideByZero else return (v1 / v2)
  .
  > data DivideByZero = DivideByZero deriving (Show, Typeable)
  > data SumOverflow  = SumOverflow  deriving (Show, Typeable)
  .
  > instance Exception DivideByZero
  > instance Exception SumOverflow
  .
  GHCi infers the following types
  .
  > eval :: (Throws DivideByZero l, Throws SumOverflow l) => Expr -> EM l Double
  > eval `catch` \ (e::DivideByZero) -> return (-1)  :: Throws SumOverflow l => Expr -> EM l Double
  > runEM(eval `catch` \ (e::SomeException) -> return (-1))  :: Expr -> Double

 New in version 0.4:
    * (optionally) Unchecked exceptions (with 'UncaughtException')
    * Exception stack traces (with 'WithSrcLoc')

synopsis: Explicitly typed, checked exceptions with stack traces
category: Control, Monads
stability: experimental
tested-with: GHC ==6.8.2
tested-with: GHC ==6.10.2
tested-with: GHC ==6.10.3

Flag transformers
  description: Use transformers and monads-fd instead of mtl
  default: True 

Flag extensibleExceptions
  description: Use extensible-exception package
  default: False

Library
  buildable: True
  if flag(extensibleExceptions)
    build-depends:
      extensible-exceptions >= 0.1 && <0.2,
      base >= 3.0 && <4
  else
    build-depends:
      base >= 4 && < 5

  if flag(transformers)
    cpp-options: -DTRANSFORMERS
    build-depends:
      transformers >= 0.0.1 && <0.2,
      monads-fd >= 0.0 && <0.1
  else
    build-depends: mtl

  extensions:  MultiParamTypeClasses, 
               FunctionalDependencies,
               FlexibleInstances,
               EmptyDataDecls,
               DeriveDataTypeable,
               UndecidableInstances
  build-depends: pretty, template-haskell
  exposed-modules:
     Control.Monad.Exception.Class
     Control.Monad.Exception
  ghc-options: -Wall -fno-warn-name-shadowing


package-hashes:
    MD5:04a9efe14862e647e7d0b6531b6fc183
    SHA1:1b3dd77e44260f29f06ba8e012ff669d35dd8105
    SHA256:056473d44d11eaf389b86c0067b1f02eabdfe92c7385afa077eed6700f748d8f
    SHA512:4df95c0c45b520a6b639b86c78d9bd2f603e9aff0291591748cd87106feb211dd0cff74eafbd1ae20d0f6d091e9f4f985bb8f9881d5f8ca6aca183064dc1767c
    Skein512_512:007fffee3616d8fd84ac362519aa721e92609d72e16883958130e7cf4c239c0857a51d231fb854532f482afcb41a94d8c4c855ed69cbaac4558fe99ebbc0a596

package-locations:
    https://hackage.haskell.org/package/control-monad-exception-0.4/control-monad-exception-0.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/control-monad-exception-0.4.tar.gz

package-size: 4550
