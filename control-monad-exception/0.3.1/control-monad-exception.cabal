-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:a88994dd6d60c17d9a198873512c2fbd
    SHA1:56232e62758eaeda07f3b14df10406de0a5aa663
    SHA256:316f764f9645246c593d79abadbc667dcfcefefe0793ff0d54e42cc50e25b369
    SHA512:80a7f394d5e53b61308aa04a0ad00627ac44281d7c3ec053ad1f3d357f35cdfe0fc4991d202e832c4705198d15110c00c9649f2b9ec19cef28cac7c5db297b1e
    Skein512_512:c3f1541a102f9c001417d5f7daed0304adc42b7f767f635cf55a5b2aba154238dd924d49035bacfc1eeef263be9b7e1ac7f55217ecb43a43a739b9dd6f71f52d

x-package-locations:
    https://hackage.haskell.org/package/control-monad-exception-0.3.1/control-monad-exception-0.3.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/control-monad-exception-0.3.1.tar.gz

x-package-size: 3677
-- END Added by all-cabal-hashes-tool

name: control-monad-exception
version: 0.3.1
Cabal-Version:  >= 1.2.3
build-type: Simple
license: PublicDomain
author: Pepe Iborra
maintainer: pepeiborra@gmail.com
homepage: http://github.com/pepeiborra/control-monad-exception
description: 
  This package provides explicitly typed, checked exceptions as a library.

  /Example/
  .
  > data Expr = Add Expr Expr | Div Expr Expr | Val Double
  > eval (Val x)     = return x
  > eval (Add a1 a2) = do
  >    v1 <- eval a1
  >    v2 <- eval a2
  >    let sum = v1 + v2
  >    if sum < v1 || sum < v2 then throw SumOverflow else return sum
  > eval (Div a1 a2) = do
  >    v1 <- eval a1
  >    v2 <- eval a2
  >    if v2 == 0 then throw DivideByZero else return (v1 / v2)
  .
  > data DivideByZero = DivideByZero deriving (Show, Typeable)
  > data SumOverflow  = SumOverflow  deriving (Show, Typeable)
  .
  > instance Exception DivideByZero
  > instance Exception SumOverflow
  .
  GHCi infers the following types
  .
  > eval :: (Throws DivideByZero l, Throws SumOverflow l) => Expr -> EM l Double
  > eval `catch` \ (e::DivideByZero) -> return (-1)  :: Throws SumOverflow l => Expr -> EM l Double
  > runEM(eval `catch` \ (e::SomeException) -> return (-1))  :: Expr -> Double

synopsis: Explicitly typed exceptions
category: Control, Monads
stability: experimental
tested-with: GHC ==6.8.2
tested-with: GHC ==6.10.2
tested-with: GHC ==6.10.3

Flag extensibleExceptions
  description: Use extensible-exception package
  default: False

Library
  buildable: True
  if flag(extensibleExceptions)
    build-depends:
      extensible-exceptions >= 0.1 && <0.2,
      base >= 3.0 && <4
  else
    build-depends:
      base >= 4 && < 5

  build-depends:
    transformers >= 0.0.1 && <0.2,
    monads-fd >= 0.0 && <0.1
  extensions:  MultiParamTypeClasses, 
               FunctionalDependencies,
               FlexibleInstances,
               EmptyDataDecls,
               DeriveDataTypeable,
               UndecidableInstances
  exposed-modules:
     Control.Monad.Exception.Class
     Control.Monad.Exception
  ghc-options: -Wall -fno-warn-name-shadowing
