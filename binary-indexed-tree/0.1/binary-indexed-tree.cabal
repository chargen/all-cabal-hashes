-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:3dc7eb209a06c4656a48dbf3b412ce52
    SHA1:2065c67b868101238e90388a78f647a72eb3e01d
    SHA256:8dd0f54f68c36f107dfbc35412e873c4bbf057d16629417df38e3996f9ac4bb3
    SHA512:f3faee2c9a5fe5c9fcb5e8b53040b5f95c73981cfbdbf98f7beda46de77b90af0edb7bd08854b7d4d035fe7781b0c95ae999ccf6f90f747fccb7834860ceee03
    Skein512_512:5e282ee3a070eac36ab290f1352edc558194007f31c90372def17785717a5e8250d60a74d1d4f56707f38183ffc326eff447e951dd1820ffd6022f6278255930

x-package-locations:
    https://hackage.haskell.org/package/binary-indexed-tree-0.1/binary-indexed-tree-0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/binary-indexed-tree-0.1.tar.gz

x-package-size: 4689
-- END Added by all-cabal-hashes-tool

Name:                binary-indexed-tree
Version:             0.1
Synopsis:            Binary Indexed Trees (a.k.a. Fenwick Trees).
Description:         Binary indexed trees are a data structure on indexes
                     1 through n.  They allow you to compute the sum
                     of all values at indexes 1 through i in O(logn) and to
                     increase the value at index i in O(logn).
                     .
                     This implements binary indexed trees, both
                     as an immutable data structure in pure code
                     and as a mutable data structure using the ST Monad.
                     .
                     Both the immutable and mutable version have the
                     same runtime complexity, but the mutable version
                     has a smaller constant.
                     .
                     Written by Maxwell Sayles (2012).
License:             LGPL
License-file:        LICENSE
Author:              Maxwell Sayles <maxwellsayles@gmail.com>
Maintainer:          Maxwell Sayles <maxwellsayles@gmail.com>
Category:            Data
Build-type:          Simple
Stability:           Stable
Cabal-version:       >= 1.8

Library
  Exposed-modules:   Data.BinaryIndexedTree,
                     Data.BinaryIndexedTree.ST
  Build-depends:     base >= 3 && < 5,
                     array >= 0.3


