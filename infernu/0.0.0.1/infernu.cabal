-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:2c454629acefb23eaf6ef44cc74ad0ef
    SHA1:3a29604b8fb5ecf0d7ee25774a139169ed47228a
    SHA256:1697a74440cbd7209317393fae5be1993bcae70b8ec79cf070f6fa7e0bfd8a54
    SHA512:011e8d47a40d01ce2fed662cc558e12082d8be1dfa540920c4268203e30b15e0ffd1bfe6b8dddf9a1ecfad09c1e724fd17544c3852e3e1abdeb18b1579ab129f
    Skein512_512:46829ccc6a7fd94084447df0af09d0a4c624b26bf765d82c43a3988a4ef0595e736aba58262a281790a787fde6de16e9995fc0fd2f5903be4af864b2163052fd

x-package-locations:
    https://hackage.haskell.org/package/infernu-0.0.0.1/infernu-0.0.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/infernu-0.0.0.1.tar.gz

x-package-size: 42816
-- END Added by all-cabal-hashes-tool

name:                infernu
version:             0.0.0.1
synopsis:            Type inference and checker for JavaScript (experimental)
description:         This version is highly experimental and may set your computer on fire (also, a lot of JS is not supported yet, so it may not be very useful.)
                     .
                     Infernu is a type checker for JavaScript. Since JavaScript is dynamically and weakly typed, it makes no sense to talk about "type errors" in arbitrary JavaScript code.
                     .
                     Consequently Infernu makes assumptions about the code and expects it to follow certain rules that
                     are not required by plain JavaScript (for example, implicit coercions such as `3 + 'a'` are not
                     allowed.)
                     .
                     Infernu's type system is designed for writing dynamic-looking code in a safe statically type-checked
                     environment. Type annotations are not required (though they would be nice to support, for various
                     reasons). Instead, Infernu *infers* the types of expressions by examining the code. If the inferred
                     types contradict each other, Infernu reports the contradiction as an error.
                     .
                     Infernu places restrictions on JS programs that are otherwise valid. In other words, Infernu is a
                     **subset of JavaScript**. Infernu tries to strike a balance between type system complexity and
                     dynamic-style coding flexibility.
                     .
                     See the .md files included in the package for more information.
                     
license:             GPL-2
homepage:            https://github.com/sinelaw/infernu
bug-reports:         https://github.com/sinelaw/infernu/issues
license-file:        LICENSE
author:              Noam Lewis
maintainer:          jones.noamle@gmail.com
copyright:           Noam Lewis, 2014-2015
-- category:
build-type:          Simple
extra-source-files:  README.md
cabal-version:       >=1.10
stability:           experimental

source-repository head
  type: git
  location: git@github.com:sinelaw/infernu.git

                     
flag quickcheck
  default: False
  manual: True

flag trace
  default: False
  manual: True

flag debug
  default: False
  manual: True

library
  hs-source-dirs:      src
  exposed-modules:   Infernu.Builtins.Array
                     , Infernu.Builtins.Operators
                     , Infernu.Builtins.Regex
                     , Infernu.Builtins.String
                     , Infernu.Builtins.TypeClasses
                     , Infernu.Decycle
                     , Infernu.Fix
                     , Infernu.Infer
                     , Infernu.InferState
                     , Infernu.Lib
                     , Infernu.Log
                     , Infernu.Options
                     , Infernu.Parse
                     , Infernu.Prelude
                     , Infernu.Pretty
                     , Infernu.Types
                     , Infernu.Unify
                     , Infernu.Util
  -- TODO: use only mtl (not transformers)
  build-depends:       base >= 4.6 && < 5, mtl, containers, transformers, either, language-ecmascript, digits, parsec, fgl, optparse-applicative
  default-language:    Haskell2010
  ghc-options: -Wall -O2 -rtsopts -threaded
  if flag(debug)
    ghc-options: -g
  if flag(trace)
    cpp-options: -DTRACE
  if flag(quickcheck)
    cpp-options: -DQUICKCHECK
    build-depends: QuickCheck, derive
    default-extensions: TemplateHaskell, DeriveGeneric, FlexibleInstances

executable infernu
  main-is: Main.hs
  build-depends:       base, parsec, infernu, optparse-applicative
  default-language:    Haskell2010
  ghc-options: -Wall -O2 -rtsopts -threaded
  if flag(debug)
    ghc-options: -g
  if flag(trace)
    cpp-options: -DTRACE
  if flag(quickcheck)
    cpp-options: -DQUICKCHECK
    build-depends: QuickCheck, derive
    default-extensions: TemplateHaskell, DeriveGeneric

executable infernu-demo
  main-is: Demo.hs
  hs-source-dirs: test
  build-depends:       base, infernu
  default-language:    Haskell2010
  ghc-options: -Wall  -O2 -main-is Demo
  if flag(trace)
    cpp-options: -DTRACE
  if flag(quickcheck)
    cpp-options: -DQUICKCHECK
    build-depends: QuickCheck, derive
    default-extensions: TemplateHaskell, DeriveGeneric

executable test
  if flag(quickcheck)
    cpp-options: -DQUICKCHECK
    build-depends: QuickCheck, derive
    default-extensions: TemplateHaskell, DeriveGeneric
  else
    buildable: False
  main-is: Test.hs
  hs-source-dirs: test
  build-depends:       base, infernu
  default-language:    Haskell2010
  ghc-options: -Wall  -O2 -main-is Test
  if flag(trace)
    cpp-options: -DTRACE
