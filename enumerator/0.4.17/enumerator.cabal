-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:f111365d5628bebc14a1af66a8a9f684
    SHA1:752aa80229c1504e3ccb62f6fd32205ce67e6a6a
    SHA256:e93b0b179c07c930accdc7fcd30baf0b0a5f125a01c5eccadf6bdad7e04d3001
    SHA512:a25d9c6ba4e8fc6ed6c811df7d8b1ac22fc43f3fb72e20da30f58d6c433c7f804e1b846fb024c72d4512777863f3f8cfc9cf403071d9a4ca68dca58d8caffb74
    Skein512_512:6dde62dfd88abfd23df39c6e3e4d9c7859901ef5d4e1fe25ed6b79880c9111f624765d4b7e15f57f4fc31c03a44c40203d7b4cc65e0562151db0fe116c463751

package-locations:
    https://hackage.haskell.org/package/enumerator-0.4.17/enumerator-0.4.17.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/enumerator-0.4.17.tar.gz

package-size: 50998
-- END Added by all-cabal-hashes-tool

name: enumerator
version: 0.4.17
synopsis: Reliable, high-performance processing with left-fold enumerators
license: MIT
license-file: license.txt
author: John Millikin <jmillikin@gmail.com>
maintainer: jmillikin@gmail.com
copyright: 2010-2011 John Millikin, 2011 Mikhail Vorozhtsov
build-type: Simple
cabal-version: >= 1.6
category: Data, Enumerator
stability: experimental
homepage: https://john-millikin.com/software/enumerator/
bug-reports: mailto:jmillikin@gmail.com
tested-with: GHC==6.12.1

description:
  Typical buffer&#x2013;based incremental I/O is based around a single loop,
  which reads data from some source (such as a socket or file), transforms
  it, and generates one or more outputs (such as a line count, HTTP
  responses, or modified file). Although efficient and safe, these loops are
  all single&#x2013;purpose; it is difficult or impossible to compose
  buffer&#x2013;based processing loops.
  .
  Haskell&#x2019;s concept of &#x201C;lazy I/O&#x201D; allows pure code to
  operate on data from an external source. However, lazy I/O has several
  shortcomings. Most notably, resources such as memory and file handles can
  be retained for arbitrarily long periods of time, causing unpredictable
  performance and error conditions.
  .
  Enumerators are an efficient, predictable, and safe alternative to lazy
  I/O. Discovered by Oleg Kiselyov, they allow large datasets to be processed
  in near&#x2013;constant space by pure code. Although somewhat more complex
  to write, using enumerators instead of lazy I/O produces more correct
  programs.
  .
  This library contains an enumerator implementation for Haskell, designed to
  be both simple and efficient. Three core types are defined, along with
  numerous helper functions:
  .
  * /Iteratee/: Data sinks, analogous to left folds. Iteratees consume
  a sequence of /input/ values, and generate a single /output/ value.
  Many iteratees are designed to perform side effects (such as printing to
  @stdout@), so they can also be used as monad transformers.
  .
  * /Enumerator/: Data sources, which generate input sequences. Typical
  enumerators read from a file handle, socket, random number generator, or
  other external stream. To operate, enumerators are passed an iteratee, and
  provide that iteratee with input until either the iteratee has completed its
  computation, or EOF.
  .
  * /Enumeratee/: Data transformers, which operate as both enumerators and
  iteratees. Enumeratees read from an /outer/ enumerator, and provide the
  transformed data to an /inner/ iteratee.

extra-source-files:
  benchmarks/enumerator-benchmarks.cabal
  benchmarks/Benchmarks.hs
  --
  examples/cat.hs
  examples/wc.hs
  --
  scripts/common.bash
  scripts/dist
  scripts/run-benchmarks
  scripts/run-coverage
  scripts/run-tests
  --
  tests/enumerator-tests.cabal
  tests/EnumeratorTests.hs
  tests/EnumeratorTests/Binary.hs
  tests/EnumeratorTests/Binary/Consume.hs
  tests/EnumeratorTests/Binary/Drop.hs
  tests/EnumeratorTests/Binary/Fold.hs
  tests/EnumeratorTests/Binary/Handle.hs
  tests/EnumeratorTests/Binary/Isolate.hs
  tests/EnumeratorTests/Binary/Iterate.hs
  tests/EnumeratorTests/Binary/Map.hs
  tests/EnumeratorTests/Binary/Repeat.hs
  tests/EnumeratorTests/Binary/Replicate.hs
  tests/EnumeratorTests/Binary/Require.hs
  tests/EnumeratorTests/Binary/Split.hs
  tests/EnumeratorTests/Binary/Unfold.hs
  tests/EnumeratorTests/Binary/Util.hs
  tests/EnumeratorTests/Binary/Zip.hs
  tests/EnumeratorTests/CatchError.hs
  tests/EnumeratorTests/Compatibility.hs
  tests/EnumeratorTests/Instances.hs
  tests/EnumeratorTests/Join.hs
  tests/EnumeratorTests/List.hs
  tests/EnumeratorTests/List/Consume.hs
  tests/EnumeratorTests/List/Drop.hs
  tests/EnumeratorTests/List/Fold.hs
  tests/EnumeratorTests/List/Isolate.hs
  tests/EnumeratorTests/List/Iterate.hs
  tests/EnumeratorTests/List/Map.hs
  tests/EnumeratorTests/List/Repeat.hs
  tests/EnumeratorTests/List/Replicate.hs
  tests/EnumeratorTests/List/Require.hs
  tests/EnumeratorTests/List/Split.hs
  tests/EnumeratorTests/List/Unfold.hs
  tests/EnumeratorTests/List/Unique.hs
  tests/EnumeratorTests/List/Util.hs
  tests/EnumeratorTests/List/Zip.hs
  tests/EnumeratorTests/Misc.hs
  tests/EnumeratorTests/Sequence.hs
  tests/EnumeratorTests/Stream.hs
  tests/EnumeratorTests/Text.hs
  tests/EnumeratorTests/Text/Codecs.hs
  tests/EnumeratorTests/Text/Consume.hs
  tests/EnumeratorTests/Text/Drop.hs
  tests/EnumeratorTests/Text/Fold.hs
  tests/EnumeratorTests/Text/Handle.hs
  tests/EnumeratorTests/Text/Isolate.hs
  tests/EnumeratorTests/Text/Iterate.hs
  tests/EnumeratorTests/Text/Map.hs
  tests/EnumeratorTests/Text/Repeat.hs
  tests/EnumeratorTests/Text/Replicate.hs
  tests/EnumeratorTests/Text/Require.hs
  tests/EnumeratorTests/Text/Split.hs
  tests/EnumeratorTests/Text/Unfold.hs
  tests/EnumeratorTests/Text/Util.hs
  tests/EnumeratorTests/Text/Zip.hs
  tests/EnumeratorTests/Trans.hs
  tests/EnumeratorTests/Util.hs

source-repository head
  type: bazaar
  location: https://john-millikin.com/software/enumerator/

source-repository this
  type: bazaar
  location: https://john-millikin.com/branches/enumerator/0.4/
  tag: enumerator_0.4.17

library
  ghc-options: -Wall -O2
  hs-source-dirs: lib

  build-depends:
      base >= 4.0 && < 5.0
    , transformers >= 0.2 && < 0.3
    , bytestring >= 0.9 && < 0.10
    , containers >= 0.1 && < 0.5
    , text >= 0.7 && < 0.12

  exposed-modules:
    Data.Enumerator
    Data.Enumerator.Binary
    Data.Enumerator.Internal
    Data.Enumerator.IO
    Data.Enumerator.List
    Data.Enumerator.Text
    Data.Enumerator.Trans

  other-modules:
    Data.Enumerator.Compatibility
    Data.Enumerator.Util
