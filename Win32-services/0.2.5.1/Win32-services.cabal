-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:65d79706c53ac39979c5dafc240f1e15
    SHA1:f51ef2afab77b1abb67893b5fb452627227f2081
    SHA256:277fee2944ff814522fefb8bff8de58529c1332df2f3b561fb8957476ccd31ae
    SHA512:145d2d0896b058d38599bd5178f7de7fd68179557f9eae81bf2e09bd0f3acf7c565aa4e2961d6e190dcce3f9764ddaea3b83689850af3da17dcb7f91cd6aa35c
    Skein512_512:e8b9c7062886238f6fc970c212512fd2b61315d5c1e270ebc54c1709b8eca7c3119e9a5c11c036cd1e07a8e8b75e55491775ef6be116111e902a9d2da2871ada

package-locations:
    https://hackage.haskell.org/package/Win32-services-0.2.5.1/Win32-services-0.2.5.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/Win32-services-0.2.5.1.tar.gz

package-size: 11233
-- END Added by all-cabal-hashes-tool

name:           Win32-services
category:       System
version:        0.2.5.1
cabal-version:  >= 1.16
build-type:     Simple
author:         Michael Steele
maintainer:     Michael Steele <mikesteele81@gmail.com>
copyright:      Copyright 2011-2015 Michael Steele
homepage:       http://github.com/mikesteele81/win32-services
bug-reports:    http://github.com/mikesteele81/win32-services/issues
license:        BSD3
license-file:   LICENSE
tested-with:    GHC == 7.6.3, GHC == 7.8.3, GHC == 7.10.1
stability:      provisional
synopsis:       Windows service applications
description:
  This package provides a partial binding to the Win32 System Services
  API. It makes it easy to write Windows service applications using
  Haskell. _Only 32-bit versions of GHC are supported at this time._
  .
  The binding is partial. Here are a few ways in which it differs from the
  official API:
  .
  * Only services running within their own process are supported. These are
  processes of the "WIN32_OWN_PROCESS" type.
  .
  * In cases where multiple versions of the same function exist (for
  compatibility), this binding only offers one of them.
  .
  * None of the extended control codes are supported. Handlers you write will
  automatically report this to the operating system when such controls are
  received.
  .
  * Only facilities for writing services are supported; not controlling them.
  .
  Effort has been made to simplify using the API without hiding what is
  happening behind the scenes. Users are encouraged to read Microsoft's
  documentation under 'Dev Center - Desktop > Docs > Desktop app development
  documentation > System Services > Services'. The official example has been
  ported to Haskell. This can be found in the 'examples' directory of the
  source tree.
  .
  /Simple Example and Usage/
  .
  @
  module Main where
  .
  import Control.Concurrent.MVar
  import System.Win32.SystemServices.Services
  .
  main = do
  &#x20;   mStop <- newEmptyMVar
  &#x20;   startServiceCtrlDispatcher \"Test\" 3000 (handler mStop) $ \\_ _ h -> do
  &#x20;       setServiceStatus h running
  &#x20;       takeMVar mStop
  &#x20;       setServiceStatus h stopped
  .
  handler mStop hStatus STOP = do
  &#x20;   setServiceStatus hStatus stopPending
  &#x20;   putMVar mStop ()
  &#x20;   return True
  handler _ _ INTERROGATE = return True
  handler _ _ _           = return False
  .
  running = SERVICE_STATUS WIN32_OWN_PROCESS RUNNING [ACCEPT_STOP] nO_ERROR 0 0 0
  stopped = SERVICE_STATUS WIN32_OWN_PROCESS STOPPED [] nO_ERROR 0 0 0
  stopPending = SERVICE_STATUS WIN32_OWN_PROCESS STOP_PENDING [ACCEPT_STOP] nO_ERROR 0 0 0
  @
  .
  @
  C:\programming\test\>ghc --make -threaded Main.hs
  [1 of 1] Compiling Main             ( Main.hs, Main.o )
  Linking Main.exe ...
  \<linker warnings omitted\>
  C:\\programming\\test\>copy Main.exe c:\\svc\\Test.exe
      1 file(s) copied.
  @
  .
  Execute the following from an elevated command prompt to register the
  service:
  .
  @
  C:\\svc\>sc create Test binPath= c:\\svc\\Test.exe
  [SC] CreateService SUCCESS
  @
  .
  The service can now be started and stopped from the services console.
  .
  Installation Notes:
  .
  Depending on which version of Windows and the Windows SDK you are using the
  .cabal file will need to be modified before installing. A simple `cabal
  install Win32-services` may not work. For example, If you are building on
  Windows 8 64-bit with the Windows 8 SDK the 'extra-lib-dirs' field will need
  to be changed to read as follows:
  .
  @
  Extra-Lib-Dirs: \"C:\\\\Program Files (x86)\\\\Windows Kits\\\\8.0\\\\Lib\\\\win8\\\\um\\\\x86\"
  @
extra-source-files:
    changelog
    examples/*.hs

source-repository head
  type: git
  location: git://github.com/mikesteele81/win32-services.git

library
  build-depends: base   >= 4.5 && < 4.9
               , Win32  >= 2.2 && < 2.4
  default-language: Haskell2010
  ghc-options:     -Wall
  hs-source-dirs: src
  Exposed-Modules: System.Win32.SystemServices.Services
  Extra-Libraries: Advapi32
  Extra-Lib-Dirs: c:\Windows\System32
  other-modules:
                 Import
               , System.Win32.SystemServices.Services.SERVICE_STATUS
               , System.Win32.SystemServices.Services.Raw
               , System.Win32.SystemServices.Services.SERVICE_TABLE_ENTRY
               , System.Win32.SystemServices.Services.Types
               , System.Win32.SystemServices.Services.SERVICE_ACCEPT
               , System.Win32.SystemServices.Services.SERVICE_CONTROL
               , System.Win32.SystemServices.Services.SERVICE_STATE
               , System.Win32.SystemServices.Services.SERVICE_TYPE
