-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:f58176d89ae446701d573052784f7cdf
    SHA1:8efa5500bcc26d7cc89d6d0cac012c1604e29ee1
    SHA256:b294a7b17bf797733e191ee15f8ab373935623e636e0f5ea49315edbb34f0b75
    SHA512:82df5131abc8952f79bf67ee5ba4b84f35400c51e0cf64c551a152903eb60a10824a21ff335235281b5dae342bfbf1d7bb9b405e680bdcc82e8ba01a7fc6b54e
    Skein512_512:935094dac59ef013ae645fa7b57b337acc672719652fe5a372d0ff23cd83438d2148ea6693dc485cdfa4366ad6111a984ad140fc860a68aedf767b7732365054

x-package-locations:
    https://hackage.haskell.org/package/regions-0.5/regions-0.5.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/regions-0.5.tar.gz

x-package-size: 8429
-- END Added by all-cabal-hashes-tool

name:          regions
version:       0.5
cabal-version: >=1.6
build-type:    Simple
license:       BSD3
license-file:  LICENSE
copyright:     2010 Bas van Dijk
author:        Bas van Dijk
maintainer:    Bas van Dijk <v.dijk.bas@gmail.com>
stability:     experimental
category:      Control, Monadic Regions
synopsis:      Provides the region monad for safely opening and working with
               scarce resources.
description:
  This package provides the region monad transformer. Scarce resources like
  files, memory pointers or USB devices for example can be opened in a
  region. When the region terminates, all opened resources will be automatically
  closed. The main advantage of regions is that the opened resources can not be
  returned from the region which ensures no I/O with closed resources is
  possible.
  .
  The primary technique used in this package is called \"Lightweight monadic
  regions\" which was invented by Oleg Kiselyov and Chung-chieh Shan.  See:
  .
  <http://okmij.org/ftp/Haskell/regions.html#light-weight>
  .
  Also see the @regions-monadsfd@ and @regions-monadstf@ packages which provide
  instances for the classes in the respected monads packages.
  .
  For an example on how to use this library see the @safer-file-handles@,
  @usb-safe@ or @regional-pointers@ packages.
  .
  Note that if you want to open /your/ type of scarce resource in a region, the
  only thing you have to do is define an instance for the @Resource@ class
  (which you can find in: @Control.Resource@).

source-repository head
  Type:     darcs
  Location: http://code.haskell.org/~basvandijk/code/regions

Library
  GHC-Options: -Wall
  build-depends: base                      >= 4       && < 4.3
               , base-unicode-symbols      >= 0.1.1   && < 0.3
               , transformers              >= 0.2     && < 0.3
               , MonadCatchIO-transformers >= 0.2     && < 0.3
  exposed-modules: Control.Resource
                   Control.Monad.Trans.Region
                   Control.Monad.Trans.Region.Unsafe
                   Data.RegionRef
  other-modules:   Control.Monad.Trans.Region.Internal
