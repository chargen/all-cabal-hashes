-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:bb47639f8db532137acdea5f89d5ed46
    SHA1:86fbeb26dacd66fd6de4f4fefcb625a13915bf09
    SHA256:3f189aabc0661dd2846d979d1fb84021445f1d77eacae1dc67adf43e338e6eef
    SHA512:4a141eb8a45b0e9896c1ce89acc70e4069cbf05ac086f90afe893cb301643d37ae7137c1cf73048b91b9107f19036ab4149754af5bd26d841501524bc4c03be3
    Skein512_512:aa53af52a368a69d61bf3d7906e109847d528fddb63045ff9007dbe4a0cb5821fc44dc6ce102f7d9206249e255b5d7cded7b836e8b991780b159ed8bfd019bd3

package-locations:
    https://hackage.haskell.org/package/regions-0.4/regions-0.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/regions-0.4.tar.gz

package-size: 8954
-- END Added by all-cabal-hashes-tool

name:          regions
version:       0.4
cabal-version: >=1.6
build-type:    Simple
license:       BSD3
license-file:  LICENSE
copyright:     2010 Bas van Dijk
author:        Bas van Dijk
maintainer:    Bas van Dijk <v.dijk.bas@gmail.com>
stability:     experimental
category:      Control, Monadic Regions
synopsis:      Provides the region monad for safely opening and working with
               scarce resources.
description:

  This package provides the region monad transformer. Scarce resources like
  files, memory pointers or USB devices for example can be opened in a
  region. When the region terminates, all opened resources will be automatically
  closed. The main advantage of regions is that the opened resources can not be
  returned from the region which ensures no I/O with closed resources is
  possible.

  .

  The primary technique used in this package is called \"Lightweight monadic
  regions\" which was invented by Oleg Kiselyov and Chung-chieh Shan.  See:

  .

  <http://okmij.org/ftp/Haskell/regions.html#light-weight>

  .

  Also see the @regions-monadsfd@ and @regions-monadstf@ packages which provide
  instances for the classes in the respected monads packages.

  .

  For an example on how to use this library see the @safer-file-handles@,
  @usb-safe@ or @regional-pointers@ packages.

  .

  Note that if you want to open /your/ type of scarce resource in a region, the
  only thing you have to do is define an instance for the @Resource@ class
  (which you can find in: @Control.Resource@).

source-repository head
  Type:     darcs
  Location: http://code.haskell.org/~basvandijk/code/regions

Library
  GHC-Options: -Wall
  build-depends: base                      >= 4       && < 4.3
               , base-unicode-symbols      >= 0.1.1   && < 0.2
               , transformers              >= 0.1.4   && < 0.2
               , MonadCatchIO-transformers >= 0.0.2.0 && < 0.1
  exposed-modules: Control.Resource
                   Control.Monad.Trans.Region
                   Control.Monad.Trans.Region.Unsafe
                   Data.RegionRef
  other-modules:   Control.Monad.Trans.Region.Internal
