-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:30a8ae9c96e9ea0b0a22a0bebd289c92
    SHA1:cd174f31f1c3aea411729d8df29357d846d50ed9
    SHA256:beee928c18a1bfa432e9b20fb399ab472628f62c6aa87f8a00682ca155d16312
    SHA512:05cc29125403f2a62a3267456ae722f68eb6a4f31c9c91293ba01c55d0d436f212b8ca7066c2461978023688f28bddcf43784dc94f6da15069715eecc0d3e61a
    Skein512_512:2bed3cd2760f82e0b2e6036d1bcc7d8b03c7062a3f67b80c8a4483da451a1dae31471a50e953a5195fbf7e3d16885b5f88985b999430ea024b210caa5265976c

package-locations:
    https://hackage.haskell.org/package/TrieMap-2.0.2/TrieMap-2.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/TrieMap-2.0.2.tar.gz

package-size: 38998
-- END Added by all-cabal-hashes-tool

name:		     TrieMap
version:             2.0.2
cabal-version:       >= 1.6
tested-with:	     GHC
category:            Algorithms
synopsis:	     Automatic type inference of generalized tries with Template Haskell.
description:	     Provides a efficient and compact implementation of generalized tries, and Template Haskell tools to generate
                     the necessary translation code.  This is meant as a drop-in replacement for Data.Map.
                     
                     The most recent release combines zipper-based ideas from recently proposed changes to Data.Map, as well
                     as heavily optimized ByteString and Vector instances based on the vector package.
license:             BSD3
license-file:	     LICENSE
author:              Louis Wasserman
maintainer:          wasserman.louis@gmail.com
build-type:	     Simple
extra-source-files:  Tests.hs

source-repository head
  type:              git
  location:          git@github.com:lowasser/TrieMap.git

Library{
build-Depends:       base < 5.0.0.0, containers, template-haskell, bytestring, th-expand-syns, vector, primitive
ghc-options:
  -Wall -fno-warn-name-shadowing -fno-warn-orphans -O2 -fno-spec-constr-count -fno-spec-constr-threshold
  -fno-liberate-case-threshold -fmax-worker-args=100
exposed-modules:  
  Data.TrieMap,
  Data.TrieSet,
  Data.TrieMap.Class,
  Data.TrieMap.Representation,
  Data.TrieMap.Modifiers
other-modules:
  Data.TrieMap.Utils,
  Data.TrieMap.Sized,
  Data.TrieMap.Applicative,
  Data.TrieMap.Representation.Class,
  Data.TrieMap.Representation.TH,
  Data.TrieMap.Representation.TH.Utils,
  Data.TrieMap.Representation.TH.Representation,
  Data.TrieMap.Representation.TH.Factorized,
  Data.TrieMap.Representation.TH.ReprMonad,
  Data.TrieMap.Representation.Instances,
  Data.TrieMap.Representation.Instances.Basic,
  Data.TrieMap.Representation.Instances.Prim,
  Data.TrieMap.Representation.Instances.Foreign,
  Data.TrieMap.Representation.Instances.Vectors,
  Data.TrieMap.Representation.Instances.ByteString
  Data.TrieMap.IntMap,
  Data.TrieMap.OrdMap,
  Data.TrieMap.UnitMap,
  Data.TrieMap.ProdMap,
  Data.TrieMap.UnionMap,
  Data.TrieMap.ReverseMap,
  Data.TrieMap.Key,
  Data.TrieMap.RadixTrie,
  Data.TrieMap.RadixTrie.Slice,
  Data.TrieMap.RadixTrie.Edge,
  Data.TrieMap.Class.Instances
}
