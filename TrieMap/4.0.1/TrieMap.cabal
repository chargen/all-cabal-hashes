-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:2fbb29f2d946851ee3ce0771c7784dfc
    SHA1:e2cb24e87b797d6ff0b4675acb01429fd21b84ec
    SHA256:3cc98ac71cbffada7884ce63f896cfd338a6479937aeec74696270e164d802e2
    SHA512:3465ea740274367dd1875cea334c81b36b53f0124e2cdaabc549ae491c67793c1ef3ed7547208a5d981bb45555861689f820ed0b361f75a482e5888f795b2c05
    Skein512_512:f53e75d1e46bb76efad64159213f32aaa41ccd8c8816c0ae9af4a7b8c9972f140830b8c5426ba703c7d497086df579e72fd09ddb8c16e2d75571875ec142b8ce

package-locations:
    https://hackage.haskell.org/package/TrieMap-4.0.1/TrieMap-4.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/TrieMap-4.0.1.tar.gz

package-size: 54616
-- END Added by all-cabal-hashes-tool

name:		     TrieMap
version:             4.0.1
cabal-version:       >= 1.6
tested-with:	     GHC
category:            Algorithms
synopsis:	     Automatic type inference of generalized tries with Template Haskell.
description:	     Provides a efficient and compact implementation of generalized tries, and Template Haskell tools to generate
                     the necessary translation code.  This is meant as a drop-in replacement for Data.Map, and can be used anywhere
                     @Data.Map@ can be used.
                     .
                     The most recent release combines zipper-based ideas from recently proposed changes to Data.Map, as well
                     as heavily optimized ByteString and Vector instances based on the vector package.
                     
                     For best performance, use @cabal install -fllvm -O2@.
license:             BSD3
license-file:	     LICENSE
author:              Louis Wasserman
maintainer:          wasserman.louis@gmail.com
build-type:	     Simple
extra-source-files:  Tests.hs

source-repository head
  type:              git
  location:          git@github.com:lowasser/TrieMap.git

Flag LLVM {
  Description: Compile with LLVM, because you mean srs bzns
  Default: False
}

Library{
build-Depends:    base < 5.0.0.0, containers, template-haskell >= 2.5.0.0, bytestring >= 0.9.1.0, th-expand-syns,
                  vector >= 0.6, primitive >= 0.3, unpack-funcs >= 0.1.2, transformers >= 0.2.0.0
ghc-options:
  -Wall -fno-warn-name-shadowing -fno-warn-orphans -fno-spec-constr-count -fno-spec-constr-threshold
  -fno-liberate-case-threshold -fmax-worker-args=100
if impl(ghc >= 7.0.0) && flag(LLVM)
  ghc-options: -fllvm -optlo-O3 -optlo-std-compile-opts
exposed-modules:  
  Data.TrieMap,
  Data.TrieSet,
  Data.TrieMap.Class,
  Data.TrieMap.Representation,
  Data.TrieMap.Modifiers
other-modules:
  Control.Monad.Ends,
  Control.Monad.Lookup,
  Data.Vector.Build,
  Data.TrieMap.TrieKey,
  Data.TrieMap.Utils,
  Data.TrieMap.Sized,
  Data.TrieMap.TrieKey.Search,
  Data.TrieMap.TrieKey.Subset,
  Data.TrieMap.TrieKey.Buildable,
  Data.TrieMap.TrieKey.SetOp,
  Data.TrieMap.TrieKey.Projection,
  Data.TrieMap.Representation.Class,
  Data.TrieMap.Representation.TH,
  Data.TrieMap.Representation.TH.Utils,
  Data.TrieMap.Representation.TH.Representation,
  Data.TrieMap.Representation.TH.Factorized,
  Data.TrieMap.Representation.TH.ReprMonad,
  Data.TrieMap.Representation.Instances,
  Data.TrieMap.Representation.Instances.Basic,
  Data.TrieMap.Representation.Instances.Prim,
  Data.TrieMap.Representation.Instances.Foreign,
  Data.TrieMap.Representation.Instances.Vectors,
  Data.TrieMap.Representation.Instances.ByteString
  Data.TrieMap.WordMap,
  Data.TrieMap.OrdMap,
  Data.TrieMap.UnitMap,
  Data.TrieMap.ProdMap,
  Data.TrieMap.UnionMap,
  Data.TrieMap.ReverseMap,
  Data.TrieMap.Key,
  Data.TrieMap.RadixTrie,
  Data.TrieMap.RadixTrie.Slice,
  Data.TrieMap.RadixTrie.Edge,
  Data.TrieMap.RadixTrie.Label,
  Data.TrieMap.Class.Instances
}
