-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:efee94b2d7d466c81fa946211f06648f
    SHA1:7f625d808a5623321005a197933939001bf0a5ea
    SHA256:728f3de0ddf968f919bff2ae96180c010e76969d720a0404b032105305c747ed
    SHA512:91466cf397886e8b76385bb1831657d38d1b6e8f2882071da1a48a344f3f11beb6c40fde73970bb63249a14061ce8a95a5f3883341ae5f83ae847a8a661ac16a
    Skein512_512:333392dcc87c691deab24d440a982f63e5566bb2220a87a16cb53a827c0c78a6f9e0ff2642d3946250f6696b7305f6cfb4c2bd5d1671e91388e6086838100497

package-locations:
    https://hackage.haskell.org/package/TrieMap-2.0.1/TrieMap-2.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/TrieMap-2.0.1.tar.gz

package-size: 38933
-- END Added by all-cabal-hashes-tool

name:		     TrieMap
version:             2.0.1
tested-with:	     GHC
category:            Algorithms
synopsis:	     Automatic type inference of generalized tries with Template Haskell.
description:	     Provides a efficient and compact implementation of generalized tries, and Template Haskell tools to generate
                     the necessary translation code.  This is meant as a drop-in replacement for Data.Map.
                     
                     The most recent release combines zipper-based ideas from recently proposed changes to Data.Map, as well
                     as heavily optimized ByteString and Vector instances based on the vector package.
license:             BSD3
license-file:	     LICENSE
author:              Louis Wasserman
maintainer:          wasserman.louis@gmail.com
build-Depends:       base < 5.0.0.0, containers, template-haskell, bytestring, th-expand-syns, vector, primitive
build-type:	     Simple
ghc-options:         -Wall -fno-warn-name-shadowing -fno-warn-orphans -O2 -fno-spec-constr-count -fno-spec-constr-threshold
		     -fno-liberate-case-threshold -fmax-worker-args=100
extra-source-files:  Tests.hs
exposed-modules:  
	Data.TrieMap,
	Data.TrieSet,
	Data.TrieMap.Class,
	Data.TrieMap.Representation,
	Data.TrieMap.Modifiers
other-modules:
	Data.TrieMap.Utils,
	Data.TrieMap.Sized,
	Data.TrieMap.Applicative,
	Data.TrieMap.Representation.Class,
	Data.TrieMap.Representation.TH,
	Data.TrieMap.Representation.TH.Utils,
	Data.TrieMap.Representation.TH.Representation,
	Data.TrieMap.Representation.TH.Factorized,
	Data.TrieMap.Representation.TH.ReprMonad,
	Data.TrieMap.Representation.Instances,
	Data.TrieMap.Representation.Instances.Basic,
	Data.TrieMap.Representation.Instances.Prim,
	Data.TrieMap.Representation.Instances.Foreign,
	Data.TrieMap.Representation.Instances.Vectors,
	Data.TrieMap.Representation.Instances.ByteString
	Data.TrieMap.IntMap,
	Data.TrieMap.OrdMap,
	Data.TrieMap.UnitMap,
	Data.TrieMap.ProdMap,
	Data.TrieMap.UnionMap,
	Data.TrieMap.ReverseMap,
	Data.TrieMap.Key,
	Data.TrieMap.RadixTrie,
	Data.TrieMap.RadixTrie.Slice,
	Data.TrieMap.RadixTrie.Edge,
	Data.TrieMap.Class.Instances
	
