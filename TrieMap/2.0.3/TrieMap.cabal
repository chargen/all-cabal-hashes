-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:a0bfa3bc3d6b046c36d474b3794730b9
    SHA1:b5fbf532be2a9c6e061634903ed8c23bc2788156
    SHA256:ebba53723aaeefa06f4f0c59006145325e31c827296b1b713c2aba8ac063e598
    SHA512:55d964251c7520d37408953db0d8a9ca96b1413e8b44430637913d440f6a4deb49a19df4703c2aa5bd5d7e5075da3ed36cdf4dfda986823833311a4244e9b710
    Skein512_512:8d4b2dd5846d14e1d2deeff3cc1bf6507980f1604bf692614a6eaf9b24188b35e675866e33abb91a365fed146beeb3542fac8bc10fce36206b4b70bd7c1699e2

x-package-locations:
    https://hackage.haskell.org/package/TrieMap-2.0.3/TrieMap-2.0.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/TrieMap-2.0.3.tar.gz

x-package-size: 40700
-- END Added by all-cabal-hashes-tool

name:		     TrieMap
version:             2.0.3
cabal-version:       >= 1.6
tested-with:	     GHC
category:            Algorithms
synopsis:	     Automatic type inference of generalized tries with Template Haskell.
description:	     Provides a efficient and compact implementation of generalized tries, and Template Haskell tools to generate
                     the necessary translation code.  This is meant as a drop-in replacement for Data.Map.
                     
                     The most recent release combines zipper-based ideas from recently proposed changes to Data.Map, as well
                     as heavily optimized ByteString and Vector instances based on the vector package.
license:             BSD3
license-file:	     LICENSE
author:              Louis Wasserman
maintainer:          wasserman.louis@gmail.com
build-type:	     Simple
extra-source-files:  Tests.hs

source-repository head
  type:              git
  location:          git@github.com:lowasser/TrieMap.git

Library{
build-Depends:       base < 5.0.0.0, containers, template-haskell, bytestring, th-expand-syns, vector, primitive
ghc-options:
  -Wall -fno-warn-name-shadowing -fno-warn-orphans -O2 -fno-spec-constr-count -fno-spec-constr-threshold
  -fno-liberate-case-threshold -fmax-worker-args=100
exposed-modules:  
  Data.TrieMap,
  Data.TrieSet,
  Data.TrieMap.Class,
  Data.TrieMap.Representation,
  Data.TrieMap.Modifiers
other-modules:
  Data.TrieMap.TrieKey,
  Data.TrieMap.Utils,
  Data.TrieMap.Sized,
  Data.TrieMap.Applicative,
  Data.TrieMap.Representation.Class,
  Data.TrieMap.Representation.TH,
  Data.TrieMap.Representation.TH.Utils,
  Data.TrieMap.Representation.TH.Representation,
  Data.TrieMap.Representation.TH.Factorized,
  Data.TrieMap.Representation.TH.ReprMonad,
  Data.TrieMap.Representation.Instances,
  Data.TrieMap.Representation.Instances.Basic,
  Data.TrieMap.Representation.Instances.Prim,
  Data.TrieMap.Representation.Instances.Foreign,
  Data.TrieMap.Representation.Instances.Vectors,
  Data.TrieMap.Representation.Instances.ByteString
  Data.TrieMap.IntMap,
  Data.TrieMap.OrdMap,
  Data.TrieMap.UnitMap,
  Data.TrieMap.ProdMap,
  Data.TrieMap.UnionMap,
  Data.TrieMap.ReverseMap,
  Data.TrieMap.Key,
  Data.TrieMap.RadixTrie,
  Data.TrieMap.RadixTrie.Slice,
  Data.TrieMap.RadixTrie.Edge,
  Data.TrieMap.Class.Instances
}
