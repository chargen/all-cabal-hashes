-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:2d692f3e2c656659f9e6b142f39b772d
    SHA1:1995b12bbba79ff8c7373cf99af307cab91bcba8
    SHA256:518a33235391259af82a910c65bf4e20751d0dddcb0336f79fac654995d8bc77
    SHA512:19661ec9cd2b147dabf61285b20fb4f6952b0e3b1eb860dc31953dff80649120c56651d7dc5c601c9d576dcbdf709a88c7956f75fb7999d398507b4966859ccd
    Skein512_512:3f06cbd4be47f7d2807bd901d3f2ae517150e759521b11b8024ca815c2d78a1989cb3eccd653fb2bfdf31a0279dc745c97bd18fbf2ce338e7777b15c5be2d144

x-package-locations:
    https://hackage.haskell.org/package/TrieMap-1.5.0/TrieMap-1.5.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/TrieMap-1.5.0.tar.gz

x-package-size: 32544
-- END Added by all-cabal-hashes-tool

name:		     TrieMap
version:             1.5.0
tested-with:	     GHC
category:            Algorithms
synopsis:	     Automatic type inference of generalized tries with Template Haskell.
description:	     Provides a efficient and compact implementation of generalized tries, and Template Haskell tools to generate
                     the necessary translation code.  This is meant as a drop-in replacement for Data.Map.
license:             BSD3
license-file:	     LICENSE
author:              Louis Wasserman
maintainer:          wasserman.louis@gmail.com
build-Depends:       base < 5.0.0.0, containers, template-haskell, bytestring, array, th-expand-syns, ghc-prim
build-type:	     Simple
ghc-options:         -Wall -fno-warn-name-shadowing -fno-warn-orphans
extra-source-files:  Tests.hs
exposed-modules:  
	Data.TrieMap,
	Data.TrieSet,
	Data.TrieMap.Representation,
	Data.TrieMap.Representation.TH,
	Data.TrieMap.Modifiers
other-modules:
	Data.TrieMap.Class,
	Data.TrieMap.Class.Instances,
	Data.TrieMap.Key,
	Data.TrieMap.TrieKey,
	Data.TrieMap.Applicative,
	Data.TrieMap.ProdMap,
	Data.TrieMap.RadixTrie,
	Data.TrieMap.UnionMap,
	Data.TrieMap.UnitMap,
	Data.TrieMap.Rep,
	Data.TrieMap.Rep.Instances,
	Data.TrieMap.Rep.TH,
	Data.TrieMap.IntMap,
	Data.TrieMap.OrdMap,
	Data.TrieMap.ReverseMap,
	Data.TrieMap.Sized,
	Data.TrieMap.Applicative
