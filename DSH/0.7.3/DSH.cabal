-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:5a75c46afa98dfbb079be4f44d4bcd6c
    SHA1:e59e096cd93f13ed67404275862b4a3f7eb5bbd6
    SHA256:e9ebb39a0a9a87ac14f195e4845fc74eaacd989be11962ee4a346d3cd40f6884
    SHA512:8a201915569e97bb2391f5f39732351ef2fedffb2ad59608279bf6904ea9b7ad2f55331407a377461cfee971cc03537fe9441c335d0692b291b2efe17c69fbe5
    Skein512_512:2f5da42041c78d9255b0282d52965c035af7bc54b73e342506b8c449d91770f13aee5f3ab816b2ddea3c7197955c1b5dd182d3affe3d45354e3aebe3a2f53754

x-package-locations:
    https://hackage.haskell.org/package/DSH-0.7.3/DSH-0.7.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/DSH-0.7.3.tar.gz

x-package-size: 28946
-- END Added by all-cabal-hashes-tool

Name:                DSH
Version:             0.7.3
Synopsis:            Database Supported Haskell
Description:
  This is a Haskell library for database-supported program execution. Using
  this library a relational database management system (RDBMS) can be used as
  a coprocessor for the Haskell programming language, especially for those
  program fragments that carry out data-intensive and data-parallel
  computation.
  .
  Database executable program fragments can be written using the list
  comprehension notation (with modest syntax changes due to quasiquoting) and
  list processing combinators from the Haskell list prelude. Note that rather
  than embedding a relational language into Haskell, we turn idiomatic Haskell
  programs into SQL queries.
  .
  DSH faithfully represents list order and nesting, and compiles the list
  processing combinators into relational queries. The implementation avoids
  unnecessary data transfer and context switching between the database
  coprocessor and the Haskell runtime by ensuring that the number of generated
  relational queries is only determined by the program fragment's type and not
  by the database size.
  .
  DSH can be used to allow existing Haskell programs to operate on large scale
  data (e.g., larger than the available heap) or query existing database
  resident data with Haskell.
  .
  Note that this package is flagged experimental and therefore not suited for
  production use. This is a proof of concept implementation only. To learn
  more about DSH, our paper entitled as "Haskell boards the Ferry:
  Database-supported program execution for Haskell" [1] is a recommended
  reading. The package includes a couple of examples that demonstrate how to
  use DSH.
  .
  1. <http://www-db.informatik.uni-tuebingen.de/files/publications/ferryhaskell.pdf>

License:             BSD3
License-file:        LICENSE
Author:              George Giorgidze, Tom Schreiber, Nils Schweinsberg and Jeroen Weijers
Maintainer:          giorgidze@gmail.com, jeroen.weijers@uni-tuebingen.de
Stability:           Experimental
Category:            Database
Build-type:          Simple

Extra-source-files:  examples/Example01.hs
                     examples/Example02.hs
                     examples/Makefile
                     tests/Main.hs
                     tests/Makefile

Cabal-version:       >= 1.2

Library
  Build-depends:     base               >= 4.2 && < 5,
                     containers         >= 0.3,
                     array              >= 0.3,
                     syb                >= 0.1,
                     mtl                >= 2.0.1,
                     bytestring         >= 0.9,
                     text               >= 0.11,
                     HDBC               >= 2.2,
                     convertible        >= 1.0,
                     template-haskell   >= 2.4,
                     HaXml              >= 1.22,
                     csv                >= 0.1,
                     Pathfinder         >= 0.5.8,
                     FerryCore          >= 0.4.6.4

  Hs-source-dirs:    src

  GHC-options:       -O3 -Wall

  Exposed-modules:   Database.DSH
                     Database.DSH.Interpreter
                     Database.DSH.Compiler

  Other-modules:     Database.DSH.TH
                     Database.DSH.Data
                     Database.DSH.Combinators
                     Database.DSH.CSV
                     Database.DSH.Impossible
                     Database.DSH.Compile