-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:6c984d249c4330e2e230967c5b81c344
    SHA1:4452e7a88266056a31084b7d94851ff30cc5a3ec
    SHA256:2cd0a5c1fb7534c3d9e535bef62189299e565a54889a5630b11d07575dc9a566
    SHA512:359e62bce7c1f7886ec8beabe94447859aeae32f2bad7a8bcb8e7fb60a2c06a5d1327b69a3be67b8e4dbaca76ec3bbd28970cfeda9a300166aa28c86cff5eff2
    Skein512_512:655129b6f3c30fd74f6c3eddca1bd7829e48a05e3aff2b80905b02c137853dfcb94f4888b63b19f04426fca6e00f6c71894b51267a5575d1e4cbebe4fb0aa032

x-package-locations:
    https://hackage.haskell.org/package/DSH-0.8.2.1/DSH-0.8.2.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/DSH-0.8.2.1.tar.gz

x-package-size: 28548
-- END Added by all-cabal-hashes-tool

Name:                DSH
Version:             0.8.2.1
Synopsis:            Database Supported Haskell
Description:
  This is a Haskell library for database-supported program execution. Using
  this library a relational database management system (RDBMS) can be used as
  a coprocessor for the Haskell programming language, especially for those
  program fragments that carry out data-intensive and data-parallel
  computation.
  .
  Database executable program fragments can be written using the list
  comprehension notation (with modest syntax changes due to quasiquoting) and
  list processing combinators from the Haskell list prelude. Note that rather
  than embedding a relational language into Haskell, we turn idiomatic Haskell
  programs into SQL queries.
  .
  DSH faithfully represents list order and nesting, and compiles the list
  processing combinators into relational queries. The implementation avoids
  unnecessary data transfer and context switching between the database
  coprocessor and the Haskell runtime by ensuring that the number of generated
  relational queries is only determined by the program fragment's type and not
  by the database size.
  .
  DSH can be used to allow existing Haskell programs to operate on large scale
  data (e.g., larger than the available heap) or query existing database
  resident data with Haskell.
  .
  Note that this package is flagged experimental and therefore not suited for
  production use. This is a proof of concept implementation only. To learn
  more about DSH, our paper entitled as "Haskell boards the Ferry:
  Database-supported program execution for Haskell" [1] is a recommended
  reading. The package includes a couple of examples that demonstrate how to
  use DSH.
  .
  This is a highly experimental release supporting our work-in-progress paper on
  "Algebraic Data Types for Language-Integrated Queries".
  .
  1. <http://db.inf.uni-tuebingen.de/files/giorgidze/ifl2010.pdf>

License:             BSD3
License-file:        LICENSE
Author:              George Giorgidze, Alexander Ulrich, Tom Schreiber, Nils Schweinsberg and Jeroen Weijers
Maintainer:          giorgidze@gmail.com, jeroen.weijers@uni-tuebingen.de
Stability:           Experimental
Category:            Database
Build-type:          Simple

Extra-source-files:  examples/Example01.hs
                     examples/Example02.hs
                     examples/Example03.hs
                     examples/Makefile
                     tests/Main.hs
                     tests/Makefile

Cabal-version:       >= 1.4

Library
  Extensions:        TemplateHaskell,
                     ScopedTypeVariables,
                     FlexibleContexts,
                     FlexibleInstances,
                     MultiParamTypeClasses,
                     TypeFamilies,
                     GADTs

  Build-depends:     base               >= 4.5 && < 5,
                     containers         >= 0.4,
                     array              >= 0.4,
                     bytestring         >= 0.9,
                     template-haskell   >= 2.7,
                     mtl                >= 2.1,
                     text               >= 0.11,
                     HDBC               >= 2.3,
                     HaXml              >= 1.23,
                     csv                >= 0.1,
                     Pathfinder         >= 0.5,
                     FerryCore          >= 0.4

  Hs-source-dirs:    src

  GHC-options:       -O3 -Wall -fno-warn-orphans

  Exposed-modules:   Database.DSH.Interpreter
                     Database.DSH.Compiler
                     Database.DSH

  Other-modules:     Database.DSH.Internals
                     Database.DSH.Externals
                     Database.DSH.CSV
                     Database.DSH.Impossible
                     Database.DSH.Compile
                     Database.DSH.TH