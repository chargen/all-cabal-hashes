name:                   random-fu
version:                0.2.6.1
stability:              provisional

cabal-version:          >= 1.6
build-type:             Simple

author:                 James Cook <mokus@deepbondi.net>
maintainer:             James Cook <mokus@deepbondi.net>
license:                PublicDomain
homepage:               https://github.com/mokus0/random-fu

category:               Math
synopsis:               Random number generation
description:            Random number generation based on modeling random 
                        variables in two complementary ways: first, by the
                        parameters of standard mathematical distributions and,
                        second, by an abstract type ('RVar') which can be
                        composed and manipulated monadically and sampled in
                        either monadic or \"pure\" styles.
                        .
                        The primary purpose of this library is to support 
                        defining and sampling a wide variety of high quality
                        random variables.  Quality is prioritized over speed,
                        but performance is an important goal too.
                        .
                        In my testing, I have found it capable of speed 
                        comparable to other Haskell libraries, but still
                        a fair bit slower than straight C implementations of 
                        the same algorithms.

tested-with:            GHC == 7.4.2, GHC == 7.6.1

extra-source-files:     changelog.md

source-repository head
  type:                 git
  location:             https://github.com/mokus0/random-fu.git
  subdir:               random-fu

Flag base4_2
    Description:        base-4.2 has an incompatible change in Data.Fixed (HasResolution)

Flag mtl2
    Description:        mtl-2 has State, etc., as "type" rather than "newtype"

Library
  ghc-options:          -Wall -funbox-strict-fields
  hs-source-dirs:       src
  exposed-modules:      Data.Random
                        Data.Random.Distribution
                        Data.Random.Distribution.Bernoulli
                        Data.Random.Distribution.Beta
                        Data.Random.Distribution.Binomial
                        Data.Random.Distribution.Categorical
                        Data.Random.Distribution.ChiSquare
                        Data.Random.Distribution.Dirichlet
                        Data.Random.Distribution.Exponential
                        Data.Random.Distribution.StretchedExponential
                        Data.Random.Distribution.Gamma
                        Data.Random.Distribution.Multinomial
                        Data.Random.Distribution.Normal
                        Data.Random.Distribution.Pareto
                        Data.Random.Distribution.Poisson
                        Data.Random.Distribution.Rayleigh
                        Data.Random.Distribution.T
                        Data.Random.Distribution.Triangular
                        Data.Random.Distribution.Uniform
                        Data.Random.Distribution.Weibull
                        Data.Random.Distribution.Ziggurat
                        Data.Random.Internal.Find
                        Data.Random.Internal.Fixed
                        Data.Random.Internal.TH
                        Data.Random.Lift
                        Data.Random.List
                        Data.Random.RVar
                        Data.Random.Sample
                        Data.Random.Vector
  if flag(base4_2)
    build-depends:      base >= 4.2 && <5
  else
    cpp-options:        -Dold_Fixed
    build-depends:      base >= 4 && <4.2
  
  if flag(mtl2)
    build-depends:      mtl == 2.*
    cpp-options:        -DMTL2
  else
    build-depends:      mtl == 1.*
  
  build-depends:        math-functions,
                        monad-loops >= 0.3.0.1,
                        random-shuffle,
                        random-source == 0.3.*,
                        rvar == 0.2.*,
                        syb,
                        template-haskell,
                        transformers,
                        vector >= 0.7,
                        logfloat >=0.12 && <0.13

  if os(Windows)
    cpp-options:        -Dwindows
    build-depends:      erf-native
  else
    build-depends:      erf
  
  if impl(ghc == 7.2.1)
    -- Doesn't work under GHC 7.2.1 due to
    -- http://hackage.haskell.org/trac/ghc/ticket/5410
    -- (7.2.2 is fine though, as long as random-source is new enough)
    Buildable:          False


package-hashes:
    MD5:edaf3dcdfe002d84858d41ee66471068
    SHA1:0b6277c039b7711fd469b969140bcf23f3a0daf4
    SHA256:2f5def57bf836f2e828d102affe13111c7bb01f85eb9fe9c03cfcbfbb548d111
    SHA512:8d299bcace528b399803c4667b6bd8b5b1ec65dbea810e1663ef81ccc92a3208839539a2cfe8fad84d4ec02bb01b78e9a2ddbcf9031994211316c0d2381ba3e4
    Skein512_512:7f8967c41014d12aca7dc525ffb408984705bd02a5c9092a6c10b67a6d3c8bd6ee5ebaa314916e3e59d9fcba7abd55e588c8f089c5bfcdbedc3cb5a43c9599ee

package-locations:
    https://hackage.haskell.org/package/random-fu-0.2.6.1/random-fu-0.2.6.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/random-fu-0.2.6.1.tar.gz

