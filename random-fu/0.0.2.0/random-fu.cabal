-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:12a04c3067198dc8ddd69e908bc35ac0
    SHA1:56b1cfec09639505e1c92e13aec4e695273184a6
    SHA256:eceeb385bb3e99a09c4e7d94530d5c1275c6ce5ff3f7496f96f07bb25041e637
    SHA512:b123fce4a671f06b34afd7b0b169be509ffef75cf658c67da1b93ff0dc1ef8dc8873a057c9e9b0b99059b9c0b77ae599dace0af1b7999272d054cebf15b556c2
    Skein512_512:cde145a9be5f8840f4bfb197d7a51c8e82569b0e5ea997c0492948c004ee4f1cb50c90f1ecc622cf2b7b405cc099e7b0493a342c86e487ca12f1d5df5dacc8c2

package-locations:
    https://hackage.haskell.org/package/random-fu-0.0.2.0/random-fu-0.0.2.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/random-fu-0.0.2.0.tar.gz

package-size: 19799
-- END Added by all-cabal-hashes-tool

name:                   random-fu
version:                0.0.2.0
stability:              experimental

cabal-version:          >= 1.2
build-type:             Simple

author:                 James Cook <james.cook@usma.edu>
maintainer:             James Cook <james.cook@usma.edu>
license:                PublicDomain
homepage:               http://code.haskell.org/~mokus/random-fu

category:               Math
synopsis:               Random number generation
description:            Random number generation based on orthogonal typeclasses
                        for entropy sources and random variable distributions, all
                        served up on a monadic platter.  Aspires to be useful
                        in an idiomatic way in both \"pure\" and \"impure\" styles,
                        as well as reasonably fast.  May not yet meet the latter
                        goal, but I think the former is starting to shape up
                        nicely.

Flag base4

Library
  hs-source-dirs:       src
  exposed-modules:      Data.Random
                        Data.Random.Distribution
                        Data.Random.Distribution.Bernoulli
                        Data.Random.Distribution.Beta
                        Data.Random.Distribution.Binomial
                        Data.Random.Distribution.Exponential
                        Data.Random.Distribution.Discrete
                        Data.Random.Distribution.Gamma
                        Data.Random.Distribution.Normal
                        Data.Random.Distribution.Ziggurat
                        Data.Random.Distribution.Poisson
                        Data.Random.Distribution.Rayleigh
                        Data.Random.Distribution.Triangular
                        Data.Random.Distribution.Uniform
                        Data.Random.Internal.Find
                        Data.Random.Internal.TH
                        Data.Random.Internal.Words
                        Data.Random.List
                        Data.Random.Lift
                        Data.Random.RVar
                        Data.Random.Sample
                        Data.Random.Source
                        Data.Random.Source.DevRandom
                        Data.Random.Source.StdGen
                        Data.Random.Source.PureMT
                        Data.Random.Source.Std
  if flag(base4)
    build-depends:      base >= 4,
                        syb
  else
    build-depends:      base >= 3 && < 4
    
  build-depends:        array,
                        containers,
                        mersenne-random-pure64,
                        monad-loops >= 0.3.0.1,
                        mtl,
                        random,
                        stateref,
                        storablevector,
                        template-haskell
