-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:6e775a20f0969fe085599b6caf214e10
    SHA1:f1dc7a23cca19d4a55659b3d02e361ceac09c25d
    SHA256:23c4708e4d64223f4770066142c7fd60b0cfe008649cffd5985adc7457b94269
    SHA512:b22cc3ca151879ae6f8ea21f2594eca4754b72c800fcff825a5fbee9fdaf4dbc549eaa20c1af5625908321c9b5b063dca73962b32a5c31ab4662f6b56ac8efc4
    Skein512_512:9fbfd783f542eb669042faab22ba145017c930d12824f2bf3e135f3b04ab735a8524007f0d01b5ce5822904124c526e25396b841fda1824789e327945d1d442d

package-locations:
    https://hackage.haskell.org/package/hflags-0.1.1/hflags-0.1.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/hflags-0.1.1.tar.gz

package-size: 10486
-- END Added by all-cabal-hashes-tool

name: hflags
version: 0.1.1
license: OtherLicense
license-file: COPYING
author: Mihaly Barasz <klao@google.com>, Gergely Risko <errge@google.com>
maintainer: Gergely Risko <errge@google.com>
build-type: Simple
cabal-version: >= 1.6
category: Console
stability: provisional
homepage: http://github.com/errge/hflags
bug-reports: mailto:errge@google.com

synopsis: Command line flag parser, very similar to Google's gflags
description:
  The @HFlags@ library supports easy definition of command line flags,
  reimplementing the ideas from Google's @gflags@
  (<http://code.google.com/p/gflags>).
  .
  Command line flags can be declared in any file at the toplevel,
  using 'defineFlag'.  At runtime, the actual values are assigned to
  the toplevel @flags_name@ constants.  Those can be used purely
  throughout the program.
  .
  At the beginning of the @main@ function, @$(initHFlags "program
  description")@ has to be called to initialize the flags.  All flags
  will be initialized that are transitively reachable via imports from
  @main@.  This means, that any Haskell package can easily define
  command line flags with @HFlags@.  This feature is demonstrated by
  <http://github.com/errge/hflags/blob/master/examples/ImportExample.hs>.
  .
  A simple example (more in the
  <http://github.com/errge/hflags/tree/master/examples> directory):
  .
  @
  \#!\/usr\/bin\/env runhaskell
  .
  &#x7b;-\# LANGUAGE TemplateHaskell \#-&#x7d;
  .
  import HFlags
  .
  'defineFlag' \"name\" \"Indiana Jones\" \"Who to greet.\"
  'defineFlag' \"r:repeat\" (3 + 4 :: Int) \"Number of times to repeat the message.\"
  .
  main = do s <- $(initHFlags \"Simple program v0.1\")
  &#x20;         sequence_ $ replicate flags_repeat greet
  &#x20; where
  &#x20;   greet = putStrLn $ \"Hello \" ++ flags_name ++ \", very nice to meet you!\"
  @
  .
  At @initHFlags@ time, the library also tries to gather flags out of
  environment variables.  @HFLAGS_verbose=True@ is equivalent to
  specify --verbose=True.  This environment feature only works with
  long options and the user has to specify a value even for Bools.

extra-source-files:
  examples/ComplexExample.hs
  examples/ImportExample.hs
  examples/SimpleExample.hs
  examples/X/B.hs
  examples/X/Y_Y/A.hs

source-repository head
  type: git
  location: http://github.com/errge/hflags

library
  ghc-options: -Wall

  build-depends:
      base >= 4.6 && < 5
    , containers >= 0.4
    , template-haskell >= 2.8
    , text >= 0.11

  exposed-modules:
    HFlags
