name: hflags
version: 0.1.2
license: OtherLicense
license-file: COPYING
author: Mihaly Barasz <klao@google.com>, Gergely Risko <gergely@risko.hu>
maintainer: Gergely Risko <gergely@risko.hu>
build-type: Simple
cabal-version: >= 1.6
category: Console
stability: provisional
homepage: http://github.com/errge/hflags
bug-reports: http://github.com/errge/hflags/issues

synopsis: Command line flag parser, very similar to Google's gflags
description:
  The @HFlags@ library supports easy definition of command line flags,
  reimplementing the ideas from Google's @gflags@
  (<http://code.google.com/p/gflags>).
  .
  Command line flags can be declared in any file at the toplevel,
  using 'defineFlag'.  At runtime, the actual values are assigned to
  the toplevel @flags_name@ constants.  Those can be used purely
  throughout the program.
  .
  At the beginning of the @main@ function, @$(initHFlags "program
  description")@ has to be called to initialize the flags.  All flags
  will be initialized that are transitively reachable via imports from
  @main@.  This means, that any Haskell package can easily define
  command line flags with @HFlags@.  This feature is demonstrated by
  <http://github.com/errge/hflags/blob/master/examples/ImportExample.hs>.
  .
  A simple example (more in the
  <http://github.com/errge/hflags/tree/master/examples> directory):
  .
  @
  \#!\/usr\/bin\/env runhaskell
  .
  &#x7b;-\# LANGUAGE TemplateHaskell \#-&#x7d;
  .
  import HFlags
  .
  'defineFlag' \"name\" \"Indiana Jones\" \"Who to greet.\"
  'defineFlag' \"r:repeat\" (3 + 4 :: Int) \"Number of times to repeat the message.\"
  .
  main = do s <- $(initHFlags \"Simple program v0.1\")
  &#x20;         sequence_ $ replicate flags_repeat greet
  &#x20;         putStrLn $ \"Your additional arguments were: \" ++ show s
  &#x20;         putStrLn $ \"Which is the same as: \" ++ show HFlags.arguments
  &#x20; where
  &#x20;   greet = putStrLn $ \"Hello \" ++ flags_name ++ \", very nice to meet you!\"
  @
  .
  At @initHFlags@ time, the library also tries to gather flags out of
  environment variables.  @HFLAGS_verbose=True@ is equivalent to
  specify --verbose=True.  This environment feature only works with
  long options and the user has to specify a value even for Bools.

extra-source-files:
  examples/ComplexExample.hs
  examples/ImportExample.hs
  examples/SimpleExample.hs
  examples/X/B.hs
  examples/X/Y_Y/A.hs

source-repository head
  type: git
  location: http://github.com/errge/hflags

library
  ghc-options: -Wall

  build-depends:
      base >= 4.6 && < 5
    , containers >= 0.4
    , template-haskell >= 2.8
    , text >= 0.11

  exposed-modules:
    HFlags


package-hashes:
    MD5:f61546ec928d6203746558f098db1fd0
    SHA1:fb511b8907c9c0bd3f8fb040a5f09b1520b87b6c
    SHA256:ac43c52bfef97623bacdedde86f16107023cfe99a65744d09f740a39d9a8c9f8
    SHA512:376ed7f77c92f965931ad39e71ab0ced8ff96e0f18a759034f45bf6e7f8048b4671391e20e09df9ba21084d10efe023a533123154baeb9c1c41a8ee0bf3379d2
    Skein512_512:d4f81a2f133990d593631fee68bb9c0f661b3f8e134bea90938c7f52c7a9ed63d41483de1e395fe54698fec103aa5fca179036a2fa87e3861b49ff445223e1bb

package-locations:
    https://hackage.haskell.org/package/hflags-0.1.2/hflags-0.1.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/hflags-0.1.2.tar.gz

package-size: 10882
