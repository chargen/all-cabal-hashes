-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:98f81b6a0c7ce47e0dacbd5224dae757
    SHA1:1ec7beab6f3cf4b3316d513e239ccfdd83f3fbc4
    SHA256:815ae613c0612c51570b0e7797490fdaa2ab0533320fed8c2f077ce5716ea011
    SHA512:dafb345452ef99063015b69c1c2517a534f06206fbb3d558096617ccb66fec4b8725ab068e493f55af5a006e04b404be4378e6fc9db89f0cb63a1cfa8b5575bd
    Skein512_512:b37331de00eeca8ecd20a4c0a8cddb4c0e4c358c77cac63e487156c05cd6109594fe713421bb51c6c6bf0489d1647d96347dec95e9e3724db456f3cb8c82275e

x-package-locations:
    https://hackage.haskell.org/package/ml-w-0.1.1/ml-w-0.1.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/ml-w-0.1.1.tar.gz

x-package-size: 6961
-- END Added by all-cabal-hashes-tool

name:                ml-w
version:             0.1.1
synopsis:            Minimal ML language to to demonstrate the W type
                     infererence algorithm.
author:              Francesco Mazzoli <f@mazzo.li>
maintainer:          Francesco Mazzoli <f@mazzo.li>
category:            Language, Type Inference
license:             PublicDomain
build-type:          Simple
cabal-version:       >= 1.6
tested-with:         GHC==6.12.3, GHC==7.0.4, GHC==7.2.2, GHC==7.4.1, Hugs
extra-source-files:  Makefile
description:
    .
    This package implements a minimal ML-like language to demonstrate how the W
    algorithm works.
    .
    The 'ML' module contains the definition of the language in the form of an
    Haskell data type, plus functions to parse files and pretty print the
    datatype.
    .
    The 'TypeInfer' module contains the W algorithm itself.
    .
    The 'Main' module contains a program that parses and typechecks programs
    reading from standard input.
    .
    The library and executable is compatible with GHC and Hugs (to use Hugs
    with cabal use the flag @--hugs@).

source-repository head
    type:            git
    location:        git://github.com/bitonic/ml-w.git

executable ML
    main-is:         Main.hs
    build-depends:   base < 5, mtl, parsec
    if impl(ghc)
       build-depends: pretty
    GHC-options:     -Wall

library
    build-depends:   base < 5, mtl, parsec
    if impl(ghc)
       build-depends: pretty
    GHC-Options:     -Wall
    exposed-modules: Language.ML,
                     Language.ML.Syntax,
                     Language.ML.TypeCheck
    other-modules:   Applicative
