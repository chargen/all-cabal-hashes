-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:3f031f5417dc7fa0a8ded74cdbecab4d
    SHA1:d62c851ab3786e26055586d914687e0ed942b0c3
    SHA256:2ef8f153428669eb268594f90bc35076b69f20751252ea653c2b6dca82c5c2c6
    SHA512:a89f019f2356ead051df70f432b4b0d3b02ddfe75fa0ec4d8b53b4556233086823cdecf1bbf4b7ca314f48073938624b394d2520dd9cd148c8a6a3dc634fbdbf
    Skein512_512:d20a05457b69b8e833a571d0b3cc585179d46598a7f7aa86dd600d0868c3ec6a8ffae6471e4e2f082c17105de70ea822fec7f67aeb0e3bd28aea0bf0b3716084

x-package-locations:
    https://hackage.haskell.org/package/rvar-0.2/rvar-0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/rvar-0.2.tar.gz

x-package-size: 3653
-- END Added by all-cabal-hashes-tool

name:                   rvar
version:                0.2
stability:              stable

cabal-version:          >= 1.6
build-type:             Simple

author:                 James Cook <james.cook@usma.edu>
maintainer:             James Cook <james.cook@usma.edu>
license:                PublicDomain
homepage:               https://github.com/mokus0/random-fu

category:               Math
synopsis:               Random Variables
description:            Random number generation based on modeling random 
                        variables by an abstract type ('RVar') which can be
                        composed and manipulated monadically and sampled in
                        either monadic or \"pure\" styles.
                        
                        The primary purpose of this library is to support 
                        defining and sampling a wide variety of high quality
                        random variables.  Quality is prioritized over speed,
                        but performance is an important goal too.
                        
                        In my testing, I have found it capable of speed 
                        comparable to other Haskell libraries, but still
                        a fair bit slower than straight C implementations of 
                        the same algorithms.

tested-with:            GHC == 6.8.3, GHC == 6.10.4, GHC == 6.12.1,
                        GHC == 6.12.3, GHC == 7.0.1, GHC == 7.0.2

source-repository head
  type:                 git
  location:             https://github.com/mokus0/random-fu.git
  subdir:               rvar

Flag mtl2
    Description:        mtl-2 has State, etc., as "type" rather than "newtype"

Library
  ghc-options:          -Wall
  hs-source-dirs:       src
  exposed-modules:      Data.RVar

  if flag(mtl2)
    build-depends:      mtl == 2.*
    cpp-options:        -DMTL2
  else
    build-depends:      mtl == 1.1.*
  
  build-depends:        base            >= 3 && <5,
                        MonadPrompt     == 1.0.*,
                        random-source   == 0.3.*,
                        transformers    == 0.2.*
