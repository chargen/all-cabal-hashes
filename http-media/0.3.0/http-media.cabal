-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:6680d86582ee97c62f3064d2dd5be276
    SHA1:f2d64b81013a64a484beb1ed9ce9a5c31cc7b0c6
    SHA256:b8c012dd3a57ff23694aeeecf8b560b9a116f34742e79078ca55a51b459a5915
    SHA512:0472673fcde6cf160c399debb90ee8033e467b72c6cebeaa7fe3a4f429207021f04fa734ff8d4c8173913f9ba64f992cdadd8f1f429933b467db47475c67b498
    Skein512_512:e91514e679fec76423ec9761154b555017648c5745bf41e04f557025b320cc73da8633abe47ef702e80b6303b3c85d9a4a8e3b3bc35663d5ffef9898197a8759

package-locations:
    https://hackage.haskell.org/package/http-media-0.3.0/http-media-0.3.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/http-media-0.3.0.tar.gz

package-size: 13536
-- END Added by all-cabal-hashes-tool

name:          http-media
version:       0.3.0
license:       MIT
license-file:  LICENSE
author:        Timothy Jones
maintainer:    Timothy Jones <git@zmthy.io>
homepage:      http://github.com/zmthy/http-media
bug-reports:   http://github.com/zmthy/http-media/issues
category:      Web
copyright:     (c) 2012-2014 Timothy Jones
build-type:    Simple
cabal-version: >= 1.10
synopsis:      Processing HTTP Content-Type and Accept headers
description:
  This library is intended to be a comprehensive solution to parsing and
  selecting quality-indexed values in HTTP headers. It is capable of parsing
  both media types and language parameters from the Accept and Content header
  families, and can be extended to match against other accept headers as well.
  Selecting the appropriate header value is achieved by comparing a list of
  server options against the quality-indexed values supplied by the client.
  .
  In the following example, the Accept header is parsed and then matched against
  a list of server options to serve the appropriate media using
  'mapAcceptMedia':
  .
  > getHeader >>= maybe send406Error sendResourceWith . mapAcceptMedia
  >     [ ("text/html",        asHtml)
  >     , ("application/json", asJson)
  >     ]
  .
  Similarly, the Content-Type header can be used to produce a parser for request
  bodies based on the given content type with 'mapContentMedia':
  .
  > getContentType >>= maybe send415Error readRequestBodyWith . mapContentMedia
  >     [ ("application/json", parseJson)
  >     , ("text/plain",       parseText)
  >     ]
  .
  The API is agnostic to your choice of server.


library
  hs-source-dirs: src

  ghc-options: -Wall

  default-language: Haskell2010
  default-extensions:
    OverloadedStrings

  exposed-modules:
    Network.HTTP.Media
    Network.HTTP.Media.Accept
    Network.HTTP.Media.MediaType
    Network.HTTP.Media.Language
  other-modules:
    Network.HTTP.Media.MediaType.Internal
    Network.HTTP.Media.Language.Internal
    Network.HTTP.Media.Quality
    Network.HTTP.Media.Utils
  build-depends:
    base        >= 4.6.0  && < 5.0,
    bytestring  >= 0.10.0 && < 0.11,
    containers  >= 0.5.0  && < 0.6,
    utf8-string >= 0.3.7  && < 0.4

test-suite test-http-media
  type:           detailed-0.9
  hs-source-dirs: src test

  default-language: Haskell2010
  default-extensions:
    OverloadedStrings

  test-module: Tests
  other-modules:
    Network.HTTP.Media
    Network.HTTP.Media.Accept
    Network.HTTP.Media.Accept.Tests
    Network.HTTP.Media.Gen
    Network.HTTP.Media.MediaType
    Network.HTTP.Media.MediaType.Gen
    Network.HTTP.Media.MediaType.Internal
    Network.HTTP.Media.MediaType.Tests
    Network.HTTP.Media.Language
    Network.HTTP.Media.Language.Gen
    Network.HTTP.Media.Language.Internal
    Network.HTTP.Media.Language.Tests
    Network.HTTP.Media.Quality
    Network.HTTP.Media.Tests
    Network.HTTP.Media.Utils

  ghc-options: -Wall -fhpc

  build-depends:
    base                  >= 4.6.0  && < 5.0,
    bytestring            >= 0.10.0 && < 0.11,
    Cabal                 >= 1.18.0 && < 1.21,
    cabal-test-quickcheck >= 0.1.0  && < 0.2,
    containers            >= 0.5.0  && < 0.6,
    QuickCheck            >= 2.6    && < 2.9,
    utf8-string           >= 0.3.7  && < 0.4

source-repository head
  type:     git
  location: git://github.com/zmthy/http-media.git

