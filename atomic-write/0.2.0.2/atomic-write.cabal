-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:4096f9af9de47723a8f85fb2d84c0aa5
    SHA1:aa1f25d81eb9cd49e4d9c9b7b724df6b0b6bcf95
    SHA256:2cb1d6638e0fcdfb768431bc55da3eeec5ecfb48ce773d927da3391e66460041
    SHA512:a4d8cacb5a6cb0ad0679985f506572a0bc7cda8cc2ce37d6b798f452323a6716fadbe35f6af09a5f2ffb847db3a435485dbf4df437857e1dccc778acda29db5a
    Skein512_512:4d4bf353fb8388a5b494f4245ddf80b9cc69e9aea11a99046d0b57fecfc62088115b169bc0b2561425288d926c36b9419418e4f4f8b51043015847ae3c5166cc

package-locations:
    https://hackage.haskell.org/package/atomic-write-0.2.0.2/atomic-write-0.2.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/atomic-write-0.2.0.2.tar.gz

package-size: 3291
-- END Added by all-cabal-hashes-tool

name:                atomic-write
version:             0.2.0.2
synopsis:            Atomically write to a file

description:
  .
  Atomically write to a file on POSIX-compliant systems while preserving
  permissions.
  .
  On most Unix systems, `mv` is an atomic operation. This makes it simple to write
  to a file atomically just by using the mv operation. However, this will
  destroy the permissions on the original file. This library does the following
  to preserve permissions while atomically writing to a file:
  .
  * If an original file exists, take those permissions and apply them to the
    temp file before `mv`ing the file into place.
  .
  * If the original file does not exist, create a following with default
    permissions (based on the currently-active umask).
  .
  This way, when the file is `mv`'ed into place, the permissions will be the ones
  held by the original file.
  .
  This library is based on similar implementations found in common libraries in
  Ruby and Python:
  .
  * <http://apidock.com/rails/File/atomic_write/class Ruby on Rails includes a similar method called atomic_write>
  .
  * <https://github.com/chef/chef/blob/c4631816132fcfefaba3d123a1d0dfe8bc2866bb/lib/chef/file_content_management/deploy/mv_unix.rb#L23:L71 Chef includes atomic update functionality>
  .
  * <https://github.com/sashka/atomicfile There is a python library for atomically updating a file>
  .
  To use `atomic-write`, import the module corresponding to the type you wish to
  write atomically, e.g., to write a (strict) ByteString atomically:
  .
  > import System.AtomicWrite.Writer.ByteString
  .
  Then you can use the atomicWrite function that accepts a `FilePath` and a
  `ByteString`, e.g.:
  .
  > atomicWrite myFilePath myByteString
license:             MIT
license-file:        LICENSE
author:              Justin Leitgeb
maintainer:          justin@stackbuilders.com
copyright:           2015 Stack Builders Inc.
category:            System
build-type:          Simple
cabal-version:       >=1.10
bug-reports:         https://github.com/stackbuilders/atomic-write/issues

library
  exposed-modules:       System.AtomicWrite.Writer.ByteString
                       , System.AtomicWrite.Writer.ByteStringBuilder
                       , System.AtomicWrite.Writer.LazyByteString
                       , System.AtomicWrite.Writer.String
                       , System.AtomicWrite.Writer.Text

  other-modules:       System.AtomicWrite.Internal

  build-depends:         base >=4.5 && <4.8
                       , temporary
                       , unix-compat
                       , directory
                       , filepath
                       , text
                       , bytestring >= 0.10.4

  hs-source-dirs:      src
  default-language:    Haskell2010
  ghc-options:         -Wall

test-suite atomic-write-test
  type: exitcode-stdio-1.0
  hs-source-dirs: spec, src
  main-is: Spec.hs

  build-depends:       base >=4.5 && <4.8
                     , temporary
                     , unix-compat
                     , directory
                     , filepath
                     , text
                     , bytestring >= 0.10.4

                     , hspec

  default-language:    Haskell2010
  ghc-options:         -Wall


source-repository head
  type:     git
  location: https://github.com/stackbuilders/atomic-write
