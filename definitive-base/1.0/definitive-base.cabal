name:          definitive-base
version:       1.0

synopsis:      The base modules of the Definitive framework.
description:     The Definitive framework is an attempt at harnessing the declarative
  nature of Haskell to provide a solid and simple base for writing 
  real-world programs, as well as complex algorithms.
  
  This package contains the base modules of the framework, and provides
  only the most basic functionality, ranging from basic algebraic
  structures, such as monoids and rings, to functors, applicative functors,
  monads and transformers.
  
  Lenses are used heavily in all the framework's abstractions, replacing
  more traditional functions ('WriterT' and 'runWriterT' are implemented
  in the same isomorphism 'writerT', for example). When used wisely,
  lenses can greatly improve clarity in both code and thought, so I
  tried to provide for them in the most ubiquitous way possible,
  defining them as soon as possible. Isomorphisms in particular are
  surprisingly useful in many instances, from converting between types
  to acting on a value's representation as if it were the value itself.
  
  Packages using the Definitive framework should be compiled with the 
  RebindableSyntax flag and include the Algebra module, which exports
  the same interface as the Prelude, except for some extras.
  
  Here is a list of design differences between the standard Prelude
  and the Definitive framework :
  
    - The '+', '-', 'negate', and '*' are now part of the Semigroup,
      Disjonctive, Negative, Semiring classes instead of Num (default
      instances are defined to reimplement the Prelude, making it easy
      to adjust your code for compatibility) 
    
    - The mapM, traverseM, liftM, and such functions have been hidden,
      since they only reimplement the traverse, map, and other simpler
      functions.
  
    - Lenses are used whenever possible instead of more usual functions.
      You are encouraged to read the interface for the Algebra.Lens
      module, which contains everything you will need to be able to use
      lenses to their full potential (except maybe a good explanation).
  
      
author:        Marc Coiffier
maintainer:    marc.coiffier@gmail.com
license:       OtherLicense
license-file:  LICENSE

build-type:    Simple
cabal-version: >=1.10

library
  exposed-modules: Algebra Algebra.Arrow Algebra.Core Algebra.Classes Algebra.Monad Algebra.Monad.Base Algebra.Applicative Algebra.Functor Algebra.Foldable Algebra.Traversable Algebra.Lens Algebra.Monad.RWS Algebra.Monad.State Algebra.Monad.Reader Algebra.Monad.Writer Algebra.Monad.Cont Algebra.Monad.Foldable Algebra.Monad.Error Data.Containers Algebra.Time Data.TimeVal Data.Containers.Sequence Data.Probability Data.Reactive
  build-depends: base (== 4.6.*), containers (== 0.5.*), deepseq (== 1.3.*), array (== 0.5.*), bytestring (== 0.10.*), clock (== 0.4.*), vector (== 0.10.*), primitive (== 0.5.*)
  default-extensions: TypeSynonymInstances NoMonomorphismRestriction StandaloneDeriving GeneralizedNewtypeDeriving TypeOperators RebindableSyntax FlexibleInstances FlexibleContexts FunctionalDependencies TupleSections MultiParamTypeClasses Rank2Types
  ghc-options: -Wall -fno-warn-orphans -threaded
  default-language: Haskell2010


package-hashes:
    MD5:07915f9978233b9239da432499e946fa
    SHA1:d880956d8cba732a22dffd3323c28299b62ba4a7
    SHA256:4788d3e79d09cb39eb6114d909a74844a8f196452a5583db195062a3ac0d5fd6
    SHA512:db701c67ea596123472efbb622d3cb454fb83bf62c249d9120e0c3eb44b73b9a1a0cbbac83cdab0f81adf58d49928223dc241d3ac6f4903f9e4f58d9dd1d0551
    Skein512_512:98de7aa73d4e8a96c2355f391de8354dd98b5e66f4b7b09441494966e5757c4a4226108d34eeb3b6b01ddcf340869f0da4d9ec329dcf0c2e238c64d8f407f0a0

package-locations:
    https://hackage.haskell.org/package/definitive-base-1.0/definitive-base-1.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/definitive-base-1.0.tar.gz

package-size: 28638
