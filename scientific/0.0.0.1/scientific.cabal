-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:b4d51e20058a959cb5db88c03816f9ae
    SHA1:5a797613cbf2becf22490f070e549f0fac1e86e1
    SHA256:7fbbf90aec2c039090a81120d386b1f3a1fbb6cdfef36035efcfc1bdb96e58db
    SHA512:de9954c049d71768ab88722a984edef58c8195794bddae7bf253b6e97640684cbd7922a85bfa9ddf67458991aebf9f5226a4a6ae8d06f4fb8ed2be724c9cc9ec
    Skein512_512:89c47a99063c04ea1362b4c3d39baeb47d70f9c262437d21db8a752c06badde592ad5ec567282aa39c754349b76a1366fad2cc8fcf11bf0e1619263b0c29a071

package-locations:
    https://hackage.haskell.org/package/scientific-0.0.0.1/scientific-0.0.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/scientific-0.0.0.1.tar.gz

package-size: 8824
-- END Added by all-cabal-hashes-tool

name:                scientific
version:             0.0.0.1
synopsis:            Arbitrary-precision floating-point numbers represented using scientific notation
description:         A @Scientific@ number is an arbitrary-precision floating-point number
                     represented using scientific notation.
                     .
                     A scientific number with 'coefficient' @c@ and
                     'base10Exponent' @e@ corresponds to the
                     'Fractional' number: @'fromInteger' c * 10 '^^' e@
                     .
                     Its primary use-case is to serve as the target of
                     parsing floating point numbers. Since the textual
                     representation of floating point numbers use
                     scientific notation they can be efficiently
                     parsed to a @Scientific@ number.
homepage:            https://github.com/basvandijk/scientific
bug-reports:         https://github.com/basvandijk/scientific/issues
license:             BSD3
license-file:        LICENSE
author:              Bas van Dijk
maintainer:          Bas van Dijk <v.dijk.bas@gmail.com>
category:            Data
build-type:          Simple
cabal-version:       >=1.10

source-repository head
  type:     git
  location: git://github.com/basvandijk/scientific.git

library
  exposed-modules:     Data.Scientific
  other-extensions:    DeriveDataTypeable, BangPatterns
  ghc-options:         -Wall
  build-depends:       base     >= 4.6   && < 4.7
                     , deepseq  >= 1.3   && < 1.4
                     , text     >= 0.8   && < 0.12
                     , hashable >= 1.1.2 && < 1.3
  hs-source-dirs:      src
  default-language:    Haskell2010

test-suite test-scientific
  type:             exitcode-stdio-1.0
  hs-source-dirs:   test
  main-is:          test.hs
  default-language: Haskell2010
  ghc-options:      -Wall

  build-depends: scientific
               , base             >= 4.6   && < 4.7
               , tasty            >= 0.3.1 && < 0.4
               , tasty-smallcheck >= 0.2   && < 0.3
               , smallcheck       >= 1.0   && < 1.1
               , text             >= 0.8   && < 0.12

benchmark bench-scientific
  type:             exitcode-stdio-1.0
  hs-source-dirs:   bench
  main-is:          bench.hs
  default-language: Haskell2010
  ghc-options:      -O2
  build-depends:    scientific
                  , base       >= 4.6 && < 4.7
                  , criterion  >= 0.5 && < 0.9
