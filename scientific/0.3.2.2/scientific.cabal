name:                scientific
version:             0.3.2.2
synopsis:            Numbers represented using scientific notation
description:
  @Data.Scientific@ provides a space efficient and arbitrary precision
  scientific number type.
  .
  'Scientific' numbers are represented using
  <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>. It
  uses a coefficient @c :: 'Integer'@ and a base-10 exponent @e :: 'Int'@ (do
  note that since we're using an 'Int' to represent the exponent these numbers
  aren't truly arbitrary precision). A scientific number corresponds to the
  'Fractional' number: @'fromInteger' c * 10 '^^' e@.
  .
  The main application of 'Scientific' is to be used as the target of parsing
  arbitrary precision numbers coming from an untrusted source. The advantages
  over using 'Rational' for this are that:
  .
  * A 'Scientific' is more efficient to construct. Rational numbers need to be
  constructed using '%' which has to compute the 'gcd' of the 'numerator' and
  'denominator'.
  .
  * 'Scientific' is safe against numbers with huge exponents. For example:
  @1e1000000000 :: 'Rational'@ will fill up all space and crash your
  program. Scientific works as expected:
  .
   > > read "1e1000000000" :: Scientific
   > 1.0e1000000000
  .
  * Also, the space usage of converting scientific numbers with huge exponents to
  @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
  will always be bounded by the target type.

homepage:            https://github.com/basvandijk/scientific
bug-reports:         https://github.com/basvandijk/scientific/issues
license:             BSD3
license-file:        LICENSE
author:              Bas van Dijk
maintainer:          Bas van Dijk <v.dijk.bas@gmail.com>
category:            Data
build-type:          Simple
cabal-version:       >=1.10

extra-source-files:
  changelog

source-repository head
  type:     git
  location: git://github.com/basvandijk/scientific.git

flag bytestring-builder
  description: Provide the Data.ByteString.Builder.Scientific module
               (requires bytestring >= 0.10)
  default:     True
  manual:      True

flag integer-simple
  description: Use the integer-simple package instead of integer-gmp
  default:     False

library
  exposed-modules:     Data.Scientific
                       Data.Text.Lazy.Builder.Scientific
  other-modules:       Math.NumberTheory.Logarithms
  other-extensions:    DeriveDataTypeable, BangPatterns
  ghc-options:         -Wall
  build-depends:       base        >= 4.3   && < 4.8
                     , ghc-prim
                     , deepseq     >= 1.3   && < 1.4
                     , text        >= 0.8   && < 1.3
                     , hashable    >= 1.1.2 && < 1.3
                     , array       >= 0.1   && < 0.6

  if flag(integer-simple)
      build-depends: integer-simple
      CPP-options: -DINTEGER_SIMPLE
  else
      build-depends: integer-gmp

  hs-source-dirs:      src
  default-language:    Haskell2010

  if flag(bytestring-builder)
    exposed-modules:   Data.ByteString.Builder.Scientific
    build-depends:     bytestring  >= 0.10  && < 0.11

test-suite test-scientific
  type:             exitcode-stdio-1.0
  hs-source-dirs:   test
  main-is:          test.hs
  default-language: Haskell2010
  ghc-options:      -Wall

  build-depends: scientific
               , base             >= 4.3   && < 4.8
               , tasty            >= 0.5   && < 0.9
               , tasty-ant-xml    >= 1.0   && < 1.1
               , tasty-smallcheck >= 0.2   && < 0.9
               , tasty-quickcheck >= 0.8   && < 0.9
               , smallcheck       >= 1.0   && < 1.2
               , QuickCheck       >= 2.5   && < 2.8
               , text             >= 0.8   && < 1.3
               , bytestring       >= 0.10  && < 0.11

benchmark bench-scientific
  type:             exitcode-stdio-1.0
  hs-source-dirs:   bench src
  main-is:          bench.hs
  default-language: Haskell2010
  ghc-options:      -O2
  build-depends:    base       >= 4.3 && < 4.8
                  , criterion  >= 0.5 && < 0.12
                  , ghc-prim
                  , deepseq     >= 1.3   && < 1.4
                  , text        >= 0.8   && < 1.3
                  , bytestring  >= 0.10  && < 0.11
                  , hashable    >= 1.1.2 && < 1.3
                  , array       >= 0.1   && < 0.6

  if flag(integer-simple)
      build-depends: integer-simple
  else
      build-depends: integer-gmp


package-hashes:
    MD5:0952fd2c1e3ec1bb2c0840f1bd1a63e6
    SHA1:7986a2b2431f177e00c74f25062871e22b6ab2e2
    SHA256:5744be48e470130c614b0c2f63839d8349c413d5f372c0aee765ee20bc744b5e
    SHA512:a19f4fbe2b780b12e7953e71b9ef6e03ef8f32c76578dd95e29d7b044dc827d14d19fa5a107fab11249769e9294077fd2899b9d6ef7c72808e5d165a3aadd6c3
    Skein512_512:08db0916ab5bfc5b62f3632527ebc887a4f0e9c865cf58de50f9c11aef982a7a675d2b33b97b5c957e61dc135c25f27de9bd69842d3d45b5bd15a74e191615e0

package-locations:
    https://hackage.haskell.org/package/scientific-0.3.2.2/scientific-0.3.2.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/scientific-0.3.2.2.tar.gz

package-size: 16220
