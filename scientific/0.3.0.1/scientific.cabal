-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:56f5671d7d1936631927cb11f46c352b
    SHA1:7921512d1dfab61c257dac583e2f1495ed6cad4f
    SHA256:fddae11fc42c39e655d3059176e343fa128c8ac9a21c91f2cae4deafc842f714
    SHA512:b261a80f83715cc22a1e92ee59d24c2b5a15f2ae3402fa082b733945bc01a1ca27a3843da9f62332347317b47e9ca0d48374b21041411d8266170d6dbbd4fd77
    Skein512_512:08c80da0a1f74ebfb9ef47da59e06dd984426d8bc5e1ff319155aa53d735ac6f186690366b746c0a86687c1ed4853f136e0e5d6a155f045e2b9e7e4ce786c989

package-locations:
    https://hackage.haskell.org/package/scientific-0.3.0.1/scientific-0.3.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/scientific-0.3.0.1.tar.gz

package-size: 12263
-- END Added by all-cabal-hashes-tool

name:                scientific
version:             0.3.0.1
synopsis:            Numbers represented using scientific notation
description:
  @Data.Scientific@ provides a space efficient and arbitrary precision
  scientific number type.
  .
  'Scientific' numbers are represented using
  <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>. It
  uses a coefficient @c :: 'Integer'@ and a base-10 exponent @e :: 'Int'@ (do
  note that since we're using an 'Int' to represent the exponent these numbers
  aren't truly arbitrary precision). A scientific number corresponds to the
  'Fractional' number: @'fromInteger' c * 10 '^^' e@.
  .
  The main application of 'Scientific' is to be used as the target of parsing
  arbitrary precision numbers coming from an untrusted source. The advantages
  over using 'Rational' for this are that:
  .
  * A 'Scientific' is more efficient to construct. Rational numbers need to be
  constructed using '%' which has to compute the 'gcd' of the 'numerator' and
  'denominator'. Scientific numbers only need to be normalized, i.e. @10000000@
  to @1e7@.
  .
  * 'Scientific' is safe against numbers with huge exponents. For example:
  @1e1000000000 :: 'Rational'@ will fill up all space and crash your
  program. Scientific works as expected:
  .
   > > read "1e1000000000" :: Scientific
   > 1.0e1000000000
  .
  * Also, the space usage of converting scientific numbers with huge exponents to
  @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
  will always be bounded by the target type.

homepage:            https://github.com/basvandijk/scientific
bug-reports:         https://github.com/basvandijk/scientific/issues
license:             BSD3
license-file:        LICENSE
author:              Bas van Dijk
maintainer:          Bas van Dijk <v.dijk.bas@gmail.com>
category:            Data
build-type:          Simple
cabal-version:       >=1.10

source-repository head
  type:     git
  location: git://github.com/basvandijk/scientific.git

library
  exposed-modules:     Data.Scientific
                       Data.Text.Lazy.Builder.Scientific
                       Data.ByteString.Builder.Scientific
  other-extensions:    DeriveDataTypeable, BangPatterns
  ghc-options:         -Wall
  build-depends:       base       >= 4.3   && < 4.8
                     , deepseq    >= 1.3   && < 1.4
                     , text       >= 0.8   && < 1.3
                     , bytestring >= 0.10  && < 0.11
                     , hashable   >= 1.1.2 && < 1.3
                     , arithmoi   >= 0.4.1 && < 0.5
                     , array      >= 0.1   && < 0.6
  hs-source-dirs:      src
  default-language:    Haskell2010

test-suite test-scientific
  type:             exitcode-stdio-1.0
  hs-source-dirs:   test
  main-is:          test.hs
  default-language: Haskell2010
  ghc-options:      -Wall

  build-depends: scientific
               , base             >= 4.3   && < 4.8
               , tasty            >= 0.3.1 && < 0.9
               , tasty-smallcheck >= 0.2   && < 0.9
               , tasty-quickcheck >= 0.8   && < 0.9
               , smallcheck       >= 1.0   && < 1.2
               , QuickCheck       >= 2.7   && < 2.8
               , text             >= 0.8   && < 1.3
               , bytestring       >= 0.10  && < 0.11

benchmark bench-scientific
  type:             exitcode-stdio-1.0
  hs-source-dirs:   bench
  main-is:          bench.hs
  default-language: Haskell2010
  ghc-options:      -O2
  build-depends:    scientific
                  , base       >= 4.3 && < 4.8
                  , criterion  >= 0.5 && < 0.12
