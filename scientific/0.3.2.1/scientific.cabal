-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:dedca94b466b79310425c4b3bbda0c7b
    SHA1:1fcbae9c5b7af9725a3c2e80db8abee2d1de4694
    SHA256:1a21fa97d2d7759409d406242ff1033bda521400d42342dfd543995d7103137c
    SHA512:0c9f8ed159b7651d76aa9e4d5c19365fb2b786e607ca08a6c7cb93cfbb889922d22b7758fd0850452c9ac7342dc30e9120cb1957fed1f92ee43e756bde885c85
    Skein512_512:97f81fbaddf2169841a1bdb54ce678f56ea395bd70ff3db1deadf0f5b6be3707ee51faf802220c8c94972161d0b3c5e3639e65b60e846a3047114986509c0cb5

x-package-locations:
    https://hackage.haskell.org/package/scientific-0.3.2.1/scientific-0.3.2.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/scientific-0.3.2.1.tar.gz

x-package-size: 15962
-- END Added by all-cabal-hashes-tool

name:                scientific
version:             0.3.2.1
synopsis:            Numbers represented using scientific notation
description:
  @Data.Scientific@ provides a space efficient and arbitrary precision
  scientific number type.
  .
  'Scientific' numbers are represented using
  <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>. It
  uses a coefficient @c :: 'Integer'@ and a base-10 exponent @e :: 'Int'@ (do
  note that since we're using an 'Int' to represent the exponent these numbers
  aren't truly arbitrary precision). A scientific number corresponds to the
  'Fractional' number: @'fromInteger' c * 10 '^^' e@.
  .
  The main application of 'Scientific' is to be used as the target of parsing
  arbitrary precision numbers coming from an untrusted source. The advantages
  over using 'Rational' for this are that:
  .
  * A 'Scientific' is more efficient to construct. Rational numbers need to be
  constructed using '%' which has to compute the 'gcd' of the 'numerator' and
  'denominator'.
  .
  * 'Scientific' is safe against numbers with huge exponents. For example:
  @1e1000000000 :: 'Rational'@ will fill up all space and crash your
  program. Scientific works as expected:
  .
   > > read "1e1000000000" :: Scientific
   > 1.0e1000000000
  .
  * Also, the space usage of converting scientific numbers with huge exponents to
  @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
  will always be bounded by the target type.

homepage:            https://github.com/basvandijk/scientific
bug-reports:         https://github.com/basvandijk/scientific/issues
license:             BSD3
license-file:        LICENSE
author:              Bas van Dijk
maintainer:          Bas van Dijk <v.dijk.bas@gmail.com>
category:            Data
build-type:          Simple
cabal-version:       >=1.10

extra-source-files:
  changelog

source-repository head
  type:     git
  location: git://github.com/basvandijk/scientific.git

flag bytestring-builder
  description: Provide the Data.ByteString.Builder.Scientific module
               (requires bytestring >= 0.10)
  default:     True
  manual:      True

library
  exposed-modules:     Data.Scientific
                       Data.Text.Lazy.Builder.Scientific
  other-modules:       Math.NumberTheory.Logarithms
  other-extensions:    DeriveDataTypeable, BangPatterns
  ghc-options:         -Wall
  build-depends:       base        >= 4.3   && < 4.8
                     , ghc-prim
                     , integer-gmp
                     , deepseq     >= 1.3   && < 1.4
                     , text        >= 0.8   && < 1.3
                     , hashable    >= 1.1.2 && < 1.3
                     , array       >= 0.1   && < 0.6
  hs-source-dirs:      src
  default-language:    Haskell2010

  if flag(bytestring-builder)
    exposed-modules:   Data.ByteString.Builder.Scientific
    build-depends:     bytestring  >= 0.10  && < 0.11

test-suite test-scientific
  type:             exitcode-stdio-1.0
  hs-source-dirs:   test
  main-is:          test.hs
  default-language: Haskell2010
  ghc-options:      -Wall

  build-depends: scientific
               , base             >= 4.3   && < 4.8
               , tasty            >= 0.5   && < 0.9
               , tasty-ant-xml    >= 1.0   && < 1.1
               , tasty-smallcheck >= 0.2   && < 0.9
               , tasty-quickcheck >= 0.8   && < 0.9
               , smallcheck       >= 1.0   && < 1.2
               , QuickCheck       >= 2.5   && < 2.8
               , text             >= 0.8   && < 1.3
               , bytestring       >= 0.10  && < 0.11

benchmark bench-scientific
  type:             exitcode-stdio-1.0
  hs-source-dirs:   bench src
  main-is:          bench.hs
  default-language: Haskell2010
  ghc-options:      -O2
  build-depends:    base       >= 4.3 && < 4.8
                  , criterion  >= 0.5 && < 0.12
                  , ghc-prim
                  , integer-gmp
                  , deepseq     >= 1.3   && < 1.4
                  , text        >= 0.8   && < 1.3
                  , bytestring  >= 0.10  && < 0.11
                  , hashable    >= 1.1.2 && < 1.3
                  , array       >= 0.1   && < 0.6
