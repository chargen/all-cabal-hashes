-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:d160c9827a0deb1fef07d70a92a772d8
    SHA1:be55c03ba049c5183bf9a5bbb6f1d9ddc77e98c3
    SHA256:37f320000253138476d217bd08a326262e7b449fd848c296e41e5f82906e9d77
    SHA512:bff2cb2f91ad5153588d5b6c07ec5e02438cdb582a72bfbd10504f2b53f3e2975e16bbe6b2d69dc8943916bc016f3e7e2dc94a17a34afe28577a32b799072d8b
    Skein512_512:4f14f94c902fcdfeaec517521abc464636c8267970726c5a9b93dff665e31ae1b8fa428e199e6db29da3696572c1bc8620de56f2c0a5a75426b9835da255740a

x-package-locations:
    https://hackage.haskell.org/package/scientific-0.2.0.1/scientific-0.2.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/scientific-0.2.0.1.tar.gz

x-package-size: 8484
-- END Added by all-cabal-hashes-tool

name:                scientific
version:             0.2.0.1
synopsis:            Arbitrary-precision floating-point numbers represented using scientific notation
description:         A @Scientific@ number is an arbitrary-precision floating-point number
                     represented using scientific notation.
                     .
                     A scientific number with 'coefficient' @c@ and
                     'base10Exponent' @e@ corresponds to the
                     'Fractional' number: @'fromInteger' c * 10 '^^' e@
                     .
                     Its primary use-case is to serve as the target of
                     parsing floating point numbers. Since the textual
                     representation of floating point numbers use
                     scientific notation they can be efficiently
                     parsed to a @Scientific@ number.
homepage:            https://github.com/basvandijk/scientific
bug-reports:         https://github.com/basvandijk/scientific/issues
license:             BSD3
license-file:        LICENSE
author:              Bas van Dijk
maintainer:          Bas van Dijk <v.dijk.bas@gmail.com>
category:            Data
build-type:          Simple
cabal-version:       >=1.10

source-repository head
  type:     git
  location: git://github.com/basvandijk/scientific.git

library
  exposed-modules:     Data.Scientific
  other-extensions:    DeriveDataTypeable, BangPatterns
  ghc-options:         -Wall
  build-depends:       base     >= 4.3   && < 4.8
                     , deepseq  >= 1.3   && < 1.4
                     , text     >= 0.8   && < 1.2
                     , hashable >= 1.1.2 && < 1.3
  hs-source-dirs:      src
  default-language:    Haskell2010

test-suite test-scientific
  type:             exitcode-stdio-1.0
  hs-source-dirs:   test
  main-is:          test.hs
  default-language: Haskell2010
  ghc-options:      -Wall

  build-depends: scientific
               , base             >= 4.3   && < 4.8
               , tasty            >= 0.3.1 && < 0.8
               , tasty-smallcheck >= 0.2   && < 0.3
               , smallcheck       >= 1.0   && < 1.2
               , text             >= 0.8   && < 1.2

benchmark bench-scientific
  type:             exitcode-stdio-1.0
  hs-source-dirs:   bench
  main-is:          bench.hs
  default-language: Haskell2010
  ghc-options:      -O2
  build-depends:    scientific
                  , base       >= 4.3 && < 4.8
                  , criterion  >= 0.5 && < 0.10
