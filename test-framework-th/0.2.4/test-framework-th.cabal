-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:d9bd55a06d7fa1c772202a05e8ea03d5
    SHA1:52c9c185d54fff664679449596cc2e11adf24639
    SHA256:8b780d9e3edd8d91e24f72d9fa1f80420e52959428ad7c22d0694901a43f9c8a
    SHA512:0e8b6898eb7bf481bafb0c9ff9caa615dbf768e538e26b15ab899c5c9a1ad6bd6ed76ef93cf9a823706046d41f49fbb0cbe660bf846e59a608a0e5d21e89686b
    Skein512_512:73c588004d843c39b5ad48a36831bd452dfbd6b333ed0fbe4b30ffd3a985372de86683defa7193c3556f2a55adf376296feae80384d49ba010e33cb57ee79512

x-package-locations:
    https://hackage.haskell.org/package/test-framework-th-0.2.4/test-framework-th-0.2.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/test-framework-th-0.2.4.tar.gz

x-package-size: 2977
-- END Added by all-cabal-hashes-tool

name: test-framework-th
version: 0.2.4
cabal-version: >= 1.6
build-type: Simple
license: BSD3
license-file: BSD3.txt
maintainer: Oscar Finnsson
homepage: http://github.com/finnsson/test-generator
synopsis: Automagically generate the HUnit- and Quickcheck-bulk-code using Template Haskell.
description:
   @test-framework-th@ contains two interesting functions: @defaultMainGenerator@ and @testGroupGenerator@.
   .
   @defaultMainGenerator@ will extract all functions beginning with case_, prop_ or test_in the module and put them in a testGroup.
   .
   > -- file SomeModule.hs
   > ( -# LANGUAGE TemplateHaskell #- )
   > module SomeModule where
   > import Test.Framework.TH
   > import Test.Framework
   > import Test.HUnit
   > import Test.Framework.Providers.HUnit
   > import Test.Framework.Providers.QuickCheck2
   >
   > -- observe this line! 
   > main = $(defaultMainGenerator)
   > case_1 = do 1 @=? 1
   > case_2 = do 2 @=? 2
   > prop_reverse xs = reverse (reverse xs) == xs
   >    where types = xs::[Int]
   .
   is the same as
   .
   > -- file SomeModule.hs
   > ( -# LANGUAGE TemplateHaskell #- )
   > module SomeModule where
   > import Test.Framework.TH
   > import Test.Framework
   > import Test.HUnit
   > import Test.Framework.Providers.HUnit
   > import Test.Framework.Providers.QuickCheck2
   >
   > -- observe this line! 
   > main =
   >   defaultMain [
   >     testGroup "SomeModule" [ testCase "1" case_1, testCase "2" case_2, testProperty "reverse" prop_reverse]
   >     ]
   > 
   > case_1 = do 1 @=? 1
   > case_2 = do 2 @=? 2
   > prop_reverse xs = reverse (reverse xs) == xs
   >    where types = xs::[Int]
   .
   @testGroupGenerator@ is like @defaultMainGenerator@ but without @defaultMain@. It is useful if you need a function for the testgroup
   (e.g. if you want to be able to call the testgroup from another module).
category: Testing
author: Oscar Finnsson & Emil Nordling

library
  exposed-modules: Test.Framework.TH 
  build-depends: base >= 4 && < 5, test-framework, language-haskell-extract >= 0.2, haskell-src-exts, regex-posix, template-haskell
  hs-source-dirs: src


source-repository head
  type:     git
  location: https://github.com/finnsson/test-generator.git
