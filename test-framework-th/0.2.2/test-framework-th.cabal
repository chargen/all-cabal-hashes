-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:888a661f57d6605c321d03c64a5841b6
    SHA1:f39a4a99fe313059ec76cb75692b627f4905b6c3
    SHA256:1c40ea53e8f4a6cd006ab003dacc48e2ffee21af85171548b7b1db5572dfee5b
    SHA512:d760ee5b84b802936d21c5933f5211e55acb7efe4f5c87ca2c5656c3f6dd1637287c4f6867a94b767cc97389c15c6add78ca887c96a534afea5708b1e7f3381f
    Skein512_512:dcb7a1c8618f2cdc285f426d7a0e56b2f21983d8ff22231bac161edf9a7fba1099053673ad487426e7941ba63a1d11fa972a5521d6bbe2644d1ce7f7c4130eab

package-locations:
    https://hackage.haskell.org/package/test-framework-th-0.2.2/test-framework-th-0.2.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/test-framework-th-0.2.2.tar.gz

package-size: 2882
-- END Added by all-cabal-hashes-tool

name: test-framework-th
version: 0.2.2
cabal-version: >= 1.6
build-type: Simple
license: BSD3
license-file: BSD3.txt
maintainer: Oscar Finnsson
homepage: http://github.com/finnsson/test-generator
synopsis: Automagically generate the HUnit- and Quickcheck-bulk-code using Template Haskell.
description:
   @test-framework-th@ contains two interesting functions: @defaultMainGenerator@ and @testGroupGenerator@.
   .
   @defaultMainGenerator@ will extract all functions beginning with case_ or prop_ in the module and put them in a testGroup.
   .
   > -- file SomeModule.hs
   > ( -# LANGUAGE TemplateHaskell #- )
   > module SomeModule where
   > import Test.Framework.TH
   > import Test.Framework
   > import Test.HUnit
   > import Test.Framework.Providers.HUnit
   > import Test.Framework.Providers.QuickCheck2
   >
   > -- observe this line! 
   > main = $(defaultMainGenerator)
   > case_1 = do 1 @=? 1
   > case_2 = do 2 @=? 2
   > prop_reverse xs = reverse (reverse xs) == xs
   >    where types = xs::[Int]
   .
   is the same as
   .
   > -- file SomeModule.hs
   > ( -# LANGUAGE TemplateHaskell #- )
   > module SomeModule where
   > import Test.Framework.TH
   > import Test.Framework
   > import Test.HUnit
   > import Test.Framework.Providers.HUnit
   > import Test.Framework.Providers.QuickCheck2
   >
   > -- observe this line! 
   > main =
   >   defaultMain [
   >     testGroup "SomeModule" [ testCase "1" case_1, testCase "2" case_2, testProperty "reverse" prop_reverse]
   >     ]
   > 
   > case_1 = do 1 @=? 1
   > case_2 = do 2 @=? 2
   > prop_reverse xs = reverse (reverse xs) == xs
   >    where types = xs::[Int]
   .
   @testGroupGenerator@ is like @defaultMainGenerator@ but without @defaultMain@. It is useful if you need a function for the testgroup
   (e.g. if you want to be able to call the testgroup from another module).
category: Testing
author: Oscar Finnsson & Emil Nordling

library
  exposed-modules: Test.Framework.TH 
  build-depends: base >= 4 && < 5, test-framework, language-haskell-extract >= 0.2.1, haskell-src-exts, regex-posix, template-haskell
  hs-source-dirs: src


source-repository head
  type:     git
  location: https://github.com/finnsson/test-generator.git
