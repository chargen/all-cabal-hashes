-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:629db16d6bdd82b72fb82496e858e2c4
    SHA1:525d13eef5815150ce1346ae506540334c91089e
    SHA256:fb9e023754dcf8c7215b1bbb4106c2659f98970e9a37cac32d542c6b1e28f357
    SHA512:8496674b8321596261ac9f517488a6aa5e2b1014d4830e2c1d49a0f0f7d0d63382d40961aab156c639d7d1e0ee54955b5468fac8c61a1bdcc5567af3efd07efa
    Skein512_512:c83f7958c7a73ef64c461a395a882db5b8fd34076b02e4749c7028f6be83b6aef3a15c40fee4b65a4c67e4b2b34a5b9527ee28582dff35834ae8502f7189a2d6

x-package-locations:
    https://hackage.haskell.org/package/test-framework-th-0.2.1/test-framework-th-0.2.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/test-framework-th-0.2.1.tar.gz

x-package-size: 2887
-- END Added by all-cabal-hashes-tool

name: test-framework-th
version: 0.2.1
cabal-version: >= 1.6
build-type: Simple
license: BSD3
license-file: BSD3.txt
maintainer: Oscar Finnsson
homepage: http://github.com/finnsson/test-generator
synopsis: Automagically generate the HUnit- and Quickcheck-bulk-code using Template Haskell.
description:
   @test-framework-th@ contains two interesting functions: @defaultMainGenerator@ and @testGroupGenerator@.
   .
   @defaultMainGenerator@ will extract all functions beginning with case_ or prop_ in the module and put them in a testGroup.
   .
   > -- file SomeModule.hs
   > ( -# OPTIONS_GHC -fglasgow-exts -XTemplateHaskell #- )
   > module SomeModule where
   > import Test.Framework.TH
   > import Test.Framework
   > import Test.HUnit
   > import Test.Framework.Providers.HUnit
   > import Test.Framework.Providers.QuickCheck2
   >
   > -- observe this line! 
   > main = $(defaultMainGenerator)
   > case_1 = do 1 @=? 1
   > case_2 = do 2 @=? 2
   > prop_reverse xs = reverse (reverse xs) == xs
   >    where types = xs::[Int]
   .
   is the same as
   .
   > -- file SomeModule.hs
   > ( -# OPTIONS_GHC -fglasgow-exts -XTemplateHaskell #- )
   > module SomeModule where
   > import Test.Framework.TH
   > import Test.Framework
   > import Test.HUnit
   > import Test.Framework.Providers.HUnit
   > import Test.Framework.Providers.QuickCheck2
   >
   > -- observe this line! 
   > main =
   >   defaultMain [
   >     testGroup "SomeModule" [ testCase "1" case_1, testCase "2" case_2, testProperty "reverse" prop_reverse]
   >     ]
   > 
   > case_1 = do 1 @=? 1
   > case_2 = do 2 @=? 2
   > prop_reverse xs = reverse (reverse xs) == xs
   >    where types = xs::[Int]
   .
   @testGroupGenerator@ is like @defaultMainGenerator@ but without @defaultMain@. It is useful if you need a function for the testgroup
   (e.g. if you want to be able to call the testgroup from another module).
category: Testing
author: Oscar Finnsson & Emil Nordling

library
  exposed-modules: Test.Framework.TH 
  build-depends: base >= 4 && < 5, test-framework, language-haskell-extract >= 0.2, haskell-src-exts, haskell98, regex-posix, template-haskell
  hs-source-dirs: src


source-repository head
  type:     git
  location: https://github.com/finnsson/test-framework-th/
