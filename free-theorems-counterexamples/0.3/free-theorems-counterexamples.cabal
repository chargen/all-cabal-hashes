-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:a207a3d5a319824ba86322beb5d19eee
    SHA1:ceeb1d6ab7c860a5f7140970f9a0f2609743d207
    SHA256:3ab01be119d7c87444bfda1481988ae62b4c519809f1de9b270b36cb38169f14
    SHA512:f9e76f0175c3c31ed640265b12419bf91b91e339eca8f499fa8163b4abd13f1e5653dc1b372a67973e71650b0d46dedea7044b8410d29a37e16dfb3cac4a299b
    Skein512_512:619c5a17ed2eb9138aa1cf4d48a5a4ccd2352fcb19e43a4581ba846e313aaf358d485c25bc6f7a8eb024fd6bb951df7d5c605e7784e090fc028ecb8da3344350

package-locations:
    https://hackage.haskell.org/package/free-theorems-counterexamples-0.3/free-theorems-counterexamples-0.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/free-theorems-counterexamples-0.3.tar.gz

package-size: 34000
-- END Added by all-cabal-hashes-tool

name:           free-theorems-counterexamples
version:        0.3
license:        PublicDomain
author:         Daniel Seidel, Joachim Breitner
maintainer:     ds@iai.uni-bonn.de
synopsis:       Automatically Generating Counterexamples to Naive Free Theorems
description:
	This program is to verify (or to put into question) strictness conditions 
	on free theorems that arise if a polymorphic lambda calculus is	enriched by 
	general recursion.
	Given a type the program either returns an instance of the corresponding
	unrestricted free theorem that does not hold and thereby verifies the need
	of the additional restrictions or it returns without finding such an
	instantiation and thereby suggests (but not proves) that the strictness
	conditions are superfluous.
	The underlying algorithm is described in \"Automatically Generating 
	Counterexamples to Naive Free Theorems\" (FLOPS'10) by Daniel Seidel and Janis
	Voigtl√§nder.
	A webinterface for the program is also available at 
	<http://www-ps.iai.uni-bonn.de/cgi-bin/exfind.cgi>.
	.
	Related to this package you may be interested in the online free theorem generator
	at <http://www-ps.iai.uni-bonn.de/ft> that is also available offline via
	<http://hackage.haskell.org/cgi-bin/hackage-scripts/package/free-theorems-webui>.
	Also interesting may be the tool polyseq that generates \"optimal\" free theorems in a 
	polymorphic lambda calculus with selective strictness.
	Polyseq can be downloaded at 
	<http://hackage.haskell.org/cgi-bin/hackage-scripts/package/polyseq>
	but the functionality is as well provided via a webinterface at
	<http://www-ps.iai.uni-bonn.de/cgi-bin/polyseq.cgi>.
	
category:       Language
tested-with:    GHC==6.8.2
build-type:	Simple
cabal-version:  >= 1.2.3

extra-source-files:
    Language/Haskell/FreeTheorems/Variations/CounterExamples/Test/TestItExt.hs
    Language/Haskell/FreeTheorems/Variations/CounterExamples/Test/TestGen.hs
    testcgi.py
    test.sh
    README

library
    build-depends:
        mtl >= 1.0
      , haskell-src >= 1.0
      , haskell-src-exts >= 0.3.9
      , pretty >= 1.0.0.0
      , containers >= 0.1.0.1
      , HUnit >= 1.2
    if impl(ghc >= 6.10)
      build-depends:
          base >= 4
        , syb >= 0.1.0.0
    else
      build-depends:
          base >= 1 && < 4
    exposed-modules:
        Language.Haskell.FreeTheorems.Variations.CounterExamples.ExFind
        Language.Haskell.FreeTheorems.Variations.CounterExamples.Parser.ParseType
        Language.Haskell.FreeTheorems.Variations.CounterExamples.Common.AlgCommon
        Language.Haskell.FreeTheorems.Variations.CounterExamples.Internal.ExFindExtended
    other-modules:
        Language.Haskell.FreeTheorems.Variations.CounterExamples.Internal.FTSync
        Language.Haskell.FreeTheorems.Variations.CounterExamples.Internal.M
        Language.Haskell.FreeTheorems.Variations.CounterExamples.Internal.TimeOut

executable counterexamples.cgi
    main-is:
        counterexamples-cgi.hs
    build-depends:
        xhtml, cgi, utf8-string, free-theorems >= 0.3.1

  extensions:
      FlexibleContexts
    , DeriveDataTypeable 
    , ScopedTypeVariables

