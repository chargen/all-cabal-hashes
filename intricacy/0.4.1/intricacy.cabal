name:                intricacy
version:             0.4.1
synopsis:            A game of competitive puzzle-design
homepage:            http://mbays.freeshell.org/intricacy
license:             GPL-3
license-file:        COPYING
author:              Martin Bays
maintainer:          mbays@sdf.org
-- copyright:           
category:            Game
build-type:          Simple
cabal-version:       >=1.8
data-files: VeraMono.ttf tutorial/*.lock tutorial/*.text sounds/*.ogg
extra-doc-files: README NEWS tutorial-extra/*.lock tutorial-extra/README

description:
    A networked game with client-server architecture. The core game is a
    lockpicking-themed turn-based puzzle game on a hex grid. Players design
    puzzles (locks) and solve those designed by others. A metagame encourages
    the design of maximally difficult puzzles, within tight size constraints.
    The client supports Curses and SDL, with all graphics in SDL mode drawn by
    code using SDL-gfx. The network protocol is based on the 'binary' package,
    and is intended to be reasonably efficient. TVars are used to give
    transparent local caching and background network operations. Also
    incorporates an implementation of a graph 5-colouring algorithm (see
    GraphColouring.hs).

source-repository head
   type:     git
   location: http://mbays.freeshell.org/intricacy/.git

Flag Game
    Description: Build game
    Default: True
    Manual: True
Flag SDL 
    Description: Enable SDL UI
    Default: True
Flag Sound 
    Description: Enable sound
    Default: True
Flag Curses 
    Description: Enable Curses UI
    Default: True
Flag Server
    Description: Build server
    Default: False
    Manual: True

executable intricacy
  if flag(Game)
      extensions: DoAndIfThenElse
      build-depends: base >=4.3, base < 5
        , mtl >=2.0, transformers >=0.2, stm >= 2.1
        , directory >= 1.0, filepath >= 1.0, time >= 1.2
        , bytestring >=0.10
        , array >=0.3, containers >=0.4, vector >=0.9
        , binary >=0.5, network-fancy >= 0.1.5
        , cryptohash >= 0.8
        , safe >= 0.2
      if flag(SDL)
          build-depends: SDL >=0.6.5, SDL-ttf >=0.6, SDL-gfx >=0.6
          if flag(Sound)
              cpp-options: -DSOUND
              build-depends: SDL-mixer >= 0.6, random >= 1.0
          if os(windows)
              Extra-Lib-Dirs:    winlibs
              Extra-Libraries:   SDL_ttf SDL SDL_gfx freetype
              if flag(Sound)
                  Extra-Libraries: SDL_mixer
              ghc-options: -optl-mwindows
  else
      Buildable: False
  if flag(Curses)
      build-depends: hscurses >=1.4
  if flag(SDL)
      if flag(Curses)
        main-is: MainBoth.hs
      else
        main-is: MainSDL.hs
  else
      if flag(Curses)
        main-is: MainCurses.hs
      else
        Buildable: False
        -- XXX: there must be a neater way to prevent the cabal flag sat
        -- solver from thinking it's acceptable to have both SDL and Curses be
        -- False... but this will have to do for now:
        build-depends: Unsatisfiable >= 1337

  other-modules: AsciiLock, BinaryInstances, BoardColouring, Cache, Command,
      CursesRender, CursesUI, CursesUIMInstance, CVec, Database, Debug,
      EditGameState, Frame, GameState, GameStateTypes, GraphColouring, Hex, Init,
      InputMode, Interact, InteractUtil, KeyBindings, Lock, MainState,
      Maxlocksize, Metagame, Mundanities, Physics, Protocol, SDLRender, SDLUI,
      SDLUIMInstance, ServerAddr, Util

executable intricacy-server
  if flag(Server)
      extensions: DoAndIfThenElse
      build-depends: base >=4.3, base < 5
        , mtl >=2.0, transformers >=0.2, stm >= 2.1
        , directory >= 1.0, filepath >= 1.0, time >= 1.2
        , bytestring >=0.10
        , array >=0.3, containers >=0.4, vector >=0.9
        , binary >=0.5, network-fancy >= 0.1.5
        , cryptohash >= 0.8
        , random >= 1.0, pipes >= 4
  else
    Buildable: False
  main-is:  Server.hs
  other-modules: AsciiLock, BinaryInstances, BoardColouring, CVec, Database,
      Debug, Frame, GameState, GameStateTypes, GraphColouring, Hex, Lock,
      Maxlocksize, Metagame, Mundanities, Physics, Protocol, Util


package-hashes:
    MD5:7fa035738e8a4fe7c8cf1cacef97a3a7
    SHA1:631e28b78b9498e305fe2733cf8531fdf86a7da4
    SHA256:e8535b604ad14dcb0fe51407cb15a127f7ef69ccdca2d210b464953cea9b62bf
    SHA512:b3869554db413ea6e5f05c479dd2ad18be349cc3bd1885fdcad6661312632827094c1149a2f7844f81681847e6994925a11f47df2ed0abb5eb4cf367c20914c9
    Skein512_512:41f5b1fa3268c620cdbfaadddef5317996cf151569604832b20cd176c9418364baef9b75b098845065eac93f5f4fe72ed7fabd1b4f95c7d5554fbc4404f05092

package-locations:
    https://hackage.haskell.org/package/intricacy-0.4.1/intricacy-0.4.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/intricacy-0.4.1.tar.gz

