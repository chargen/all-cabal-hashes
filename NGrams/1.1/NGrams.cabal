-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:387bb4e17ce8df01baa85e24f4576b06
    SHA1:e67b89ceab3fc52fb2054fb7d22a35d51fa0f961
    SHA256:cc0a244b0f62ddd9ece292cbb6fce63a2d4b423ca2940e2f1aedfdd92c803cda
    SHA512:39f0555651a6b4f8ed74923bf6cbe42ac143c527dd3228a445a124b91a7f91b492099df02449641b498f752d3d78bb34426cc9e0b8cf7dac07decdc464f8273d
    Skein512_512:fb4de02ffb86e54fcb6aa0ddb5957ca453f34fb20f59216d5bf20f7a349ca539592dc597043503d09952ab7d15e7eaf53c65f6b5dbc4b00fe1fbe22a6c6c244d

package-locations:
    https://hackage.haskell.org/package/NGrams-1.1/NGrams-1.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/NGrams-1.1.tar.gz

package-size: 3205
-- END Added by all-cabal-hashes-tool

Name:           NGrams
Version:        1.1
License:        BSD3
Author:         Justin Bailey
Homepage:       
Maintainer:     jgbailey _ gmail _ com
Category:       Natural Language Processing
Build-Depends:  base >= 3.0.0.0, HTTP >= 3000.0.0, HCL >= 1.2, network >= 2.0.0.0, regex-compat >= 0.7.0.0
Build-type: Simple
Synopsis:       Simple application for calculating n-grams using Google.
Description:
  An n-gram is a natural language processing technique for determining,
  given a list of words and a phrase, the probability that each of the
  words given will follow in the phrase. The executable provided asks for
  a phrase and a list of alternate ending words. It also asks for the type
  of n-gram to create (e.g., bi-gram, tri-gram). The probability for each
  possible phrase is then calculated using Google search results.

Executable:     ngrams
Main-Is:        ngrams.hs
Hs-Source-Dirs: .
