-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:0775b9ef49585da363fda7209bf76927
    SHA1:e68efb9be0b7de72bdde5f3ee3bf5c4580b7ce1a
    SHA256:d61d7bffdc90714161cd274a096dce111804ab07c64c39b40233ee3f39ef593e
    SHA512:3debb8f38490b765640fa8f0400a586ff881b98374578bcfedcd28ee1fa6ad4b45a4a670fb19da8b7a219cd57ff46aae999c6b6469ecb90675eeb54558473c43
    Skein512_512:3910f4f9cfd47d4d14cec4235be965db5b622a597c98407083157b130d17e1390f4e7a218895705be9fc320a2a2c633b9ed7bc370c295c3f900a057db51b1b8e

x-package-locations:
    https://hackage.haskell.org/package/control-monad-exception-monadsfd-0.8.0.1/control-monad-exception-monadsfd-0.8.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/control-monad-exception-monadsfd-0.8.0.1.tar.gz

x-package-size: 2360
-- END Added by all-cabal-hashes-tool

name: control-monad-exception-monadsfd
version: 0.8.0.1
Cabal-Version:  >= 1.6
build-type: Simple
license: PublicDomain
author: Pepe Iborra
maintainer: pepeiborra@gmail.com
homepage: http://pepeiborra.github.com/control-monad-exception
description: 
  This package provides explicitly typed, checked exceptions as a library.
  .
  Computations throwing different types of exception can be combined seamlessly.
  .
  /Example/
  .
  > data Expr = Add Expr Expr | Div Expr Expr | Val Double
  > eval (Val x)     = return x
  > eval (Add a1 a2) = do
  >    v1 <- eval a1
  >    v2 <- eval a2
  >    let sum = v1 + v2
  >    if sum < v1 || sum < v2 then throw SumOverflow else return sum
  > eval (Div a1 a2) = do
  >    v1 <- eval a1
  >    v2 <- eval a2
  >    if v2 == 0 then throw DivideByZero else return (v1 / v2)
  .
  > data DivideByZero = DivideByZero deriving (Show, Typeable)
  > data SumOverflow  = SumOverflow  deriving (Show, Typeable)
  .
  > instance Exception DivideByZero
  > instance Exception SumOverflow
  .
  GHCi infers the following types
  .
  > eval :: (Throws DivideByZero l, Throws SumOverflow l) => Expr -> EM l Double
  > eval `catch` \ (e::DivideByZero) -> return (-1)  :: Throws SumOverflow l => Expr -> EM l Double
  > runEM(eval `catch` \ (e::SomeException) -> return (-1))  :: Expr -> Double
  .
  .
  In addition to explicitly typed exceptions his package provides:
  .
    * Support for explicitly documented, unchecked exceptions (via 'Control.Monad.Exception.tryEMT').
  .
    * Support for selective unchecked exceptions (via 'Control.Monad.Exception.UncaughtException').
  .
    * Support for exception call traces via 'Control.Monad.Loc.MonadLoc'. /Example:/
  .
  >
  > f () = do throw MyException
  > g a  = do f a
  >
  > main = runEMT $ do g () `catchWithSrcLoc`
  >                        \loc (e::MyException) -> lift(putStrLn$ showExceptionWithTrace loc e)
  >
  > -- Running main produces the output:
  >
  > *Main> main
  >  MyException
  >    in f, Main(example.hs): (1,6)
  >       g, Main(example.hs): (2,6)
  >       main, Main(example.hs): (5,9)
  >       main, Main(example.hs): (4,16)

synopsis: Explicitly typed, checked exceptions with stack traces
category: Control, Monads, Failure
stability: experimental
tested-with: GHC ==6.10.3

Library
  buildable: True 
  build-depends: base > 4 && < 5
               , control-monad-exception == 0.8.0
               , transformers >= 0.1.0
               , monads-fd    >= 0.0.0.1

  extensions:  ScopedTypeVariables, 
               PackageImports,
               MultiParamTypeClasses,
               FlexibleContexts,
               FlexibleInstances,
               UndecidableInstances

  exposed-modules:
     Control.Monad.Exception.MonadsFD

  hs-source-dirs: src-monadsfd

  ghc-options: -Wall -fno-warn-name-shadowing -fno-warn-orphans



source-repository head
  type:     git
  location: git://github.com/pepeiborra/control-monad-exception.git
