-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:3eb7f7c54a72e69cd43985cd54ebaa48
    SHA1:df1851a0de738228a480126fb06461751179be62
    SHA256:7638009ddebf1fba91ef3a9579eb2076f0127b0c90ce0a1e3d258c79151fa583
    SHA512:6598ac04b1409415bba4031948651a00c99a854e5c241418d175fb05ea9fa5051c5f54c721ffc0f74f6bc58ccf7e638be7b14ef0e65ed6f44a13b1e1be9b5f0c
    Skein512_512:7badca3559015cbfb8e5b0f61d8b41b84046b344b90e4648a303470a535f02b1059720693b2f54c8e69cf8e48783c20b031a644e3a93224b96cdb6cc04af5b08

x-package-locations:
    https://hackage.haskell.org/package/ADPfusion-0.2.0.4/ADPfusion-0.2.0.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/ADPfusion-0.2.0.4.tar.gz

x-package-size: 22805
-- END Added by all-cabal-hashes-tool

name:           ADPfusion
version:        0.2.0.4
author:         Christian Hoener zu Siederdissen, 2011-2013
copyright:      Christian Hoener zu Siederdissen, 2011-2013
homepage:       http://www.tbi.univie.ac.at/~choener/adpfusion
maintainer:     choener@tbi.univie.ac.at
category:       Algorithms, Data Structures, Bioinformatics
license:        BSD3
license-file:   LICENSE
build-type:     Simple
stability:      experimental
cabal-version:  >= 1.6.0
synopsis:
                Efficient, high-level dynamic programming.
description:
                ADPfusion combines stream-fusion (using the stream interface
                provided by the vector library) and type-level programming to
                provide highly efficient dynamic programming combinators.
                .
                From the programmers' viewpoint, ADPfusion behaves very much
                like the original ADP implementation
                <http://bibiserv.techfak.uni-bielefeld.de/adp/> developed by
                Robert Giegerich and colleagues, though both combinator
                semantics and backtracking are different.
                .
                The library internals, however, are designed not only to speed
                up ADP by a large margin (which this library does), but also to
                provide further runtime improvements by allowing the programmer
                to switch over to other kinds of data structures with better
                time and space behaviour. Most importantly, dynamic programming
                tables can be strict, removing indirections present in lazy,
                boxed tables.
                .
                As a simple benchmark, consider the Nussinov78 algorithm which
                translates to three nested for loops (for C). In the figure,
                four different approaches are compared using inputs with size
                100 characters to 1000 characters in increments of 100
                characters. "C" is an implementation (@./C/@ directory) in "C"
                using "gcc -O3". "ADP" is the original ADP approach (see link
                above), while "GAPC" uses the "GAP" language
                (<http://gapc.eu/>).
                .
                Performance comparison figure:
                <http://www.tbi.univie.ac.at/~choener/adpfusion/gaplike-nussinov-runtime.jpg>
                .
                Please note that actual performance will depend much on table
                layout and data structures accessed during calculations, but in
                general performance is very good: close to C and better than
                other high-level approaches (that I know of).
                .
                .
                .
                Even complex ADP code tends to be completely optimized to loops
                that use only unboxed variables (Int# and others,
                indexIntArray# and others).
                .
                Completely novel (compared to ADP), is the idea of allowing
                efficient monadic combinators. This facilitates writing code
                that performs backtracking, or samples structures
                stochastically, among others things.
                .
                .
                .
                Two algorithms from the realm of computational biology are
                provided as examples on how to write dynamic programming
                algorithms using this library:
                <http://hackage.haskell.org/package/Nussinov78> and
                <http://hackage.haskell.org/package/RNAFold>.



Extra-Source-Files:
  README.md
  changelog



library
  build-depends:
    base >= 4 && < 5,
    deepseq        >= 1.3     ,
    ghc-prim                  ,
    primitive      >= 0.5     ,
    PrimitiveArray == 0.5.2.* ,
    QuickCheck     >= 2.5     ,
    repa           >= 3.2     ,
    strict         >= 0.3.2   ,
    template-haskell          ,
    transformers              ,
    vector         >= 0.10
  exposed-modules:
    ADP.Fusion
    ADP.Fusion.Apply
    ADP.Fusion.Chr
    ADP.Fusion.Classes
    ADP.Fusion.Empty
    ADP.Fusion.Examples.Palindrome
    ADP.Fusion.Multi
    ADP.Fusion.Multi.Classes
    ADP.Fusion.Multi.Empty
    ADP.Fusion.Multi.GChr
    ADP.Fusion.Multi.None
    ADP.Fusion.None
    ADP.Fusion.QuickCheck
    ADP.Fusion.Region
    ADP.Fusion.Table
    ADP.Fusion.TH

  ghc-options:
    -O2 -funbox-strict-fields

executable NeedlemanWunsch
  main-is:
    ADP/Fusion/Examples/TwoDim.hs
  ghc-options:
    -Odph
    -funbox-strict-fields
    -funfolding-use-threshold1000
    -funfolding-keeness-factor1000
    -fllvm
    -optlo-O3 -optlo-std-compile-opts
    -fllvm-tbaa

source-repository head
  type: git
  location: git://github.com/choener/ADPfusion

