-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:cee65bcf3ced5c4062331d44582e4cec
    SHA1:2c92e3480694c8d185687853818afd2b9078519a
    SHA256:0fbab5f9521c9fe8f14890fe19450ba969d68b0f42eac77ca55b84104d487bfc
    SHA512:128a1a6985ac73185fc3f8d6bd892d661a33e9f104984e5f0da64e6e9cce7b5682950c5496d04d073659d882452fa3bd156fdf44a47dd4c5f1efdb2b22f3b2d6
    Skein512_512:9ddc9ed0e326b761372199ce851e3d8ce80e9b6e57bf854b24ad46e6819016cdd5a57bd87b1d646b8d8a6d45bb7a068b35245db19d8e6056e279cacad1d9d593

package-locations:
    https://hackage.haskell.org/package/ADPfusion-0.0.1.2/ADPfusion-0.0.1.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/ADPfusion-0.0.1.2.tar.gz

package-size: 11399
-- END Added by all-cabal-hashes-tool

name:           ADPfusion
version:        0.0.1.2
author:         Christian Hoener zu Siederdissen, 2011-2012
copyright:      Christian Hoener zu Siederdissen, 2011-2012
homepage:       http://www.tbi.univie.ac.at/~choener/adpfusion
maintainer:     choener@tbi.univie.ac.at
category:       Algorithms, Data Structures, Bioinformatics
license:        BSD3
license-file:   LICENSE
build-type:     Simple
stability:      experimental
cabal-version:  >= 1.6.0
synopsis:
                Efficient, high-level dynamic programming.
description:
                ADPfusion combines stream-fusion (using the stream interface
                provided by the vector library) and type-level programming to
                provide highly efficient dynamic programming combinators.
                .
                From the programmers' viewpoint, ADPfusion behaves very much
                like the original ADP implementation
                <http://bibiserv.techfak.uni-bielefeld.de/adp/> developed by
                Robert Giegerich and colleagues, though both combinator
                semantics and backtracking are different.
                .
                The library internals, however, are designed not only to speed
                up ADP by a large margin (which this library does), but also to
                provide further runtime improvements by allowing the programmer
                to switch over to other kinds of data structures with better
                time and space behaviour. Most importantly, dynamic programming
                tables can be strict, removing indirections present in lazy,
                boxed tables.
                .
                As an example, even rather complex ADP code tends to be
                completely optimized to loops that use only unboxed variables
                (Int# and others, indexIntArray# and others).
                .
                Completely novel (compared to ADP), is the idea of allowing
                efficient monadic combinators. This facilitates writing code
                that performs backtracking, or samples structures
                stochastically, among others things.
                .
                This version is still highly experimental and makes use of
                multiple recent improvements in GHC. This is particularly true
                for the monadic interface.
                .
                Long term goals: Outer indices with more than two dimensions,
                specialized table design, a combinator library, a library for
                computational biology.
                .
                Two algorithms from the realm of computational biology are
                provided as examples on how to write dynamic programming
                algorithms using this library:
                <http://hackage.haskell.org/package/Nussinov78> and
                <http://hackage.haskell.org/package/RNAFold>.
                .
                Changes since 0.0.1.0:
                .
                * compatibility with GHC 7.4
                .
                * note: still using fundeps & and TFs together. The TF-only version does not optimize as well (I know why but not yet how to fix it)



Extra-Source-Files:
  README.md
  ADP/Fusion/QuickCheck.hs
  ADP/Fusion/QuickCheck/Arbitrary.hs



library
  build-depends:
    base >= 4 && < 5,
    primitive      == 0.4.*   ,
    vector         == 0.9.*   ,
    PrimitiveArray == 0.2.2.0
  exposed-modules:
    ADP.Fusion
    ADP.Fusion.Monadic
    ADP.Fusion.Monadic.Internal

  ghc-options:
    -O2 -funbox-strict-fields



source-repository head
  type: git
  location: git://github.com/choener/ADPfusion

