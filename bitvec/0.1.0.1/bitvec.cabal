-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:c5f74921f64f9c8a3a9409a074d40f6c
    SHA1:6f90ae33360df466b6e349acc7d03e0de7201e1e
    SHA256:048343cd7a5a77261b67722c3b0d4ca7da159712e0642a72968fbd7eb138ef7d
    SHA512:29c883242f9bf766be553f4a3c4c47ad7b327617cacd463f7dfc1ce483d115aad52d6e90be621c8ccbbea36f94e73cf32c0f7f07134aa59adeec0aebde40ed54
    Skein512_512:1bdbed138940d23152df51b672ddfa46ed05c9c9d89a5cf2072e04208edabaaf537f51fd69d95fc0ed1d1fd01ba3d1bdf8b72d450ec8ce99f6d46b79fba065c2

x-package-locations:
    https://hackage.haskell.org/package/bitvec-0.1.0.1/bitvec-0.1.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/bitvec-0.1.0.1.tar.gz

x-package-size: 13930
-- END Added by all-cabal-hashes-tool

name:                   bitvec
version:                0.1.0.1
stability:              experimental

cabal-version:          >= 1.9.2
build-type:             Simple

author:                 James Cook <mokus@deepbondi.net>
maintainer:             James Cook <mokus@deepbondi.net>
license:                PublicDomain
license-file:           LICENSE
homepage:               https://github.com/mokus0/bitvec

category:               Data, Bit Vectors
synopsis:               Unboxed vectors of bits / dense IntSets
description:            Another bit-array library for Haskell.  This one defines a `Bit` 
                        type (which is an instance of all the "expected" classes, including
                        numeric ones) and makes that type an instance of `Data.Vector.Unboxed.
                        Unbox`, so we get a lot of nice APIs for free.  `Bool` is already an
                        unboxable type, but the current unboxed `Vector` implementation packs
                        each bit as a byte.  This one packs 8 bits per byte, as expected
                        (`UArray` from the `array` package also uses one bit per `Bool`).
                        .
                        In addition to the `Vector` interface, there are several high-level
                        operations and some low-level ones suitable for building new bulk
                        operations by viewing the bit-vector as a word vector.

tested-with:            GHC == 6.10.4, GHC == 6.12.3, GHC == 7.0.4,
                        GHC == 7.2.1, GHC == 7.2.2, GHC == 7.4.1

source-repository head
  type: git
  location: git://github.com/mokus0/bitvec.git

Test-Suite bitvec-tests
  type:                 exitcode-stdio-1.0
  hs-source-dirs:       src test
  ghc-options:          -threaded -fwarn-unused-imports -fwarn-unused-binds
  main-is:              Main.hs
  other-modules:        Support
                        Tests.Bit
                        Tests.MVector
                        Tests.SetOps
                        Tests.Vector
  build-depends:        base >= 3,
                        HUnit,
                        primitive,
                        vector >= 0.8,
                        test-framework,
                        test-framework-hunit,
                        test-framework-quickcheck2,
                        QuickCheck

Library
  hs-source-dirs:       src
  ghc-options:          -fwarn-unused-imports -fwarn-unused-binds -fwarn-type-defaults
  exposed-modules:      Data.Bit
                        Data.Vector.Unboxed.Bit
                        Data.Vector.Unboxed.Mutable.Bit
  other-modules:        Data.Bit.Internal
                        Data.Vector.Unboxed.Bit.Internal
  build-depends:        base >= 3 && < 5,
                        primitive,
                        vector >= 0.8
  if impl(ghc == 7.2.1)
    ghc-options:        -trust vector 
