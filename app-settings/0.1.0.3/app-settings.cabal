-- Initial app-settings.cabal generated by cabal init.  For further 
-- documentation, see http://haskell.org/cabal/users-guide/

name:                app-settings
version:             0.1.0.3
synopsis:            A library to manage application settings (INI file-like)
description:         
  A library to deal with application settings.
  .
  This library deals with read-write application settings.
  You will have to specify the settings that your application
  uses, their name, types and default values.
  .
  Setting types must implement the 'Read' and 'Show' typeclasses. 
  .
  The settings are saved in a file in an INI-like key-value format
  (without sections).
  .
  Reading and updating settings is done in pure code, the IO
  monad is only used to load settings and save them to disk.
  It is advised for the user to create a module in your project
  holding settings handling.
  .
  You can then declare settings:
  . 
  > fontSize :: Setting Double
  > fontSize = Setting "fontSize" 14
  > 
  > dateFormat :: Setting String
  > dateFormat = Setting "dateFormat" "%x"
  > 
  > backgroundColor :: Setting (Int, Int, Int)
  > backgroundColor = Setting "backcolor" (255, 0, 0)
  .
  Optionally you can declare the list of all your settings:
  .
  > defaultConfig :: DefaultConfig
  > defaultConfig = getDefaultConfig $ do
  >     setting fontSize
  >     setting dateFormat
  >     setting backgroundColor
  .
  If you do it, 'saveSettings' will also save settings
  which have not been modified, which are still at their
  default value in the configuration file, in a commented
  form, as a documentation to the user who may open the
  configuration file.
  So for instance if you declare this default configuration
  and have set the font size to 16 but left the other
  settings untouched, the configuration file which will be
  saved will be:
  .
  > fontSize=16
  > # dateFormat="%x"
  > # backcolor=(255,0,0)
  .
  If you did not specify the list of settings, only the
  first line would be present in the configuration file.
  .
  Once we declared the settings, we can read the configuration
  from disk (and your settings module should export your wrapper
  around the function offered by this library):
  .
  > readResult <- try $ readSettings (AutoFromAppName "test")
  > case readResult of
  > 	Right (conf, GetSetting getSetting) -> do
  > 		let textSize = getSetting textSizeFromWidth
  > 		saveSettings getDefaultConfig (AutoFromAppName "test") conf
  > 	Left (x :: SomeException) -> error "Error reading the config file!"
  .
  'AutoFromAppName' specifies where to save the configuration file.
  And we've already covered the getSetting in this snippet, see 
  the 'readSettings' documentation for further information.

homepage:            https://github.com/emmanueltouzery/app-settings
license:             BSD3
license-file:        LICENSE
author:              Emmanuel Touzery
maintainer:          etouzery@gmail.com
-- copyright:           
category:            Configuration
build-type:          Simple
-- extra-source-files:  
cabal-version:       >=1.10

library
  exposed-modules:     Data.AppSettings
  other-modules:       Data.Serialization
  -- other-extensions:    
  build-depends:       base >=4.6 && <5,
                       mtl == 2.1.*,
                       containers == 0.5.*,
                       directory == 1.2.*,
                       text >= 0.10,
                       parsec == 3.1.*
  -- hs-source-dirs:      
  default-language:    Haskell2010
  Ghc-Options:         -Wall

test-suite             tests
  type:                 exitcode-stdio-1.0
  hs-source-dirs: ., tests
  main-is: Tests.hs
  default-language:    Haskell2010
  build-depends:       base,
                       hspec >= 1.8 && <1.9,
                       HUnit >= 1.2 && <1.3,
                       mtl == 2.1.*,
                       containers == 0.5.*,
                       directory == 1.2.*,
                       text >= 0.10,
                       parsec == 3.1.*
  Ghc-Options:         -Wall


package-hashes:
    MD5:937bb6f0c05089748adf3afca6f6682a
    SHA1:ec465c67ffdf941adbd7b278ba84dc2f9b0d3ae7
    SHA256:4269f29e26ee071600209f500d18b19f3e7b1e73cfe614ce3aaecde6ed605e4f
    SHA512:1a0f5e01bed1e0265ec8235186b4073f48baac5d0b043cf5bef7b0c4dec02c3fa50daa7511556e9106826c9c40dd9676023034b8ee6a9a07cacd36a80b0895d3
    Skein512_512:9f496f6a373f8d08946c25adb8642fee32d68429ec6f747ac93cfc60f586a2aef19d8bcd5e0d4d41bb77c9c55100978e55d9e57f9cd0ed244c69601e64f85138

package-locations:
    https://hackage.haskell.org/package/app-settings-0.1.0.3/app-settings-0.1.0.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/app-settings-0.1.0.3.tar.gz

package-size: 6611
