-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:84dde243b75c18d7380d45e7e1251582
    SHA1:9ce74b5389efa87f371ee64c817f2b28e336abf0
    SHA256:0fef969670dfe90705ef1943d13a2b28983b46af1ee0c0e3971b49c2fb59f486
    SHA512:7f37fac86b5b36ffae36a0625dbc9bccc1fb78c4723027630db4a8a8cfa89dfae3e6f7c5a7d49f1f723f2be6eed8dd70df5f896652cface17130e88d99cc072e
    Skein512_512:93d4953fc939a6677db5ffaf3d1231a5837c5d097138c5b9c2f4973a9b1d09b248093bd74a7e16f594ee81347c8b8898523aa65713ecfc4c384136afa7da0e8a

x-package-locations:
    https://hackage.haskell.org/package/pathtype-0.5.3/pathtype-0.5.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/pathtype-0.5.3.tar.gz

x-package-size: 13941
-- END Added by all-cabal-hashes-tool

Name:                pathtype
Version:             0.5.3
Synopsis:            Type-safe replacement for System.FilePath etc
Description:         This package provides type-safe access to filepath manipulations.
		     .
		     "System.Path" is designed to be used instead of "System.FilePath".
		     (It is intended to provide versions of functions from that
		     module which have equivalent functionality but are more
		     typesafe). "System.Path.Directory" is a companion module
		     providing a type-safe alternative to "System.Directory".
		     .
		     The heart of this module is the @'Path' ar fd@ abstract type which
		     represents file and directory paths. The idea is that there are
		     two phantom type parameters - the first should be 'Abs' or 'Rel',
		     and the second 'File' or 'Dir'. A number of type synonyms are
		     provided for common types:
		     .
		     > type AbsFile     = Path Abs File
		     > type RelFile     = Path Rel File
		     > type AbsDir      = Path Abs Dir
		     > type RelDir      = Path Rel Dir
		     >
		     > type AbsPath  fd = Path Abs fd
		     > type RelPath  fd = Path Rel fd
		     > type FilePath ar = Path ar File
		     > type DirPath  ar = Path ar Dir
		     .
		     The type of the 'combine' (aka '</>') function gives the idea:
		     .
		     > (</>) :: DirPath ar -> RelPath fd -> Path ar fd
		     .
		     Together this enables us to give more meaningful types to
		     a lot of the functions, and (hopefully) catch a bunch more
		     errors at compile time.
		     .
		     Overloaded string literals are supported, so with the @OverloadedStrings@
		     extension enabled, you can:
		     .
		     > f :: FilePath ar
		     > f = "tmp" </> "someFile" <.> "ext"
		     .
		     If you don't want to use @OverloadedStrings@, you can use the construction fns:
		     .
		     > f :: FilePath ar
		     > f = asDirPath "tmp" </> asFilePath "someFile" <.> "ext"
		     .
		     or...
		     .
		     > f :: FilePath ar
		     > f = asPath "tmp" </> asPath "someFile" <.> "ext"
		     .
		     or just...
		     .
		     > f :: FilePath ar
		     > f = asPath "tmp/someFile.ext"
		     .
		     One point to note is that whether one of these is interpreted as
		     an absolute or a relative path depends on the type at which it is
		     used:
		     .
		     > *System.Path> f :: AbsFile
		     > /tmp/someFile.ext
		     > *System.Path> f :: RelFile
		     > tmp/someFile.ext
		     .
		     You will typically want to import as follows:
		     .
		     > import Prelude hiding (FilePath)
		     > import System.Path
		     > import System.Path.Directory
		     > import System.Path.IO
		     .
		     The basic API (and properties satisfied) are heavily influenced
		     by Neil Mitchell's "System.FilePath" module.
                     .
                     .
Stability:           experimental
License:             BSD3
Category:            System
License-file:        LICENSE
Author:              Ben Moseley, Ben Millwood
Maintainer:          ben@moseley.name
HomePage:            http://code.haskell.org/pathtype
Build-Type:          Simple
Cabal-Version:       >=1.6
Extra-Source-Files: Test.hs, TestTemplate.hs, System/Path/Internal.hs

source-repository head
  type:     darcs
  location: http://code.haskell.org/pathtype

flag old-time
  description: Build with directory < 1.2 and old-time
  default:     True

Library
  Build-Depends:     base >= 4 && < 5, time >= 1.0 && < 2, QuickCheck >= 2.1.0.1 && < 3

  if flag(old-time)
    Build-Depends: directory >= 1 && < 1.2, old-time >= 1.0 && < 2
  else
    Build-Depends: directory >= 1.2 && < 2

  Exposed-modules:
    System.Path, System.Path.Directory, System.Path.IO, System.Path.Posix, System.Path.Windows
  Extensions:        EmptyDataDecls, PatternGuards, FlexibleInstances, Rank2Types, OverloadedStrings, CPP
