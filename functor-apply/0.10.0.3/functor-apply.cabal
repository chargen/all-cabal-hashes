name:          functor-apply
category:      Control, Comonads
version:       0.10.0.3
license:       BSD3
cabal-version: >= 1.2
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://comonad.com/reader/
copyright:     Copyright (C) 2011 Edward A. Kmett
synopsis:      Applicative sans pure, Monad sans return, Alternative sans empty
description:   
  Provides a wide array of semigroup based Functors.
  .
  When working with comonads you often have the @\<*\>@ portion of an @Applicative@, but
  not the @pure@. This was captured in Uustalu and Vene's \"Essence of Dataflow Programming\"
  in the form of the @ComonadZip@ class in the days before @Applicative@. Apply provides a weaker invariant, but for the comonads used for data flow programming (found in the streams package), this invariant is preserved.
  .
  Logically:
  .
  > Functor -> Apply -------> Bind
  >  |           |             |
  >  v           v             v
  > Alt     Applicative ---> Monad
  >  |           |             |
  >  v           v             v
  > Plus -> Alternative -> MonadPlus
  . 
  This lets us remove many of the restrictions from various monad transformers
  as in many cases the binding operation or @\<*\>@ operation does not require them.
  .
  Finally, to work with these weaker structures it is beneficial to have containers
  that can provide stronger guarantees about their contents, so versions of 'Traversable'
  and 'Foldable' that can be folded with just a 'Semigroup' are added.

build-type:    Simple

library
  build-depends: 
    base >= 4 && < 4.4,
    transformers >= 0.2.0 && < 0.3,
    containers >= 0.4.0 && < 0.5,
    comonad >= 0.9.0 && < 1.0,
    semigroups >= 0.3.2 && < 0.4

  exposed-modules:
    Data.Functor.Alt,
    Data.Functor.Apply,
    Data.Functor.Bind,
    Data.Functor.Bind.Trans,
    Data.Functor.Plus,
    Data.Semigroup.Foldable,
    Data.Semigroup.Traversable

  ghc-options: -Wall 


package-hashes:
    MD5:f57e1be87543a6a8957530774a7d15eb
    SHA1:d03761ac8578d26feb9fa45434c9a87765c020b8
    SHA256:dcec8d386d445aae2b813795611a08ab87f72302738498268d6f88b05328d870
    SHA512:f330e45bb3e4f79363214704350b59895bd0cdfce50e56deaf93e2b3ffb1cc24500bc9cf44f7d49874893162084d090c72b2b32f2504fe1eb21a1565d0b11a1c
    Skein512_512:c0e51f098855359f918e9afc1a61ba0f7fdac5dbe189e4e0f6ea511d216b8b258f63ddee33dd39d402a7dd9c3589535d74ce29d1fd88627c374b77f4db0c5d6a

package-locations:
    https://hackage.haskell.org/package/functor-apply-0.10.0.3/functor-apply-0.10.0.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/functor-apply-0.10.0.3.tar.gz

package-size: 8153
