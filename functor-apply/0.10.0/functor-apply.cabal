name:          functor-apply
category:      Control, Comonads
version:       0.10.0
license:       BSD3
cabal-version: >= 1.2
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://comonad.com/reader/
copyright:     Copyright (C) 2011 Edward A. Kmett
synopsis:      Applicative sans pure, Monad sans return, Alternative sans empty
description:   
  Provides a wide array of semigroup based Functors.
  .
  When working with comonads you often have the @\<*\>@ portion of an @Applicative@, but
  not the @pure@. This was captured in Uustalu and Vene's \"Essence of Dataflow Programming\"
  in the form of the @ComonadZip@ class in the days before @Applicative@, manifested here
  as @ComonadApply@.
  .
  Logically:
  .
  > Functor -----> Apply -------------> Bind
  >   |           / |   \                |
  >   v          /  v    v               v
  > Extend      /  Alt  Applicative -> Monad
  >   |        /    |       |            |
  >   v       /     v       v            |
  > Comonad  /    ApplicativeAlt         |
  >   |     /           |                |
  >   v    v            v                v
  > ComonadApply   Alternative --> MonadPlus
  . 
  This lets us remove many of the restrictions from various (co)monad transformers
  as in many cases the (co)binding operation or @\<*\>@ operation does not require them.
  .
  Finally, to work with these weaker structures it is beneficial to have containers
  that can provide stronger guarantees about their contents, so versions of 'Traversable'
  and 'Foldable' that can be folded with just a 'Semigroup' are added.

build-type:    Simple

library
  build-depends: 
    base >= 4 && < 4.4,
    transformers >= 0.2.0 && < 0.3,
    containers >= 0.4.0 && < 0.5,
    comonad >= 0.9.0 && < 1.0,
    semigroups >= 0.3.2 && < 0.4

  exposed-modules:
    Data.Functor.Alt,
    Data.Functor.Apply,
    Data.Functor.Bind,
    Data.Functor.Bind.Trans,
    Data.Functor.Plus,
    Data.Semigroup.Foldable,
    Data.Semigroup.Traversable

  ghc-options: -Wall 


package-hashes:
    MD5:358ee9493dd9482d2ff9efdb0916c52d
    SHA1:aa40c66171fbce084467cb18ed5772edf6a63665
    SHA256:1a07e7105bfc983abf6cc66fe8ff8e4cdd10c320795ef7944dd8a233532b9378
    SHA512:185dffacaea7d676cbff6535128e250bc24cabba1d936341c9fda88c5e7db28cf4c31da6f118590f76ae0cb9e7112385802e021a2783afdc546e9d55413c2d3d
    Skein512_512:0b62099d82c6e6eb667ad6e395919c4063d9d3b4f268e582d72007b29eead5579527dce486b4e689b7c149e9e9eba8848f9d0b69389d0d35ff76a92a3071244e

package-locations:
    https://hackage.haskell.org/package/functor-apply-0.10.0/functor-apply-0.10.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/functor-apply-0.10.0.tar.gz

package-size: 8173
