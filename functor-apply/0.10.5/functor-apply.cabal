name:          functor-apply
category:      Control, Comonads
version:       0.10.5
license:       BSD3
cabal-version: >= 1.2
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://comonad.com/reader/
copyright:     Copyright (C) 2011 Edward A. Kmett
synopsis:      Haskell 98: Applicative sans pure, Monad sans return, Alternative sans empty
description:   
  Provides a wide array of semigroup based Functors.
  .
  When working with comonads you often have the @\<*\>@ portion of an @Applicative@, but
  not the @pure@. This was captured in Uustalu and Vene's \"Essence of Dataflow Programming\"
  in the form of the @ComonadZip@ class in the days before @Applicative@. Apply provides a weaker invariant, but for the comonads used for data flow programming (found in the streams package), this invariant is preserved.
  .
  Ideally the following relationships would hold:
  .
  > Traversable <---- Foldable <--- Functor ------> Alt ---------> Plus   
  >      |               |            |                              |     
  >      v               v            v                              v       
  > Traversable1 <--- Foldable1     Apply --------> Applicative -> Alternative
  >                                   |               |              |        
  >                                   v               v              v       
  >                                 Bind ---------> Monad -------> MonadPlus  
  >                         
  >                          
  >
  > Bitraversable <-- Bifoldable <- Bifunctor                      Semigroupoid
  >     |                  |          |                              |
  >     v                  v          v                              v
  > Bitraversable1 <- Bifoldable1   Biapply                        Category
  >                                                                  |
  >                                                                  v
  >                                                                Arrow
  . 
  This lets us remove many of the restrictions from various monad transformers
  as in many cases the binding operation or @\<*\>@ operation does not require them.
  .
  Finally, to work with these weaker structures it is beneficial to have containers
  that can provide stronger guarantees about their contents, so versions of 'Traversable'
  and 'Foldable' that can be folded with just a 'Semigroup' are added.

build-type:    Simple

library
  build-depends: 
    base >= 4 && < 4.4,
    transformers >= 0.2.0 && < 0.3,
    containers >= 0.4.0 && < 0.5,
    contravariant >= 0.1.2 && < 0.2,
    comonad >= 0.9.0 && < 1.0,
    semigroups >= 0.3.2 && < 0.4,
    bifunctors >= 0.1 && < 0.2

  exposed-modules:
    Control.Arrow.Static
    Data.Bifunctor.Apply,
    Data.Functor.Alt,
    Data.Functor.Apply,
    Data.Functor.Bind,
    Data.Functor.Bind.Trans,
    Data.Functor.Plus,
    Data.Semigroup.Bifoldable,
    Data.Semigroup.Bitraversable
    Data.Semigroup.Foldable,
    Data.Semigroup.Traversable
    Data.Semigroupoid

  ghc-options: -Wall 


package-hashes:
    MD5:fad77a3f0e9c4200ffc64b50b71ed2b2
    SHA1:9357a197d2dedf487543bfe4dccc9e32ecc2671e
    SHA256:6f09b6eb013814996a0d2297ae2d3ae8d4720099e0d53864a664beb9ce3c7112
    SHA512:1eadbf4c948da0c5775f813600a764b16440a04336980a6b117f65bf6917ca00c68637d3158544c2767cc8322ab6274321537ffe9ca0dabaf959185da5d82872
    Skein512_512:4424d04cb2f65aada0dc6639472c5680de6bc3fa533c23f66a5646345519aa636b6f2c3260d43dedf3e5d776c8182045d0242f87376ee75f7ab3082da67345cb

package-locations:
    https://hackage.haskell.org/package/functor-apply-0.10.5/functor-apply-0.10.5.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/functor-apply-0.10.5.tar.gz

package-size: 10100
