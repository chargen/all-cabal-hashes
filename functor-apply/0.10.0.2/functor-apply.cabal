-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:8ed252059ecf0b7a5270ab25e43ee4c0
    SHA1:bfe96b4f267692f065100ebabc455aadff5f3c0c
    SHA256:cf46204764726dfaf448dd458611b2ead2d77b90edbf268657e7d3ec1c4d11b4
    SHA512:5b49585b838a98ef9965a93b25a6dc8493af70def8351d91b4294c3bc8bf2c3339742b22542cc266907f2a55c864ffbf37be8ae9a5c07c439e4bc820edb37452
    Skein512_512:6383d5653eb92b8e6fd5e59e601a2f587e4c38ad4335aa38b8dbfd6c91459e117b3becdaa549a312f14a362d274e138eb5bbb3e4c06e914bdbde82788d763283

x-package-locations:
    https://hackage.haskell.org/package/functor-apply-0.10.0.2/functor-apply-0.10.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/functor-apply-0.10.0.2.tar.gz

x-package-size: 8151
-- END Added by all-cabal-hashes-tool

name:          functor-apply
category:      Control, Comonads
version:       0.10.0.2
license:       BSD3
cabal-version: >= 1.2
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://comonad.com/reader/
copyright:     Copyright (C) 2011 Edward A. Kmett
synopsis:      Applicative sans pure, Monad sans return, Alternative sans empty
description:   
  Provides a wide array of semigroup based Functors.
  .
  When working with comonads you often have the @\<*\>@ portion of an @Applicative@, but
  not the @pure@. This was captured in Uustalu and Vene's \"Essence of Dataflow Programming\"
  in the form of the @ComonadZip@ class in the days before @Applicative@. Apply provides a weaker invariant, but for the comonads used for data flow programming (found in the streams package), this invariant is preserved.
  .
  Logically:
  .
  > Functor ---> Apply --------> Bind
  >    |           |              |
  >    |           v              v
  >    |      Applicative ---> Monad
  >    |           |              |
  >    v           v              v
  >   Alt ->  Alternative -> MonadPlus
  . 
  This lets us remove many of the restrictions from various monad transformers
  as in many cases the binding operation or @\<*\>@ operation does not require them.
  .
  Finally, to work with these weaker structures it is beneficial to have containers
  that can provide stronger guarantees about their contents, so versions of 'Traversable'
  and 'Foldable' that can be folded with just a 'Semigroup' are added.

build-type:    Simple

library
  build-depends: 
    base >= 4 && < 4.4,
    transformers >= 0.2.0 && < 0.3,
    containers >= 0.4.0 && < 0.5,
    comonad >= 0.9.0 && < 1.0,
    semigroups >= 0.3.2 && < 0.4

  exposed-modules:
    Data.Functor.Alt,
    Data.Functor.Apply,
    Data.Functor.Bind,
    Data.Functor.Bind.Trans,
    Data.Functor.Plus,
    Data.Semigroup.Foldable,
    Data.Semigroup.Traversable

  ghc-options: -Wall 
