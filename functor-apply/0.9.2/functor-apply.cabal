-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:1c9299ab86c18801b89d0ac05f53a3f8
    SHA1:8d187868a4e12e8dac9b638a05cdafffafe16501
    SHA256:39c1ed8ad316fc009ddbeb55b57f580d6c5edbcefc8d70952985d4901c6aa3de
    SHA512:1a3f02e6f59032f3f07902f001da66c834a2dcc60a49f9095156fe34e7b6cabf216fd6e612f032cdb8ba121f70e208954ba99ccb5a6e4b2bacd43937e0c785eb
    Skein512_512:d03917c06bf390370da2aa56b09bcb3b4808673f7d3d90b199c9981f4cbb4c38dd842312800e42dc2ceede67183fec8c6c6560bdd326d43fbedb13e6d13ef04a

package-locations:
    https://hackage.haskell.org/package/functor-apply-0.9.2/functor-apply-0.9.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/functor-apply-0.9.2.tar.gz

package-size: 8443
-- END Added by all-cabal-hashes-tool

name:          functor-apply
category:      Control, Comonads
version:       0.9.2
license:       BSD3
cabal-version: >= 1.2
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://comonad.com/reader/
copyright:     Copyright (C) 2011 Edward A. Kmett
synopsis:      Applicative sans pure, Monad sans return, Alternative sans empty
description:   
  Provides a wide array of semigroup based Functors.
  .
  When working with comonads you often have the @\<*\>@ portion of an @Applicative@, but
  not the @pure@. This was captured in Uustalu and Vene's \"Essence of Dataflow Programming\"
  in the form of the @ComonadZip@ class in the days before @Applicative@, manifested here
  as @ComonadApply@.
  .
  Logically:
  .
  > Functor -----> Apply -------------> Bind
  >   |           / |   \                |
  >   v          /  v    v               v
  > Extend      /  Alt  Applicative -> Monad
  >   |        /    |       |            |
  >   v       /     v       v            |
  > Comonad  /    ApplicativeAlt         |
  >   |     /           |                |
  >   v    v            v                v
  > ComonadApply   Alternative --> MonadPlus
  . 
  This lets us remove many of the restrictions from various (co)monad transformers
  as in many cases the (co)binding operation or @\<*\>@ operation does not require them.
  .
  Finally, to work with these weaker structures it is beneficial to have containers
  that can provide stronger guarantees about their contents, so versions of 'Traversable'
  and 'Foldable' that can be folded with just a semigroup are added.

build-type:    Simple

library
  build-depends: 
    base >= 4 && < 4.4,
    transformers >= 0.2.0 && < 0.3,
    containers >= 0.4.0 && < 0.5,
    comonad >= 0.9.0 && < 1.0,
    semigroups >= 0.3.2 && < 0.4

  exposed-modules:
    Data.Functor.Alt,
    Data.Functor.Apply,
    Data.Functor.Bind,
    Data.Functor.Bind.Trans,
    Data.Semigroup.Foldable,
    Data.Semigroup.Traversable,
    Control.Applicative.Alt
    Control.Comonad.Apply

  ghc-options: -Wall 
