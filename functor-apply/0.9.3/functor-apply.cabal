-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:8d6cb054785cd3e5fd118c1d3a3b4ff1
    SHA1:39eb282ee12f263c040a7b6eef867bca1e791c53
    SHA256:267a23626856a3002ce2b4436b43209de35f899a6adb33cdb922c66818ccfb70
    SHA512:5dcd6e9245ab96d416aaf19cac997306a94658975110c47cf51c496f601248bf8eaf2657312fb8223753c4bccac711ee220aea7bfa8a16100bc1777bd0a2f5bb
    Skein512_512:24d60034924918e1f3428da3683cb59c057af6989d55c6e87b4636dc075830c6e5e5b1b6cc14a9bb50c705ca73b62eedc4c9c284673e504d08a571a2efe6ce6e

package-locations:
    https://hackage.haskell.org/package/functor-apply-0.9.3/functor-apply-0.9.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/functor-apply-0.9.3.tar.gz

package-size: 8411
-- END Added by all-cabal-hashes-tool

name:          functor-apply
category:      Control, Comonads
version:       0.9.3
license:       BSD3
cabal-version: >= 1.2
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://comonad.com/reader/
copyright:     Copyright (C) 2011 Edward A. Kmett
synopsis:      Applicative sans pure, Monad sans return, Alternative sans empty
description:   
  Provides a wide array of semigroup based Functors.
  .
  When working with comonads you often have the @\<*\>@ portion of an @Applicative@, but
  not the @pure@. This was captured in Uustalu and Vene's \"Essence of Dataflow Programming\"
  in the form of the @ComonadZip@ class in the days before @Applicative@, manifested here
  as @ComonadApply@.
  .
  Logically:
  .
  > Functor -----> Apply -------------> Bind
  >   |           / |   \                |
  >   v          /  v    v               v
  > Extend      /  Alt  Applicative -> Monad
  >   |        /    |       |            |
  >   v       /     v       v            |
  > Comonad  /    ApplicativeAlt         |
  >   |     /           |                |
  >   v    v            v                v
  > ComonadApply   Alternative --> MonadPlus
  . 
  This lets us remove many of the restrictions from various (co)monad transformers
  as in many cases the (co)binding operation or @\<*\>@ operation does not require them.
  .
  Finally, to work with these weaker structures it is beneficial to have containers
  that can provide stronger guarantees about their contents, so versions of 'Traversable'
  and 'Foldable' that can be folded with just a 'Semigroup' are added.

build-type:    Simple

library
  build-depends: 
    base >= 4 && < 4.4,
    transformers >= 0.2.0 && < 0.3,
    containers >= 0.4.0 && < 0.5,
    comonad >= 0.9.0 && < 1.0,
    semigroups >= 0.3.2 && < 0.4

  exposed-modules:
    Data.Functor.Alt,
    Data.Functor.Apply,
    Data.Functor.Bind,
    Data.Functor.Bind.Trans,
    Data.Semigroup.Foldable,
    Data.Semigroup.Traversable,
    Control.Applicative.Alt
    Control.Comonad.Apply

  ghc-options: -Wall 
