name:          functor-apply
category:      Control, Comonads
version:       0.10.3
license:       BSD3
cabal-version: >= 1.2
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://comonad.com/reader/
copyright:     Copyright (C) 2011 Edward A. Kmett
synopsis:      Haskell 98: Applicative sans pure, Monad sans return, Alternative sans empty
description:   
  Provides a wide array of semigroup based Functors.
  .
  When working with comonads you often have the @\<*\>@ portion of an @Applicative@, but
  not the @pure@. This was captured in Uustalu and Vene's \"Essence of Dataflow Programming\"
  in the form of the @ComonadZip@ class in the days before @Applicative@. Apply provides a weaker invariant, but for the comonads used for data flow programming (found in the streams package), this invariant is preserved.
  .
  Ideally the following relationships would hold:
  .
  > Traversable <---- Foldable <--- Functor ------> Alt ---------> Plus   
  >      |               |            |                              |     
  >      v               v            v                              v       
  > Traversable1 <--- Foldable1     Apply --------> Applicative -> Alternative
  >                                   |               |              |        
  >                                   v               v              v       
  >                                 Bind ---------> Monad -------> MonadPlus  
  >                         
  >                          
  >
  > Bitraversable <-- Bifoldable <- Bifunctor                      Semigroupoid
  >     |                  |          |                              |
  >     v                  v          v                              v
  > Bitraversable1 <- Bifoldable1   Biapply                        Category
  >                                                                  |
  >                                                                  v
  >                                                                Arrow
  . 
  This lets us remove many of the restrictions from various monad transformers
  as in many cases the binding operation or @\<*\>@ operation does not require them.
  .
  Finally, to work with these weaker structures it is beneficial to have containers
  that can provide stronger guarantees about their contents, so versions of 'Traversable'
  and 'Foldable' that can be folded with just a 'Semigroup' are added.

build-type:    Simple

library
  build-depends: 
    base >= 4 && < 4.4,
    transformers >= 0.2.0 && < 0.3,
    containers >= 0.4.0 && < 0.5,
    comonad >= 0.9.0 && < 1.0,
    semigroups >= 0.3.2 && < 0.4,
    bifunctors >= 0.1 && < 0.2

  exposed-modules:
    Control.Arrow.Static
    Data.Bifunctor.Apply,
    Data.Functor.Alt,
    Data.Functor.Apply,
    Data.Functor.Bind,
    Data.Functor.Bind.Trans,
    Data.Functor.Plus,
    Data.Semigroup.Bifoldable,
    Data.Semigroup.Bitraversable
    Data.Semigroup.Foldable,
    Data.Semigroup.Traversable
    Data.Semigroupoid

  ghc-options: -Wall 


package-hashes:
    MD5:1f34b94473bdede57d47eb3b97c3507f
    SHA1:66317548e7f2ddd202a6027c9539a1b2a084df21
    SHA256:7f70cd9b467e86b3fb922f8fa06f5b8bf6ac7fad8c59d91518c91c923f9d00c8
    SHA512:4edfe7a2b9d22c29359996d76266aad50ab718822fdd3c00f12bd11afdf61a9a74da8e4b0fe1dc17420aa544ce57cfd4be5550fb930179fe59b1148ab8e08525
    Skein512_512:880e763e062568f3d89e0a9747eca77d8aaa227c01cbbd9f2e904851f306ef1fe81191710837b93dee0b1b9bdee092653c1348d8f65d5d848655393b5325990e

package-locations:
    https://hackage.haskell.org/package/functor-apply-0.10.3/functor-apply-0.10.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/functor-apply-0.10.3.tar.gz

package-size: 9914
