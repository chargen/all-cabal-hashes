name:          functor-apply
category:      Control, Comonads
version:       0.10.1
license:       BSD3
cabal-version: >= 1.2
license-file:  LICENSE
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://comonad.com/reader/
copyright:     Copyright (C) 2011 Edward A. Kmett
synopsis:      Haskell 98: Applicative sans pure, Monad sans return, Alternative sans empty
description:   
  Provides a wide array of semigroup based Functors.
  .
  When working with comonads you often have the @\<*\>@ portion of an @Applicative@, but
  not the @pure@. This was captured in Uustalu and Vene's \"Essence of Dataflow Programming\"
  in the form of the @ComonadZip@ class in the days before @Applicative@. Apply provides a weaker invariant, but for the comonads used for data flow programming (found in the streams package), this invariant is preserved.
  .
  Logically:
  .
  > Functor -> Apply -------> Bind
  >  |           |             |
  >  v           v             v
  > Alt     Applicative ---> Monad
  >  |           |             |
  >  v           v             v
  > Plus -> Alternative -> MonadPlus
  .
  > Functor 
  >    | 
  >    v     
  > Foldable ----> Foldable1
  >    |               |
  >    v               v
  > Traversable -> Traversable1
  .
  > Bifunctor -----> Biapply
  >     |
  >     v
  > Bifoldable ----> Bifoldable1
  >     |                  |
  >     v                  v
  > Bitraversable -> Bitraversable1

  . 
  This lets us remove many of the restrictions from various monad transformers
  as in many cases the binding operation or @\<*\>@ operation does not require them.
  .
  Finally, to work with these weaker structures it is beneficial to have containers
  that can provide stronger guarantees about their contents, so versions of 'Traversable'
  and 'Foldable' that can be folded with just a 'Semigroup' are added.

build-type:    Simple

library
  build-depends: 
    base >= 4 && < 4.4,
    transformers >= 0.2.0 && < 0.3,
    containers >= 0.4.0 && < 0.5,
    comonad >= 0.9.0 && < 1.0,
    semigroups >= 0.3.2 && < 0.4,
    bifunctors >= 0.1 && < 0.2

  exposed-modules:
    Data.Bifunctor.Apply,
    Data.Functor.Alt,
    Data.Functor.Apply,
    Data.Functor.Bind,
    Data.Functor.Bind.Trans,
    Data.Functor.Plus,
    Data.Semigroup.Bifoldable,
    Data.Semigroup.Bitraversable
    Data.Semigroup.Foldable,
    Data.Semigroup.Traversable

  ghc-options: -Wall 


package-hashes:
    MD5:6b35f7421c6ec2c14e69b3f91653f282
    SHA1:20127b99fd0bc023572db29000652d5089b8082c
    SHA256:8815dff25e0014fcfb7536737eda52e801bc16aeff8d17ff5e50bb7050f09eb6
    SHA512:9edb97633ca0c1eef04d24950789fc5c124efdbf54627dc5fd59035476c84a073396eef7029d1c1008ef77a56fa0f64eb9b820f77a0fa9952c9eb7d55534ebce
    Skein512_512:94b5ca4619c2d5bb5e1d28854c2a44eea32d37f79eb0d1f2d727c37086feae3826fe72b6d67416be4b5a14fba3dd9babf3288368da662eb833445c811dfd0780

package-locations:
    https://hackage.haskell.org/package/functor-apply-0.10.1/functor-apply-0.10.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/functor-apply-0.10.1.tar.gz

