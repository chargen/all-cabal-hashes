-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:1bdec19f0f6aa7c1592dce101c49f4e5
    SHA1:5c810fe423223b4a000dfbe1693e8cdf2b7f6f34
    SHA256:d9c4fa16d6a7a11c58cf823b6b4a249fb962d1dc21f55a9728938e1f5f9d0fe3
    SHA512:c4c749e404f3973d557db20d405d9341ade69557d3447f984897999550172e1281c1182e4bd38b88b1c991e5c0d5c9d6d4911862d129da45172a27f9e04e3949
    Skein512_512:03bd8d0112ea99ccf1877856a2a51e5313e1de1e75c09ba8a18beddd72ce4fc9014747ea08ba4ab04ca11d1595e09c99922c6586cc57ce3927342a3d1a9d1df0

x-package-locations:
    https://hackage.haskell.org/package/tup-functor-0.2.0.3/tup-functor-0.2.0.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/tup-functor-0.2.0.3.tar.gz

x-package-size: 9037
-- END Added by all-cabal-hashes-tool


Name:                tup-functor
Version:             0.2.0.3
Synopsis:            Homogeneous tuples
Description:         Homogeneous tuples (also known as vectors), with various instances, most notably 'Functor' and 'Applicative'.
                     The primary goal of the library is to help functor-oriented programming  
                     (for low-dimensional linear algebra, there are more specific packages, eg. @vect@). 
                     A small preprocessor for a tuple syntax is also included. We also provide a different implementation 
                     using type-level programming.
Author:              Balazs Komuves
license:             BSD3
license-file:        LICENSE
Copyright:           (c) 2012 Balazs Komuves
Maintainer:          bkomuves (plus) hackage (at) gmail (dot) hu
Homepage:            http://code.haskell.org/~bkomuves/
Stability:           Experimental
Category:            Data
Tested-With:         GHC == 7.0.3
Cabal-Version:       >= 1.6
Build-Type:          Simple

extra-source-files:  Data/Tup/Tup/Tup.inc

source-repository head
  type:     darcs
  location: http://code.haskell.org/~bkomuves/projects/tup-functor/
  
Library
  Build-Depends:       base >= 3 && < 5, cpphs >= 1.3

  Exposed-Modules:     Data.Tup
                       Data.Tup.Vec
                       Data.Tup.Tup
                       Data.Tup.Tup.Class
                       Data.Tup.Tup.Strict
                       Data.Tup.Tup.Lazy
                       Data.Tup.Tup.Concat

  Extensions:          CPP
  Hs-Source-Dirs:      .

  -- force-recomp is necessary since all the source code is included via the C preprocessor, 
  -- and thus the recompilation checker is broken
  ghc-options:         -fforce-recomp -Wall -fno-warn-unused-matches -fno-warn-unused-imports -fno-warn-unused-binds
 
Executable tuplepp
  Build-Depends:       base >= 3 && < 5, parsec2, haskell-src-exts  
  Main-is:             preprocessor/tpp.hs
  Hs-Source-Dirs:      .
  ghc-options:         -Wall -fno-warn-unused-matches -fno-warn-unused-imports -fno-warn-unused-binds -fno-warn-unused-do-bind
    