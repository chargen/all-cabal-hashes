-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:848c09dab47f348c141cd54722980fb2
    SHA1:500efda85eeb704663b1f4a00260ef224d02cd2a
    SHA256:bdf53ee637786c1958728049335c11f74952fc27da3d28ebc08dc59988bf37f9
    SHA512:a03e4d7b32d7410545478bef29875759743edd08a74379954266bcb02b79ae844a6c954fde10627044027a4a1ddfb89d7093c61d8ccea93fee5cbe447536b817
    Skein512_512:e637a215c9cf805a73e9da24f2cfc043c331a1a56277b14217eb2bfefb2fc50bf4201c53a9ce7bedf1e73fff9d94fcf3270f41489b19314265998935962a872e

x-package-locations:
    https://hackage.haskell.org/package/tup-functor-0.2/tup-functor-0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/tup-functor-0.2.tar.gz

x-package-size: 8499
-- END Added by all-cabal-hashes-tool


Name:                tup-functor
Version:             0.2
Synopsis:            Homogeneous tuples
Description:         Homogeneous tuples (also known as vectors), with various instances, most notably 'Functor' and 'Applicative'.
                     The primary goal of the library is to help functor-oriented programming  
                     (for low-dimensional linear algebra, there are more specific packages, eg. @vect@). 
                     A small preprocessor for a tuple syntax is also included. We also provide a different implementation 
                     using type-level programming.
Author:              Balazs Komuves
license:             BSD3
license-file:        LICENSE
Copyright:           (c) 2012 Balazs Komuves
Maintainer:          bkomuves (plus) hackage (at) gmail (dot) hu
Homepage:            http://code.haskell.org/~bkomuves/
Stability:           Experimental
Category:            Data
Tested-With:         GHC == 7.0.3
Cabal-Version:       >= 1.6
Build-Type:          Simple

extra-source-files:  Data/Tup/Tup/Tup.inc

source-repository head
  type:     darcs
  location: http://code.haskell.org/~bkomuves/projects/tup-functor/
  
Library
  Build-Depends:       base >= 3 && < 5, cpphs >= 1.3

  Exposed-Modules:     Data.Tup
                       Data.Tup.Vec
                       Data.Tup.Tup
                       Data.Tup.Tup.Class
                       Data.Tup.Tup.Strict
                       Data.Tup.Tup.Lazy
                       Data.Tup.Tup.Concat

  Extensions:          CPP
  Hs-Source-Dirs:      .

  -- force-recomp is necessary since all the source code is included via the C preprocessor, 
  -- and thus the recompilation checker is broken
  ghc-options:         -fforce-recomp -Wall -fno-warn-unused-matches -fno-warn-unused-imports -fno-warn-unused-binds
 
Executable tuplepp
  Build-Depends:       base >= 3 && < 5, parsec2, haskell-src-exts  
  Main-is:             preprocessor/tpp.hs
  Hs-Source-Dirs:      .
  ghc-options:         -Wall -fno-warn-unused-matches -fno-warn-unused-imports -fno-warn-unused-binds -fno-warn-unused-do-bind
    