-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:df72e9467c30a78c1834788a0cc6eed2
    SHA1:d09385c27ad49cdc318a2e87272da1fffd63860f
    SHA256:9daf5909e3a54e6992ae3f61b3fdedfe921dfe7e34e5dd116ad7404521e92343
    SHA512:a0ff5cccb3221ad3990c21c84ead80977d158cd537fe12dea8d4b2b40dd0ed97a69fc010223a68e9f478f03379bb1c454aa949b29045904aa6897a75d50a8c9b
    Skein512_512:68e7890075d73d725733bd6417f78d5ab5bae6886424568b979bc6ff48a8253081995e45b4b1d09de4cbeedcf149b8b1535101d3b04604be632f3fdcaa35f590

package-locations:
    https://hackage.haskell.org/package/flexible-defaults-0.0.0.2/flexible-defaults-0.0.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/flexible-defaults-0.0.0.2.tar.gz

package-size: 5855
-- END Added by all-cabal-hashes-tool

name:                   flexible-defaults
version:                0.0.0.2
stability:              experimental

cabal-version:          >= 1.6
build-type:             Simple

author:                 James Cook <mokus@deepbondi.net>
maintainer:             James Cook <mokus@deepbondi.net>
license:                PublicDomain
homepage:               https://github.com/mokus0/flexible-defaults

category:               Code Generation, Template Haskell
synopsis:               Generate default function implementations for complex type classes.
description:            Template Haskell code to implement default implementations
                        for type-class functions based on which functions are
                        already implemented.  Currently extremely crude but
                        still fairly effective.
                        .
                        When defining a type class with many functions, each
                        of which can be implemented based on arbitrary subsets
                        of the others, the standard default-implementation
                        concept breaks down quite badly.  This library provides
                        a system by which more complex rules can be described
                        for choosing default implementations based on which
                        ones the user supplies.  These implementations can
                        additionally be given \"suitability scores\", so that
                        when multiple possible choices could be made, the
                        library can choose the \"best\" one.
                        .
                        Changes in v0.0.0.2:  Nothing at all except setting 
                        'buildable: False' under GHC 7.2.1.
                        Technically it builds on 7.2.1, but it doesn't actually generate
                        correct code due to http://hackage.haskell.org/trac/ghc/ticket/5410
                        which has been patched and will almost certainly be fixed in the next
                        GHC release.  AFAIK 7.2.1 is the only release where this bug actually
                        caused problems.  I'm sure it could be worked around, but it's a 
                        whole lot easier to just say "wait for 7.2.2/7.4".  If anyone 
                        desperately needs this package under 7.2.1, let me know and I'll
                        see what I can do.

extra-source-files:     examples/*.hs

tested-with:            GHC == 6.8.3, GHC == 6.10.4, GHC == 6.12.1,
                        GHC == 6.12.3, GHC == 7.0.1, GHC == 7.0.2

source-repository head
  type:                 git
  location:             https://github.com/mokus0/flexible-defaults.git

Library
  hs-source-dirs:       src
  ghc-options:          -Wall
  exposed-modules:      Language.Haskell.TH.FlexibleDefaults
  other-modules:        Language.Haskell.TH.FlexibleDefaults.DSL
                        Language.Haskell.TH.FlexibleDefaults.Solve
  build-depends:        base >= 3 && <5,
                        containers,
                        template-haskell,
                        transformers
  if impl(ghc == 7.2.1)
    buildable:          False
