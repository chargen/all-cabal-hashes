cabal-version:      >= 1.10
build-type:         Simple
name:               shake
version:            0.10.8
x-revision: 1
license:            BSD3
license-file:       LICENSE
category:           Development
author:             Neil Mitchell <ndmitchell@gmail.com>
maintainer:         Neil Mitchell <ndmitchell@gmail.com>
copyright:          Neil Mitchell 2011-2013
synopsis:           Build system library, like Make, but more accurate dependencies.
description:
    Shake is a Haskell library for writing build systems - designed as a
    replacement for @make@. See "Development.Shake" for an introduction,
    including an example. Further examples are included in the Cabal tarball,
    under the @Examples@ directory.
    .
    To use Shake the user writes a Haskell program
    that imports "Development.Shake", defines some build rules, and calls
    the 'Development.Shake.shake' function. Thanks to do notation and infix
    operators, a simple Shake build system
    is not too dissimilar from a simple Makefile. However, as build systems
    get more complex, Shake is able to take advantage of the excellent
    abstraction facilities offered by Haskell and easily support much larger
    projects.
    .
    The Shake library provides all the standard features available in other
    build systems, including automatic parallelism and minimal rebuilds.
    Shake provides highly accurate dependency tracking, including seamless
    support for generated files, and dependencies on system information
    (i.e. compiler version). Shake can produce profile reports, indicating
    which files and take longest to build, and providing an analysis of the
    parallelism.
    .
    The theory behind Shake is described in an ICFP 2012 paper,
    Shake Before Building -- Replacing Make with Haskell
    <http://community.haskell.org/~ndm/downloads/paper-shake_before_building-10_sep_2012.pdf>.
    The associated talk forms a short overview of Shake
    <http://www.youtube.com/watch?v=xYCPpXVlqFM>.
homepage:           http://community.haskell.org/~ndm/shake/
stability:          Beta
extra-source-files:
    Examples/C/constants.c
    Examples/C/constants.h
    Examples/C/main.c
    Examples/MakeTutor/Makefile
    Examples/MakeTutor/hellofunc.c
    Examples/MakeTutor/hellomake.c
    Examples/MakeTutor/hellomake.h
    Examples/Tar/list.txt
    Examples/Ninja/*.ninja
    Paths.hs

data-files:
    html/jquery.flot.js
    html/jquery.flot.stack.js
    html/jquery.js
    html/viz.js
    html/report.html
    html/shake-logic.js
    html/shake-ui.js
    html/shake-util.js

source-repository head
    type:     git
    location: https://github.com/ndmitchell/shake.git

flag portable
    default: False
    description: Obtain FileTime using portable functions

library
    default-language: Haskell2010
    build-depends:
        base == 4.*,
        old-time,
        directory,
        hashable >= 1.1.2.3 && < 1.3,
        binary,
        filepath < 1.3.1,
        process >= 1.1,
        unordered-containers >= 0.2.1 && < 0.3,
        bytestring,
        utf8-string >= 0.3,
        time,
        random,
        transformers >= 0.2 && < 0.4,
        deepseq >= 1.1 && < 1.4

    if flag(portable)
        cpp-options: -DPORTABLE
    else
        if !os(windows)
            build-depends: unix >= 2.5.1

    exposed-modules:
        Development.Shake
        Development.Shake.Classes
        Development.Shake.Command
        Development.Shake.FilePath
        Development.Shake.Sys

    other-modules:
        Development.Shake.Args
        Development.Shake.Binary
        Development.Shake.Core
        Development.Shake.Database
        Development.Shake.Derived
        Development.Shake.Directory
        Development.Shake.Errors
        Development.Shake.File
        Development.Shake.FilePattern
        Development.Shake.Files
        Development.Shake.FileTime
        Development.Shake.Intern
        Development.Shake.Oracle
        Development.Shake.Pool
        Development.Shake.Progress
        Development.Shake.Report
        Development.Shake.Rerun
        Development.Shake.Resource
        Development.Shake.Shake
        Development.Shake.Special
        Development.Shake.Storage
        Development.Shake.Timing
        Development.Shake.Types
        Development.Shake.Util
        Development.Shake.Value
        Paths_shake


executable shake
    default-language: Haskell2010
    main-is: Main.hs
    ghc-options: -threaded -rtsopts "-with-rtsopts=-I0 -qg -qb"
    build-depends:
        base == 4.*,
        old-time,
        directory,
        hashable >= 1.1.2.3 && < 1.3,
        binary,
        filepath,
        process >= 1.1,
        unordered-containers >= 0.2.1 && < 0.3,
        bytestring,
        utf8-string >= 0.3,
        time,
        random,
        transformers >= 0.2 && < 0.4,
        deepseq >= 1.1 && < 1.4

    if flag(portable)
        cpp-options: -DPORTABLE
    else
        if !os(windows)
            build-depends: unix >= 2.5.1

    other-modules:
        Development.Make.All
        Development.Make.Env
        Development.Make.Parse
        Development.Make.Rules
        Development.Make.Type
        Development.Ninja.All
        Development.Ninja.Env
        Development.Ninja.Parse
        Development.Ninja.Type
        Start


test-suite shake-test
    default-language: Haskell2010
    type: exitcode-stdio-1.0
    main-is: Test.hs
    ghc-options: -rtsopts
    build-depends:
        base == 4.*,
        old-time,
        directory,
        hashable >= 1.1.2.3 && < 1.3,
        binary,
        filepath,
        process >= 1.1,
        unordered-containers >= 0.2.1 && < 0.3,
        bytestring,
        utf8-string >= 0.3,
        time,
        random,
        transformers >= 0.2 && < 0.4,
        deepseq >= 1.1 && < 1.4

    if flag(portable)
        cpp-options: -DPORTABLE
    else
        if !os(windows)
            build-depends: unix >= 2.5.1

    other-modules:
        Development.Make.All
        Development.Make.Env
        Development.Make.Parse
        Development.Make.Rules
        Development.Make.Type
        Development.Ninja.All
        Development.Ninja.Parse
        Development.Ninja.Type
        Examples.Util
        Examples.C.Main
        Examples.Ninja.Main
        Examples.Self.Main
        Examples.Tar.Main
        Examples.Test.Assume
        Examples.Test.Basic
        Examples.Test.Benchmark
        Examples.Test.Cache
        Examples.Test.Command
        Examples.Test.Directory
        Examples.Test.Docs
        Examples.Test.Errors
        Examples.Test.FilePath
        Examples.Test.FilePattern
        Examples.Test.Files
        Examples.Test.Journal
        Examples.Test.Lint
        Examples.Test.Makefile
        Examples.Test.Oracle
        Examples.Test.Pool
        Examples.Test.Progress
        Examples.Test.Random
        Examples.Test.Resources
        Examples.Test.Throttle
        Examples.Test.Unicode
        Start


package-hashes:
    MD5:43ce43b0a43c4509b01a11d34b26af96
    SHA1:a4a6b151c7e0f2d9362ad0d821dabb7fdb470dd1
    SHA256:ca8f1a5aa1a2fef481bfd93fd1224f214e988e5cb324edc14d3a5a1496482397
    SHA512:ed957d183426d6bd8656a736fb23dbe41e5ef0d10169cee1300b3482d599867ddd5d25faf6b777399ad032e074bc73f6fa3af2f7c1f91c7ecdbc2ffd820c843b
    Skein512_512:0b7f07dd7c03ffc9b5b8527579daa1ea15999b03b2d277736f54621eb8261d607310e27103ace5eb73667a35dba7a8d3d57977e99087139a6fdf432f4302e304

package-locations:
    https://hackage.haskell.org/package/shake-0.10.8/shake-0.10.8.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/shake-0.10.8.tar.gz

