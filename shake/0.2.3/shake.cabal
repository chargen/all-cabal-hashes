-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:7aeecd3402921a2a46f0620c2e8f2c07
    SHA1:8a192d897a1c84ce59fb9693a99e50dd64b32f84
    SHA256:baa566d731531750a206ab7606016875a717fd6333bed93822f6f2ff81617bad
    SHA512:7c03494c7ad27c2afd2d6b76d6fb980dd82e36994bdebb7d89084e71976a70ee1e6fe19c3cd431e0b8944d180ba03fa1b71e7e9cf3b7820611f792e4c19605dd
    Skein512_512:bfd9a4bde1bb573f8081d19960aacec532b45eb6f5e2c0c171b1c69cfed1836e8f11855032eeccf6ca9453a8a800c62f1835d5dff8769a0efa2ecb6b7d25395f

x-package-locations:
    https://hackage.haskell.org/package/shake-0.2.3/shake-0.2.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/shake-0.2.3.tar.gz

x-package-size: 29228
-- END Added by all-cabal-hashes-tool

cabal-version:      >= 1.6
build-type:         Simple
name:               shake
version:            0.2.3
license:            BSD3
license-file:       LICENSE
category:           Development
author:             Neil Mitchell <ndmitchell@gmail.com>
maintainer:         Neil Mitchell <ndmitchell@gmail.com>
copyright:          Neil Mitchell 2011
synopsis:           Build system library, like Make, but properly supports generated files.
description:
    Shake is a Haskell library for writing build systems - designed as a
    replacement for make. To use Shake the user writes a Haskell program
    that imports the Shake library, defines some build rules, and calls
    shake. Thanks to do notation and infix operators, a simple Shake program
    is not too dissimilar from a simple Makefile. However, as build systems
    get more complex, Shake is able to take advantage of the excellent
    abstraction facilities offered by Haskell and easily support much larger
    projects.
    .
    The Shake library provides all the standard features available in other
    build systems, including automatic parallelism and minimal rebuilds.
    Shake provides highly accurate dependency tracking, including seamless
    support for generated files, and dependencies on system information
    (i.e. compiler version). Shake will eventually be able to produce profile reports, indicating
    which files and take longest to build, and providing an analysis of the
    parallelism.
    .
    The theory behind an old version of Shake is described in a video at
    <http://vimeo.com/15465133>, and an example is given at the top of
    "Development.Shake". Some further examples are included in the Cabal tarball,
    under the @Examples@ directory.
homepage:           http://community.haskell.org/~ndm/shake/
stability:          Beta
extra-source-files:
    Examples/Tar/list.txt


source-repository head
    type:     darcs
    location: http://community.haskell.org/~ndm/darcs/shake/

flag testprog
    default: True
    description: Build the test program

library
    build-depends:
        base == 4.*,
        old-time,
        directory,
        hashable,
        binary,
        filepath,
        process,
        unordered-containers,
        bytestring,
        time,
        transformers == 0.2.*,
        deepseq >= 1.1 && < 1.4

    exposed-modules:
        Development.Shake
        Development.Shake.FilePath

    other-modules:
        Development.Shake.Binary
        Development.Shake.Core
        Development.Shake.Database
        Development.Shake.Derived
        Development.Shake.Directory
        Development.Shake.File
        Development.Shake.FilePattern
        Development.Shake.Files
        Development.Shake.FileTime
        Development.Shake.Locks
        Development.Shake.Oracle
        Development.Shake.Pool
        Development.Shake.TypeHash
        Development.Shake.Rerun
        Development.Shake.Value

executable shake
    main-is: Main.hs
    build-depends:
        random
    if flag(testprog)
        buildable: True
    else
        buildable: False

    other-modules:
        Examples.Util
        Examples.C.Main
        Examples.Self.Main
        Examples.Tar.Main
        Examples.Test.Basic1
        Examples.Test.Directory
        Examples.Test.Errors
        Examples.Test.FilePath
        Examples.Test.Files
        Examples.Test.Pool
