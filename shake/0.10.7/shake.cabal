-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:fd00f882a40f052121de81db3314c2a5
    SHA1:1f78904ac4ea3bbf8e362251307da00e58b9b0f3
    SHA256:fb41b4e9be9c55656d88d91e63c5e8d2e3e77776a7e98158c83dbed5e89f8864
    SHA512:59d9dfb2f122a23710d92c90835416ea12113ab73668250b86b8b42866f5f3459fd6e11b0c32a3562272b2428b5db42c59dbfdb8cc62a453ea0a2ef3ca3c6dbb
    Skein512_512:bf1344b3cb00bb0b94ec15e73dee2a87171854aef8ecd7fa2ab10aa0200d90e8de8962c19c5e9598dc25ff2e6f753cf8faecb826a7fc981f3bfb17c2f8998312

package-locations:
    https://hackage.haskell.org/package/shake-0.10.7/shake-0.10.7.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/shake-0.10.7.tar.gz

package-size: 466882
-- END Added by all-cabal-hashes-tool

cabal-version:      >= 1.8
build-type:         Simple
name:               shake
version:            0.10.7
x-revision: 1
license:            BSD3
license-file:       LICENSE
category:           Development
author:             Neil Mitchell <ndmitchell@gmail.com>
maintainer:         Neil Mitchell <ndmitchell@gmail.com>
copyright:          Neil Mitchell 2011-2013
synopsis:           Build system library, like Make, but more accurate dependencies.
description:
    Shake is a Haskell library for writing build systems - designed as a
    replacement for @make@. See "Development.Shake" for an introduction,
    including an example. Further examples are included in the Cabal tarball,
    under the @Examples@ directory.
    .
    To use Shake the user writes a Haskell program
    that imports "Development.Shake", defines some build rules, and calls
    the 'Development.Shake.shake' function. Thanks to do notation and infix
    operators, a simple Shake build system
    is not too dissimilar from a simple Makefile. However, as build systems
    get more complex, Shake is able to take advantage of the excellent
    abstraction facilities offered by Haskell and easily support much larger
    projects.
    .
    The Shake library provides all the standard features available in other
    build systems, including automatic parallelism and minimal rebuilds.
    Shake provides highly accurate dependency tracking, including seamless
    support for generated files, and dependencies on system information
    (i.e. compiler version). Shake can produce profile reports, indicating
    which files and take longest to build, and providing an analysis of the
    parallelism.
    .
    The theory behind Shake is described in an ICFP 2012 paper,
    Shake Before Building -- Replacing Make with Haskell
    <http://community.haskell.org/~ndm/downloads/paper-shake_before_building-10_sep_2012.pdf>.
    The associated talk forms a short overview of Shake
    <http://www.youtube.com/watch?v=xYCPpXVlqFM>.
homepage:           http://community.haskell.org/~ndm/shake/
stability:          Beta
extra-source-files:
    Examples/C/constants.c
    Examples/C/constants.h
    Examples/C/main.c
    Examples/MakeTutor/Makefile
    Examples/MakeTutor/hellofunc.c
    Examples/MakeTutor/hellomake.c
    Examples/MakeTutor/hellomake.h
    Examples/Tar/list.txt
    Examples/Ninja/*.ninja
    Paths.hs

data-files:
    html/jquery.flot.js
    html/jquery.flot.stack.js
    html/jquery.js
    html/viz.js
    html/report.html
    html/shake-logic.js
    html/shake-ui.js
    html/shake-util.js

source-repository head
    type:     git
    location: git://github.com/ndmitchell/shake.git

flag testprog
    default: False
    description: Build the test program

flag portable
    default: False
    description: Obtain FileTime using portable functions

library
    build-depends:
        base == 4.*,
        old-time,
        directory,
        hashable >= 1.1.2.3 && < 1.3,
        binary,
        filepath < 1.3.1,
        process >= 1.1,
        unordered-containers >= 0.2.1 && < 0.3,
        bytestring,
        utf8-string >= 0.3,
        time,
        random,
        transformers >= 0.2 && < 0.4,
        deepseq >= 1.1 && < 1.4

    if flag(portable)
        cpp-options: -DPORTABLE
    else
        if !os(windows)
            build-depends: unix >= 2.6

    exposed-modules:
        Development.Shake
        Development.Shake.Classes
        Development.Shake.Command
        Development.Shake.FilePath
        Development.Shake.Sys

    other-modules:
        Development.Shake.Args
        Development.Shake.Binary
        Development.Shake.Core
        Development.Shake.Database
        Development.Shake.Derived
        Development.Shake.Directory
        Development.Shake.Errors
        Development.Shake.File
        Development.Shake.FilePattern
        Development.Shake.Files
        Development.Shake.FileTime
        Development.Shake.Intern
        Development.Shake.Oracle
        Development.Shake.Pool
        Development.Shake.Progress
        Development.Shake.Report
        Development.Shake.Rerun
        Development.Shake.Resource
        Development.Shake.Shake
        Development.Shake.Special
        Development.Shake.Storage
        Development.Shake.Timing
        Development.Shake.Types
        Development.Shake.Util
        Development.Shake.Value
        Paths_shake


executable shake
    main-is: Main.hs
    ghc-options: -threaded -rtsopts "-with-rtsopts=-I0 -qg -qb"
    build-depends:
        base == 4.*,
        old-time,
        directory,
        hashable >= 1.1.2.3 && < 1.3,
        binary,
        filepath,
        process >= 1.1,
        unordered-containers >= 0.2.1 && < 0.3,
        bytestring,
        utf8-string >= 0.3,
        time,
        random,
        transformers >= 0.2 && < 0.4,
        deepseq >= 1.1 && < 1.4

    if flag(portable)
        cpp-options: -DPORTABLE
    else
        if !os(windows)
            build-depends: unix >= 2.6

    other-modules:
        Development.Make.All
        Development.Make.Env
        Development.Make.Parse
        Development.Make.Rules
        Development.Make.Type
        Development.Ninja.All
        Development.Ninja.Env
        Development.Ninja.Parse
        Development.Ninja.Type
        Start


executable shake-test
    main-is: Test.hs
    if flag(testprog)
        buildable: True
    else
        buildable: False
    ghc-options: -threaded -rtsopts
    build-depends:
        base == 4.*,
        old-time,
        directory,
        hashable >= 1.1.2.3 && < 1.3,
        binary,
        filepath,
        process >= 1.1,
        unordered-containers >= 0.2.1 && < 0.3,
        bytestring,
        utf8-string >= 0.3,
        time,
        random,
        transformers >= 0.2 && < 0.4,
        deepseq >= 1.1 && < 1.4

    if flag(portable)
        cpp-options: -DPORTABLE
    else
        if !os(windows)
            build-depends: unix >= 2.6

    other-modules:
        Development.Make.All
        Development.Make.Env
        Development.Make.Parse
        Development.Make.Rules
        Development.Make.Type
        Development.Ninja.All
        Development.Ninja.Parse
        Development.Ninja.Type
        Examples.Util
        Examples.C.Main
        Examples.Ninja.Main
        Examples.Self.Main
        Examples.Tar.Main
        Examples.Test.Assume
        Examples.Test.Basic
        Examples.Test.Benchmark
        Examples.Test.Cache
        Examples.Test.Command
        Examples.Test.Directory
        Examples.Test.Docs
        Examples.Test.Errors
        Examples.Test.FilePath
        Examples.Test.FilePattern
        Examples.Test.Files
        Examples.Test.Journal
        Examples.Test.Lint
        Examples.Test.Makefile
        Examples.Test.Oracle
        Examples.Test.Pool
        Examples.Test.Progress
        Examples.Test.Random
        Examples.Test.Resources
        Examples.Test.Throttle
        Examples.Test.Unicode
        Start
