-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:862e778dcf9bd92ac70e2146e9db0e78
    SHA1:19f9c3a1f3e169ce5cd0ef638ed470bfa7866aea
    SHA256:0aa926c37ed046dcac78922f00b1fbbc6374b1dc4f8d5222fde722d4142e26b4
    SHA512:2f47a041727e3331b32cbc76bc02f00328099b82792fd64cb7930a89051fd00823de00ba57a19fdbe577b870b29bf81456235dbae5e47cf15b58ddbafc32e0b3
    Skein512_512:34211334cc78c23d9a0a30368fb693a5ffbd4131fd9f868104072e99759135a97f489314ec1edd97d0fff9ce2e360917287d35e96aafa5f6029a6f050bc3bef4

x-package-locations:
    https://hackage.haskell.org/package/shake-0.1.5/shake-0.1.5.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/shake-0.1.5.tar.gz

x-package-size: 23339
-- END Added by all-cabal-hashes-tool

cabal-version:      >= 1.6
build-type:         Simple
name:               shake
version:            0.1.5
license:            BSD3
license-file:       LICENSE
category:           Development
author:             Neil Mitchell <ndmitchell@gmail.com>
maintainer:         Neil Mitchell <ndmitchell@gmail.com>
copyright:          Neil Mitchell 2011
synopsis:           Build system library, like Make, but properly supports generated files.
description:
    /WARNING/: Shake has only been lightly tested, and there will be bugs (please report them).
    The interface is likely to change, although hopefully not significantly. It would be unwise
    to build a critical production system on top of the current version of Shake.
    .
    Shake is a Haskell library for writing build systems - designed as a
    replacement for make. To use Shake the user writes a Haskell program
    that imports the Shake library, defines some build rules, and calls
    shake. Thanks to do notation and infix operators, a simple Shake program
    is not too dissimilar from a simple Makefile. However, as build systems
    get more complex, Shake is able to take advantage of the excellent
    abstraction facilities offered by Haskell and easily support much larger
    projects.
    .
    The Shake library provides all the standard features available in other
    build systems, including automatic parallelism and minimal rebuilds.
    Shake provides highly accurate dependency tracking, including seamless
    support for generated files, and dependencies on system information
    (i.e. compiler version). Shake will eventually be able to produce profile reports, indicating
    which files and take longest to build, and providing an analysis of the
    parallelism.
    .
    The theory behind an old version of Shake is described in a video at
    <http://vimeo.com/15465133>, and an example is given at the top of
    "Development.Shake". Some further examples are included in the Cabal tarball,
    under the @Examples@ directory.
homepage:           http://community.haskell.org/~ndm/shake/
stability:          Beta
extra-source-files:
    Examples/Tar/list.txt


source-repository head
    type:     darcs
    location: http://community.haskell.org/~ndm/darcs/shake/

flag testprog
    default: True
    description: Build the test program

library
    build-depends:
        base == 4.*,
        old-time,
        directory,
        hashable,
        binary,
        filepath,
        process,
        unordered-containers,
        bytestring,
        time,
        parallel-io,
        transformers == 0.2.*,
        access-time == 0.1.*,
        deepseq >= 1.1 && < 1.3

    exposed-modules:
        Development.Shake
        Development.Shake.FilePath

    other-modules:
        Development.Shake.Binary
        Development.Shake.Core
        Development.Shake.Database
        Development.Shake.Derived
        Development.Shake.Directory
        Development.Shake.File
        Development.Shake.FilePattern
        Development.Shake.Files
        Development.Shake.FileTime
        Development.Shake.Locks
        Development.Shake.TypeHash
        Development.Shake.Value

executable shake
    main-is: Main.hs
    if flag(testprog)
        buildable: True
    else
        buildable: False

    other-modules:
        Examples.Util
        Examples.Self.Main
        Examples.Test.Basic1
        Examples.Test.Directory
        Examples.Test.Errors
        Examples.Test.Files
        Examples.Tar.Main
