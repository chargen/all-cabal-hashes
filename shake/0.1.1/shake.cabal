-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:cb7e5356e3c396af3e5675d98d1f6652
    SHA1:15fc72c91ecf67b496dba391b34d5d16061c54cd
    SHA256:0abb1a910f5cdd30ad892d304411e6ed26a85846c1137d3c61922086a18cfc4c
    SHA512:9e44615c2c485950b34b37c64aa7b381ca60c24429ef196f9512a47fa70e7e64c002c7b274363b9c0d9f9d4fd79e8fb1889dc386627847d27eb4556f328b4648
    Skein512_512:8dc4a6345e304fc2ba631625b42d7a8157a05e74bb51c1480badee625ed7003d564ce494dd616606e2009e4170362a24e3be9ae12d00493305945b3506b675a4

package-locations:
    https://hackage.haskell.org/package/shake-0.1.1/shake-0.1.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/shake-0.1.1.tar.gz

package-size: 16465
-- END Added by all-cabal-hashes-tool

cabal-version:      >= 1.6
build-type:         Simple
name:               shake
version:            0.1.1
license:            BSD3
license-file:       LICENSE
category:           Development
author:             Neil Mitchell <ndmitchell@gmail.com>
maintainer:         Neil Mitchell <ndmitchell@gmail.com>
copyright:          Neil Mitchell 2011
synopsis:           Build system creator
description:
    Shake is a Haskell library for writing build systems - designed as a
    replacement for make. To use Shake the user writes a Haskell program
    that imports the Shake library, defines some build rules, and calls
    shake. Thanks to do notation and infix operators, a simple Shake program
    is not too dissimilar from a simple Makefile. However, as build systems
    get more complex, Shake is able to take advantage of the excellent
    abstraction facilities offered by Haskell and easily support much larger
    projects.
    .
    The Shake library provides all the standard features available in other
    build systems, including automatic parallelism and minimal rebuilds.
    Shake provides highly accurate dependency tracking, including seamless
    support for generated files, and dependencies on system information
    (i.e. compiler version). Shake will eventually be able to produce profile reports, indicating
    which files and take longest to build, and providing an analysis of the
    parallelism.
    .
    The theory behind an old version of Shake is described in a video at
    <http://vimeo.com/15465133>, and an example is given at the top of
    "Development.Shake". Some further examples are included in the Cabal tarball,
    under the @Examples@ directory.
homepage:           http://community.haskell.org/~ndm/shake/
stability:          Beta
extra-source-files:
    Examples/Tar/list.txt


source-repository head
    type:     darcs
    location: http://community.haskell.org/~ndm/darcs/shake/

flag testprog
    default: True
    description: Build the test program

library
    build-depends:
        base == 4.*,
        old-time,
        directory,
        hashable,
        binary,
        filepath,
        process,
        unordered-containers,
        bytestring,
        time,
        parallel-io,
        transformers == 0.2.*

    exposed-modules:
        Development.Shake
        Development.Shake.FilePath

    other-modules:
        Development.Shake.Binary
        Development.Shake.Core
        Development.Shake.Database
        Development.Shake.Derived
        Development.Shake.Directory
        Development.Shake.File
        Development.Shake.Locks
        Development.Shake.TypeHash
        Development.Shake.Value

executable shake
    main-is: Main.hs
    if flag(testprog)
        buildable: True
    else
        buildable: False

    other-modules:
        Examples.Tar.Main
        Examples.Self.Main
