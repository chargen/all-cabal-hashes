name: MFlow
version: 0.2.0.6
cabal-version: >=1.6
build-type: Simple
license: BSD3
license-file: LICENSE
maintainer: agocorona@gmail.com
stability: experimental
Bug-reports: https://github.com/agocorona/MFlow/issues
synopsis: Web app server for stateful processes with safe, composable user interfaces.
description: A Web framework with some unique features thanks to the power of the Haskell language.
             MFlow run stateful server processes; All the flow of requests and responses are coded by the programmer in a single function.
             Allthoug single request-response flows and callbacks are possible. Therefore, the code is
             more understandable.
             .
             These processes are stopped and restarted by the
             application server on demand, including its execution state. Therefore session management
             is automatic. State consistence and transactions are given by the TCache package.
             .
             The processes interact trough widgets, that are an extension of formlets with
             additional applicative combinators, formatting, link management, callbacks, modifiers, caching,
             byteString conversion and AJAX. All is coded in pure haskell.
             .
             The interfaces and communications are abstract, but there are bindings for blaze-html, HSP, Text.XHtml and byteString
             , Hack and WAI but it can be extended to non Web based architectures.
             .
             Bindings for hack, and hsp >= 0.8,  are not compiled by Hackage, and do not appear, but are included in the package files.
             To use them, add then to the exported modules and execute cabal install
             .
             The previous release add transparent back button management, cached widgets, callbacks, modifiers, heterogeneous formatting, AJAX,
             and WAI integration.
             .
             This version add better WAI integration, higher level dynamic Widgets, content management, multilanguage, blaze-html support,
             stateful ajax for server-side control, user-defined data in sessions and widget requirements for automatic installation of scripts, CSS and server flows.

             .
             It is designed for applications that can be run with no deployment with runghc in order
             to speed up the development process.
             .
             See "MFlow.Forms" for details
             .
             Although still it is experimental, it is being used in at least one future commercial project. So I have te commitment to
             continue its development. There are many examples in the documentation and in the package.
             .
             To do:
             .
             -Clustering
             .
category: Web, Application Server
author: Alberto GÃ³mez Corona
data-dir: ""
extra-source-files: Demos/demos.blaze.hs
                  , src/MFlow/Hack.hs
                  , src/MFlow/Hack/Response.hs
                  , src/MFlow/Hack/XHtml.hs
                  , src/MFlow/Hack/XHtml/All.hs
                  , src/MFlow/Forms/HSP.hs

source-repository head
    type: git
    location: http://github.com/agocorona/MFlow

library
    build-depends: Workflow -any, transformers -any, mtl -any,
                   extensible-exceptions -any, xhtml -any, base >4.0 && <5,
                   bytestring -any, containers -any, RefSerialize -any, TCache -any,
                   stm >2, old-time -any, vector -any, directory -any,
                   utf8-string -any, wai -any, case-insensitive -any, http-types -any,
                   conduit -any, text -any, parsec -any, warp -any,
                   random -any,
                   blaze-html -any, blaze-markup -any
    exposed-modules: MFlow MFlow.Wai.Blaze.Html.All
                     MFlow.Forms MFlow.Forms.Admin
                     MFlow.Cookies  MFlow.Wai
                     MFlow.Wai.XHtml.All MFlow.Forms.XHtml
                     MFlow.Forms.Blaze.Html MFlow.Forms.Test
                     MFlow.Forms.Widgets
    other-modules: MFlow.Forms.Internals MFlow.Wai.Response
    exposed: True
    buildable: True
    hs-source-dirs: src .



package-hashes:
    MD5:590fdace44e1d1c5c2b66a5648139bf0
    SHA1:0a685ba4eec6ae8e4db1b2b7b8570b6f8e536e07
    SHA256:b1f641a7644fc5bc73216a92f2f68f58b7f76f61413409c13ed2c439096da58b
    SHA512:700cbed1ed37f46d8ea6748f2bc5e50b4ab8f2e7c6fe0afbb524e12d7a7df7d46e194500c5e67f66c69453a8d603631fe7030a3f8a9693b20a9222c1ef753105
    Skein512_512:eb575016b979d4b880c6f32922c47b8dd11fa3fd2b6c43dae5032934c5b069dbaa1ab1efefd5a13019b99682320efff4c216681946491f74cd40ba90c1313a54

package-locations:
    https://hackage.haskell.org/package/MFlow-0.2.0.6/MFlow-0.2.0.6.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/MFlow-0.2.0.6.tar.gz

package-size: 56831
