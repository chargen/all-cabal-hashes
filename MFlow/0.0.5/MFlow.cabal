-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:434f93a5ff153224d27e7150a3ef1a3b
    SHA1:063ef425dc17e874c3c6e0bea5daa5ea861b828a
    SHA256:2d3a06a39b264fa0b2cfaae522777c91747d56ccca5ff5907c8fc76a1b46e90b
    SHA512:573a4bf66a54d248d009832e92d55eac3d3ad672dbbf9d2d247664cf04ad094328f3e8ecf81bff16acd09beba1897bf0f14cc02356a7fc7d91948a193f4d9ece
    Skein512_512:70817df3f690059df3259c23f8066c77b32ffc6cee8ba9f2a7f4e12a3921d2ad7b909817c61913b8dc3e045c2af7d102d21e43f43a92bfba0df52a93323d8038

x-package-locations:
    https://hackage.haskell.org/package/MFlow-0.0.5/MFlow-0.0.5.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/MFlow-0.0.5.tar.gz

x-package-size: 38445
-- END Added by all-cabal-hashes-tool

name: MFlow
version: 0.0.5
cabal-version: >= 1.6
build-type: Simple
license: BSD3
license-file: LICENSE
maintainer: agocorona@gmail.com
stability: experimental
synopsis: Web application serverfor processes with type safe, composable user interfaces.

description: It is a Web framework with some unique features thanks to the power of the Haskell language.
             MFlow run stateful server processes. Because flows are stateful, not event driven, the code is more
             understandable, because all the flow of request and responses is coded by the programmer in a single function.
             Allthoug single request-response flows and callbacks are possible.
             .
             Technically it is a Web application server for stateful processes (flows) that are optionally persistent.
             These processes interact with the user trough interfaces made of widgets that return back statically typed responses to
             the calling process. All is coded in pure haskell (with optional XML from Haskell Server Pages).
             It adopt and extend the formlet/applicative approach. It has bindings for HSP and Text.XHtml
             .
             It includes Application Server features such is process and session timeouts
             and automatic recovery of flow execution state.
             .
             This release add transparent back button management, cached widgets, callbacks, modifiers, heterogeneous formatting AJAX,
             and WAI integration.
             .
             It is designed for coding an entire application in a single file to be run with runghc in order
             to speed up the prototyping process.
             .
             See "MFlow.Forms" for details
             .
             Altroug still it is experimental, it is used in at least one future commercial project. So I have te commitment to
             continue its development. There are many examples in the documentation and in the package.
             .
             To do:
             .
             -Clustering
             .

category: Web, Application Server
author: Alberto GÃ³mez Corona
data-dir: ""
extra-source-files: Demos/ShoppingCart.hs, Demos/ShoppingCart.Wai.hs, Demos/demos.hs

library
    build-depends: Workflow -any, transformers -any, mtl -any,
                   extensible-exceptions -any, xhtml -any, base >4.0 && <4.6,
                   hack -any, hack-handler-simpleserver -any, bytestring -any,
                   containers -any, RefSerialize -any, TCache -any, stm >2,
                   old-time -any, vector -any, hsp -any, directory -any,
                   utf8-string -any, wai -any, case-insensitive -any, http-types -any, conduit -any
                   ,text -any, parsec -any,warp -any

    exposed-modules: MFlow.Forms

                     MFlow.Forms.Admin MFlow MFlow.FileServer
                     MFlow.Forms.Ajax MFlow.Cookies
                     MFlow.Hack.Response, MFlow.Hack MFlow.Hack.XHtml MFlow.Hack.XHtml.All
                     MFlow.Wai.Response, MFlow.Wai, MFlow.Wai.XHtml.All
                     MFlow.Forms.XHtml
                     MFlow.Forms.HSP
    exposed: True
    buildable: True
    hs-source-dirs: src .
    other-modules:

source-repository head
    type: git
    location: http://github.com/agocorona/MFlow
