name: MFlow
version: 0.3.0.2
cabal-version: >=1.8
build-type: Simple
license: BSD3
license-file: LICENSE
maintainer: agocorona@gmail.com
stability: experimental
Bug-reports: https://github.com/agocorona/MFlow/issues
synopsis: stateful, RESTful web framework
description: MFlow run stateful server processes. This version is the first stateful web framework
             that is as RESTful as a web framework can be.
             .
             The routes are expressed as normal, monadic haskell code in the FlowM monad. Local links
             point to alternative routes within this monadic computation just like a textual menu
             in a console application. Any GET page is directly reachable by means of a RESTful URL.
             .
             All the flow of requests and responses are coded by the programmer in a single procedure.
             Allthoug single request-response flows are possible. Therefore, the code is
             more understandable. It is not continuation based. It uses a log for thread state persistence and backtracking for
             handling the back button. Back button state syncronization is supported out-of-the-box
             .
             The MFlow architecture is scalable, since the state is serializable and small
             .
             The processes are stopped and restarted by the
             application server on demand, including the execution state (if the Wokflow monad is used).
             Therefore session management is automatic. State consistence and transactions are given by the TCache package.
             .
             The processes interact trough widgets, that are an extension of formlets with
             additional applicative combinators, formatting, link management, callbacks, modifiers, caching,
             byteString conversion and AJAX. All is coded in pure haskell.
             .
             The interfaces and communications are abstract, but there are bindings for blaze-html, HSP, Text.XHtml and byteString
             , Hack and WAI but it can be extended to non Web based architectures.
             .
             Bindings for hack, and hsp >= 0.8,  are not compiled by Hackage, and do not appear, but are included in the package files.
             To use them, add then to the exported modules and execute cabal install
             .
             It is designed for applications that can be run with no deployment with runghc in order
             to speed up the development process. see <http://haskell-web.blogspot.com.es/2013/05/a-web-application-in-tweet.html>
             .
             This release includes:
             .
             - /RESTful/ URLs
             .
             - Automatic independent refreshing of widgets via Ajax. (see <http://haskell-web.blogspot.com.es/2013/06/and-finally-widget-auto-refreshing.html>)
             .
             - Now each widget can be monadic so it can express his own behaviour and can run its own independent page flow. (see <http://haskell-web.blogspot.com.es/2013/06/the-promising-land-of-monadic-formlets.html>)
             .
             - Per-widget callbacks, used in page flows, that change the rendering of the widget (see <http://haskell-web.blogspot.com.es/2013/06/callbacks-in-mflow.html>)
             .
             - Widgets in modal and non modal dialogs  (using jQuery dialog)
             .
             - Other jQuery widgets as MFlow widgets: spinner, datepicker
             .
             The version 0.2 added better WAI integration, higher level dynamic Widgets, content management, multilanguage, blaze-html support,
             stateful ajax for server-side control, user-defined data in sessions and widget requirements for automatic installation of scripts, CSS and server flows.
             .
             The version  0.1 added transparent back button management, cached widgets, callbacks, modifiers, heterogeneous formatting, AJAX,
             and WAI integration.
             .
             See "MFlow.Forms" for details
             .             .
             To do:
             .
             -Clustering
             .
             -Automatic error traces
             .
             In this release I commented out the build of the demo/test program.
            
category: Web, Application Server
author: Alberto GÃ³mez Corona
data-dir: ""
extra-source-files: Demos/demos-blaze.hs
                  , Demos/testREST.hs
                  , src/MFlow/Hack.hs
                  , src/MFlow/Hack/Response.hs
                  , src/MFlow/Hack/XHtml.hs
                  , src/MFlow/Hack/XHtml/All.hs
                  , src/MFlow/Forms/HSP.hs


source-repository head
    type: git
    location: http://github.com/agocorona/MFlow

library
    build-depends: Workflow -any, transformers -any, mtl -any,
                   extensible-exceptions -any, xhtml -any, base >4.0 && <5,
                   bytestring -any, containers -any, RefSerialize -any, TCache -any,
                   stm >2, old-time -any, vector -any, directory -any,
                   utf8-string -any, wai -any, case-insensitive -any, http-types -any,
                   conduit -any, text -any, parsec -any, warp -any,
                   random -any,
                   blaze-html -any, blaze-markup -any
                  

    exposed-modules: MFlow MFlow.Wai.Blaze.Html.All
                     MFlow.Forms MFlow.Forms.Admin
                     MFlow.Cookies  MFlow.Wai
                     MFlow.Wai.XHtml.All MFlow.Forms.XHtml
                     MFlow.Forms.Blaze.Html MFlow.Forms.Test
                     MFlow.Forms.Widgets
    other-modules: MFlow.Forms.Internals MFlow.Wai.Response
    exposed: True
    buildable: True
    hs-source-dirs: src .

-- executable demos-blaze
--    build-depends: MFlow -any, RefSerialize -any, TCache -any, directory -any,
--                   Workflow -any, base -any, blaze-html -any, bytestring -any,
--                   containers -any, mtl -any, old-time -any, stm -any,
--                   text -any, transformers -any, vector -any,  hamlet -any
--    main-is: "demos-blaze.hs"
--    ghc-options:
--        -threaded
--        -rtsopts
--    buildable: True
--    hs-source-dirs: Demos


package-hashes:
    MD5:fe5d747ac0e70dfdff29e17767d1b68d
    SHA1:be667ed11ccb0f0e01e2325a70401a8019867458
    SHA256:aae474fcd6ae63875fd20545bcf8095c15b4fb007b20aba02edd830d4284706a
    SHA512:bd890b1566292ec7314996298fd7ae9eb8588db14a7f9941d767fbb43a63fd76bf0cd170d907d9204248c7bc8c12f86d0ba7aeaaea0cdb42dc350b60f78d602e
    Skein512_512:fed7384f94a0ba479d8790ef9ad8414a1f10f5d6ec3467d513a8a90b41d26766def521a8e7f69f727026a2e9743a903cf16640544a559565225e3a47a725193e

package-locations:
    https://hackage.haskell.org/package/MFlow-0.3.0.2/MFlow-0.3.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/MFlow-0.3.0.2.tar.gz

package-size: 72422
