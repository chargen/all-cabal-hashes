-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:92f1d0d3ca56ddf1519aa4ea5b9c7a93
    SHA1:4f2ab05e625d943991a2616ba9837676acb82d49
    SHA256:5ffb97b7a916a70e742d65273e4c7c7b50b281797db11e17e7e02158e343f5fb
    SHA512:f7133c36a86e71c5a44fea8f7c92b66aa0ce2b1a08121eafaaea6a40e8a00720e2c6130407ed8cbc0085c26a279bc8dc4affddbcf7d7aa93cf05ae9d1efcbb79
    Skein512_512:632fac9d7635ce36d7a92c243657873ee302e340ad8989031a11e9fdb3cd90d4dec62633adeb741f41bb0fe385a81a8dd8b968315f6a92f9443d17653712efdd

package-locations:
    https://hackage.haskell.org/package/HTTP-4000.2.19/HTTP-4000.2.19.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/HTTP-4000.2.19.tar.gz

package-size: 71287
-- END Added by all-cabal-hashes-tool

Name: HTTP
Version: 4000.2.19
Cabal-Version: >= 1.8
Build-type: Simple
License: BSD3
License-file: LICENSE
Author: Warrick Gray <warrick.gray@hotmail.com>
Maintainer: Ganesh Sittampalam <ganesh@earth.li>
Homepage: https://github.com/haskell/HTTP
Category: Network
Synopsis: A library for client-side HTTP
Description: 

 The HTTP package supports client-side web programming in Haskell. It lets you set up 
 HTTP connections, transmitting requests and processing the responses coming back, all
 from within the comforts of Haskell. It's dependent on the network package to operate,
 but other than that, the implementation is all written in Haskell.
 .
 A basic API for issuing single HTTP requests + receiving responses is provided. On top
 of that, a session-level abstraction is also on offer  (the @BrowserAction@ monad);
 it taking care of handling the management of persistent connections, proxies,
 state (cookies) and authentication credentials required to handle multi-step
 interactions with a web server.
 .
 The representation of the bytes flowing across is extensible via the use of a type class,
 letting you pick the representation of requests and responses that best fits your use.
 Some pre-packaged, common instances are provided for you (@ByteString@, @String@).
 .
 Here's an example use:
 .
 >
 >    do
 >      rsp <- Network.HTTP.simpleHTTP (getRequest "http://www.haskell.org/")
 >              -- fetch document and return it (as a 'String'.)
 >      fmap (take 100) (getResponseBody rsp)
 >
 >    do
 >      (_, rsp)
 >         <- Network.Browser.browse $ do
 >               setAllowRedirects True -- handle HTTP redirects
 >               request $ getRequest "http://www.haskell.org/"
 >      return (take 100 (rspBody rsp))

Extra-Source-Files: CHANGES

Source-Repository head
  type: git
  location: https://github.com/haskell/HTTP.git

Flag mtl1
  description: Use the old mtl version 1.
  default: False

Flag warn-as-error
  default:     False
  description: Build with warnings-as-errors
  manual:      True

Flag network23
  description: Use version 2.3.x or below of the network package
  default: False

Flag conduit10
  description: Use version 1.0.x or below of the conduit package (for the test suite)
  default: False

Flag warp-tests
  description: Test against warp
  default:     True
  manual:      True

flag network-uri
  description: Get Network.URI from the network-uri package
  default: True

Library
  Exposed-modules: 
                 Network.BufferType,
                 Network.Stream,
                 Network.StreamDebugger,
                 Network.StreamSocket,
                 Network.TCP,                
                 Network.HTTP,
                 Network.HTTP.Headers,
                 Network.HTTP.Base,
                 Network.HTTP.Stream,
                 Network.HTTP.Auth,
                 Network.HTTP.Cookie,
                 Network.HTTP.Proxy,
                 Network.HTTP.HandleStream,
                 Network.Browser
  Other-modules:
                 Network.HTTP.Base64,
                 Network.HTTP.MD5Aux,
                 Network.HTTP.Utils
                 Paths_HTTP
  GHC-options: -fwarn-missing-signatures -Wall

  -- note the test harness constraints should be kept in sync with these
  -- where dependencies are shared
  Build-depends: base >= 4.3.0.0 && < 4.9, parsec >= 2.0 && < 3.2
  Build-depends: array >= 0.3.0.2 && < 0.6, old-time >= 1.0.0.0 && < 1.2, bytestring >= 0.9.1.5 && < 0.11

  Extensions: FlexibleInstances

  if flag(mtl1)
    Build-depends: mtl >= 1.1.1.0 && < 1.2
    CPP-Options: -DMTL1
  else
    Build-depends: mtl >= 2.0 && < 2.3

  if flag(network-uri)
    Build-depends: network-uri == 2.6.*, network == 2.6.*
  else
    Build-depends: network >= 2.2.1.5 && < 2.6

  build-tools: ghc >= 7.0 && < 7.12

  if flag(warn-as-error)
    ghc-options:      -Werror

  if os(windows)
    Build-depends: Win32 >= 2.2.0.0 && < 2.4

Test-Suite test
  type: exitcode-stdio-1.0

  build-tools: ghc >= 7.0 && < 7.12

  hs-source-dirs: test
  main-is: httpTests.hs

  other-modules:
    Httpd
    UnitTests

  -- note: version constraints for dependencies shared with the library
  -- should be the same
  build-depends:     HTTP,
                     HUnit >= 1.2.0.1 && < 1.3,
                     httpd-shed >= 0.4 && < 0.5,
                     mtl >= 1.1.1.0 && < 2.3,
                     bytestring >= 0.9.1.5 && < 0.11,
                     deepseq >= 1.3.0.0 && < 1.5,
                     pureMD5 >= 0.2.4 && < 2.2,
                     base >= 4.3.0.0 && < 4.9,
                     split >= 0.1.3 && < 0.3,
                     test-framework >= 0.2.0 && < 0.9,
                     test-framework-hunit >= 0.3.0 && <0.4

  if flag(network-uri)
    Build-depends: network-uri == 2.6.*, network == 2.6.*
  else
    Build-depends: network >= 2.2.1.5 && < 2.6

  if flag(warp-tests)
    CPP-Options: -DWARP_TESTS
    build-depends:
                       case-insensitive >= 0.4.0.1 && < 1.3,
                       http-types >= 0.8.0 && < 0.9,
                       wai >= 2.1.0 && < 3.1,
                       warp >= 2.1.0 && < 3.1

    if flag(conduit10)
      build-depends:
                         conduit >= 1.0.8 && < 1.1
    else
      build-depends:
                         conduit >= 1.1 && < 1.3,
                         conduit-extra >= 1.1 && < 1.2


