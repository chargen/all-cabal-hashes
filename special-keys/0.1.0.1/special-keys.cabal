-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:310ca82056d1bec354ea680e70681ed8
    SHA1:9e63fd983caf2cda4b4d7efdb646450f943f2bcb
    SHA256:deb9ca697a62c5787ed46825d4c7c1e432ced613ac723c694ff7a76457d94a62
    SHA512:6781211c185c64d232e78ddd06bea469ab882eecaf3d364ff1875083e20fbbdfde17b429175bfde77cd657a60f72ae5f69dc3fa1e9fc48561913c220901d6ab4
    Skein512_512:91b458e26a2a0e55328428d2ba35ce3a16d7fc6949711ddafa450b0c6476ac70b2d44c26e264fb4d61958c06175139f471e07bed0b3b4d07de5d510ec402ea5b

x-package-locations:
    https://hackage.haskell.org/package/special-keys-0.1.0.1/special-keys-0.1.0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/special-keys-0.1.0.1.tar.gz

x-package-size: 3795
-- END Added by all-cabal-hashes-tool

name:                special-keys
version:             0.1.0.1
synopsis:            Simple data types that help me here and there. 
description:         Datatypes that I use as keys to index other data types. Here you will find a wrap of UUID and also constraints on Text so that it never exceeds a given number of characters.
license:             BSD3
license-file:        LICENSE
author:              Hugo Gomes
maintainer:          mr.hugo.gomes@gmail.com
-- copyright:           
category:            Data
build-type:          Simple
cabal-version:       >=1.8

library
  exposed-modules:  Keys.UUID,
                    Keys.Constraints,
                    Keys.Random

  -- other-modules:       
  build-depends:    base >= 4 && < 5,
                    hashable >= 1.2,
                    text >= 0.11,
                    safecopy >= 0.8,
                    cereal >= 0.3,
                    path-pieces >= 0.1,
                    blaze-markup >= 0.5,
                    deepseq >= 1.3,
                    primitive >= 0.5,
                    bytestring >= 0.10,
                    uuid >= 1.2,
                    mwc-random >= 0.12
