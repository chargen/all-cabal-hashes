-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:ba33e6c90f0d13a95d525da88876b89e
    SHA1:261163002396c025074438f83d01ad421ed310e2
    SHA256:ffe56b95d29919f3a8c885f8f0e4db180fc5e711e8c78f278c0cf17ac06ba4c2
    SHA512:908732d60c7eaaa338ac535b7669b8cf6b5b8372a10aac6841cdb38c9b711764111f60783335f65a53c398c143dcc9980a2220276027ffb8dacec66452317353
    Skein512_512:318ee497df0fe543130c7b5e15fd7048771c35e57e34b22d1950c61b80385b6bc04f3d5659946be1277a0c58e01b478b1c9ecd5677711c2f811ef672d12a6788

package-locations:
    https://hackage.haskell.org/package/imports-0.1.2.1/imports-0.1.2.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/imports-0.1.2.1.tar.gz

package-size: 3755
-- END Added by all-cabal-hashes-tool

-- Initial imports.cabal generated by cabal init.  For further 
-- documentation, see http://haskell.org/cabal/users-guide/

name:                imports
version:             0.1.2.1
synopsis:            Generate code for importing directories automatically
description:
  This module helps to automatically generate code for importing all the haskell files from directories.
  .
  = Synopsis
  .
  For <https://www.haskell.org/cabal/ cabal> inited project, we customize @Setup.hs@ file to generate the importing code.
  .
    * Be sure to modify the @build-type@ field in the @.cabal@ file from @Simple@ to @Custom@.
  .
    * Then modify the @main@ function in @Setup.hs@ to generate importing code by either header file or a module file.
  .
        Setup.hs:
  .
        > import Distribution.Simple
        > import System.Imports (writeImportsHeader, writeImportsModule)
        >
        > main = do
        >   writeImportsHeader "imports.header" "Export" "Some.Where" "Some/Where"
        >   -- or
        >   writeImportsModule "ImportAll.hs" "ImportAll" "Some.Where" "Some/Where"
        >
        >   defaultMain
  .
        Target.hs: (by header)
  .
        @
        &#123;\-\# LANGUAGE CPP \#\-&#125;
        module Target where
  .
        #include "imports.header"
  .
        func = Export.funcFromSomeWhere
        @
  .
        Target.hs: (by module)
  .
        @
        module Target where
  .
        import qualified ImportAll
  .
        func = ImportAll.funcFromSomeWhere
        @

homepage:            https://github.com/CindyLinz/Haskell-imports
license:             MIT
license-file:        LICENSE
author:              Cindy Wang (CindyLinz)
maintainer:          Cindy Wang (CindyLinz) <cindylinz@gmail.com>
copyright:           Copyright (C) 2015 Cindy Wang (CindyLinz)
category:            Development
build-type:          Simple
extra-source-files:  test/Material/A.hs
                   , test/Material/B/C/D.hs
cabal-version:       >=1.10

library
  exposed-modules:     System.Imports
  -- other-modules:       
  -- other-extensions:    
  build-depends:       base >=4.7 && <4.8
                     , directory ==1.2.*
                     , filepath ==1.3.*
                     , mtl ==2.2.*
  hs-source-dirs:      src
  default-language:    Haskell2010

test-suite test
  type:                exitcode-stdio-1.0
  build-depends:       base >=4.7 && <4.8
                     , directory ==1.2.*
                     , filepath ==1.3.*
                     , mtl ==2.2.*
  hs-source-dirs:      test
                     , src
  main-is:             Main.hs
