-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:eb98f6608633e729357993185653a071
    SHA1:10e4ec655a44bb47c0c904a49d54f75e2c0fbe8f
    SHA256:884764c24ff178289af5a1e9172c6afb1bdeb21c8acc968cfce44ba757d45fa1
    SHA512:35a6052433eaf6804d1ae3bb89464dbf37dfa9907b9dbe68330f25458bc0ffe2e5bdfa35addaba64f9a5629ff8aa237589612a45a6f1a7ade14dc416dca5d2a0
    Skein512_512:49261eb39384b6d05f4302d449d862d7a24e5a94fbed9aac5deca972b134b0793be24cd4d6402e37eae7ba260695fbe19ceb0be7b3d0dfeeea60af9e75c576e7

x-package-locations:
    https://hackage.haskell.org/package/taggy-0.1.3/taggy-0.1.3.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/taggy-0.1.3.tar.gz

x-package-size: 439147
-- END Added by all-cabal-hashes-tool

name:                taggy
version:             0.1.3
synopsis:            Efficient and simple HTML/XML parsing library
description:         
  /taggy/ is a simple package for parsing HTML (and should work with XML)
  written on top of the <http://hackage.haskell.org/package/attoparsec attoparsec>
  library, which makes it one of the most efficient (space and time consumption wise)
  on hackage.
  .
  This is the root module of /taggy/. It reexports everything
  from the package. See each module's docs for details about
  the functions and types involved in /taggy/.
  .
  While we've been testing the parser on /many/ pages, it may still
  be a bit rough around the edges. Let us know on <http://github.com/alpmestan/taggy/issues github>
  if you have any problem.
  .
  If you like to look at your HTML through
  various optical instruments, feel free to take a look at
  the companion <http://hackage.haskell.org/package/taggy-lens taggy-lens>
  package we've put up together. It makes HTML parsing a piece of cake.
  .
  If you want to parse a document as list of tags
  and go through it as some kind of stream by just picking
  what you need, head to "Text.Taggy.Parser" and take
  a look at 'Text.Taggy.Parser.taggyWith' and
  'Text.Taggy.Parser.run'.
  .
  If you want to parse the document as a DOM tree and
  traverse it to find the information you need,
  use 'Text.Taggy.DOM.parseDOM'. This is especially useful
  when combined with the helpful combinators from
  "Text.Taggy.Combinators".
  .
  If you build some HTML manually
  or just transform some existing DOM tree
  and want to turn it into a 'Data.Text.Lazy.Text'
  head to "Text.Taggy.Renderer" and look at 'Text.Taggy.Renderer.render'.
homepage:            http://github.com/alpmestan/taggy
license:             BSD3
license-file:        LICENSE
author:              Alp Mestanogullari, Vikram Verma
maintainer:          alpmestan@gmail.com
copyright:           2014 Alp Mestanogullari, Vikram Verma
category:            Text, Web
build-type:          Simple
extra-source-files:  html_files/*.html
data-files:          html_files/*.html
cabal-version:       >=1.10

library
  exposed-modules:     Text.Taggy,
                       Text.Taggy.Combinators,
                       Text.Taggy.DOM,
                       Text.Taggy.Entities,
                       Text.Taggy.Parser,
                       Text.Taggy.Renderer
                       Text.Taggy.Types
  other-modules:   
  build-depends:       base >=4.5 && <5,
                       blaze-html >= 0.7,
                       blaze-markup >= 0.6,
                       text >= 1,
                       attoparsec >=0.11,
                       vector >=0.7,
                       unordered-containers >= 0.2
  hs-source-dirs:      src
  default-language:    Haskell2010
  ghc-options:         -Wall -O2 -fno-warn-unused-do-bind -funbox-strict-fields
  ghc-prof-options:    -Wall -O2 -fno-warn-unused-do-bind -funbox-strict-fields -prof -auto-all

executable taggy
  main-is:             taggy.hs
  hs-source-dirs:      example
  build-depends:       base >=4.5 && <5,
                       text >= 1,
                       attoparsec >=0.12,
                       taggy
  ghc-options:         -Wall -O2 -fno-warn-unused-do-bind
  ghc-prof-options:    -Wall -prof -auto-all -O2 -fno-warn-unused-do-bind -rtsopts "-with-rtsopts=-sstderr -p"
  default-language:    Haskell2010

benchmark taggytagsoup
  main-is:           vs-tagsoup.hs
  hs-source-dirs:    bench
  ghc-options:       -O2 -funbox-strict-fields
  type:              exitcode-stdio-1.0
  build-depends:     base >= 4 && < 5,
                     text >=1,
                     attoparsec >=0.12,
                     taggy >= 0.1,
                     tagsoup,
                     criterion,
                     vector
  default-language:  Haskell2010

test-suite unit
  type:
      exitcode-stdio-1.0
  ghc-options:
      -Wall -O -fno-warn-unused-do-bind
  hs-source-dirs:
      src, tests/unit
  main-is:
      Spec.hs
  build-depends:
      base    == 4.*
    , blaze-html
    , blaze-markup
    , text
    , hspec
    , hspec-attoparsec
    , vector
    , attoparsec
    , unordered-containers
  default-language:
      Haskell2010

test-suite integration
  type:
      exitcode-stdio-1.0
  ghc-options:
      -Wall -O -fno-warn-unused-do-bind
  hs-source-dirs:
      src, tests/integration
  main-is:
      Main.hs
  build-depends:
      base    == 4.*
    , blaze-html
    , blaze-markup
    , directory
    , text
    , hspec >= 1.11
    , hspec-attoparsec
    , vector
    , attoparsec
    , unordered-containers
  other-modules:
    Paths_taggy
  default-language:
      Haskell2010
