build-type:	Simple
cabal-version:	>= 1.8

name:		simple-pipe
version:	0.0.0.0
stability:	Experimental
author:		Yoshikuni Jujo <PAF01143@nifty.ne.jp>
maintainer:	Yoshikuni Jujo <PAF01143@nifty.ne.jp>
homepage:	https://github.com/YoshikuniJujo/simple-pipe/wiki

license:	BSD3
license-file:	LICENSE

category:	Data
synopsis:	simple pipeline library like conduit
description:
    .
    examples/upperFile.hs
    .
    * read file (sample.txt)
    .
    * take 3 lines
    .
    * to upper all lines
    .
    * write to stdout
    .
    extensions
    .
    .
    * PackageImports
    .
    > import Data.Pipe
    > import Data.Char
    > import System.IO
    > import "monads-tf" Control.Monad.Trans
    >
    > main :: IO ()
    > main = do
    > 	_ <- runPipe $ readFileP "sample.txt"
    >		=$= takeP 3
    >		=$= convert (map toUpper)
    >		=$= writeString
    > 	return ()
    >
    > readFileP :: FilePath -> Pipe () String IO ()
    > readFileP fp = bracket (openFile fp ReadMode) hClose hRead
    >
    > hRead :: Handle -> Pipe () String IO ()
    > hRead h = do
    > 	eof <- lift $ hIsEOF h
    > 	if eof then return () else do
    > 		l <- lift $ hGetLine h
    > 		yield l
    > 		hRead h
    >
    > writeString :: Pipe String () IO ()
    > writeString = do
    > 	ms <- await
    > 	case ms of
    > 		Just s -> lift (putStrLn s) >> writeString
    > 		_ -> return ()
    >
    > convert :: Monad m => (a -> b) -> Pipe a b m ()
    > convert f = do
    > 	mx <- await
    > 	case mx of
    > 		Just x -> yield (f x) >> convert f
    > 		_ -> return ()
    >
    > takeP :: Monad m => Int -> Pipe a a m ()
    > takeP 0 = return ()
    > takeP n = do
    >	mx <- await
    >	case mx of
    >		Just x -> yield x >> takeP (n - 1)
    >		_ -> return ()
    .

extra-source-files:
    examples/upperFile.hs

source-repository	head
    type:	git
    location:	git://github.com/YoshikuniJujo/forest.git

source-repository	this
    type:	git
    location:	git://github.com/YoshikuniJujo/forest.git
    tag:	simple-pipe-0.0.0.0

library
    hs-source-dirs:	src
    exposed-modules:	Data.Pipe
    build-depends:
        base == 4.*, monad-control == 0.3.*, lifted-base == 0.2.*,
        monads-tf == 0.1.*
    ghc-options:	-Wall


package-hashes:
    MD5:a21a175d4391d412a8f03dfa437290a2
    SHA1:58ad584710604645fd47376ed71663afbbcc4ac7
    SHA256:94ce92cbf4746608281503aee7b3dfe450c43edf3d8aebb2e828f02fd847cf75
    SHA512:88df90898fa137bf943bc56afa9701362801c75bf27849d7526b94e88c2f5f08177d6908478f9dbc6e43eaa9dad819bb7d9aac57aa0758e171429b1a9b13fb25
    Skein512_512:d004de512d4b96dbc04c02d2f1565af613e98f92c20d19567b987f4207e5895380de1f14e0f39c9e274de7c5fa58157e5b0a0fd318580885624d8aa0c59c314c

package-locations:
    https://hackage.haskell.org/package/simple-pipe-0.0.0.0/simple-pipe-0.0.0.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/simple-pipe-0.0.0.0.tar.gz

