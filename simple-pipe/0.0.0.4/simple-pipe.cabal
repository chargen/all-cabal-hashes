-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:61306df0b5809f5ba7a224cba6cdefe5
    SHA1:d8cd85d384e345c8b98554a3c2608f525fbca457
    SHA256:dcd3e0be7d44a2f29c9b00039d89d5ba5fe92653b4454f3d625add20bebf8d39
    SHA512:1c5b7dafdb12c5858e800ee8f8b37daee5966a209d79f51a9f363535352fc2d4a96905c6860845a89db48ffaafff4a49745b36ba4e5b61a18d43fafba61c111c
    Skein512_512:26e1aed4ab7ae2db9fca750d9c8b539748682b31ef8c4c7680871fd2d44c8bf6df33199be05f7c3a48959e3e1b69cc2d384bd7d045d8740a0aa0deebe753c905

x-package-locations:
    https://hackage.haskell.org/package/simple-pipe-0.0.0.4/simple-pipe-0.0.0.4.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/simple-pipe-0.0.0.4.tar.gz

x-package-size: 3379
-- END Added by all-cabal-hashes-tool

build-type:	Simple
cabal-version:	>= 1.8

name:		simple-pipe
version:	0.0.0.4
stability:	Experimental
author:		Yoshikuni Jujo <PAF01143@nifty.ne.jp>
maintainer:	Yoshikuni Jujo <PAF01143@nifty.ne.jp>
homepage:	https://github.com/YoshikuniJujo/simple-pipe/wiki

license:	BSD3
license-file:	LICENSE

category:	Data
synopsis:	simple pipeline library like conduit
description:
    .
    examples/upperFile.hs
    .
    * read file (sample.txt)
    .
    * take 3 lines
    .
    * to upper all lines
    .
    * write to stdout
    .
    extensions
    .
    .
    * PackageImports
    .
    > import Data.Pipe
    > import Data.Char
    > import System.IO
    > import "monads-tf" Control.Monad.Trans
    >
    > main :: IO ()
    > main = do
    > 	_ <- runPipe $ readFileP "sample.txt"
    >		=$= takeP 3
    >		=$= convert (map toUpper)
    >		=$= writeString
    > 	return ()
    >
    > readFileP :: FilePath -> Pipe () String IO ()
    > readFileP fp = bracket (openFile fp ReadMode) hClose hRead
    >
    > hRead :: Handle -> Pipe () String IO ()
    > hRead h = do
    > 	eof <- lift $ hIsEOF h
    > 	if eof then return () else do
    > 		l <- lift $ hGetLine h
    > 		yield l
    > 		hRead h
    >
    > writeString :: Pipe String () IO ()
    > writeString = do
    > 	ms <- await
    > 	case ms of
    > 		Just s -> lift (putStrLn s) >> writeString
    > 		_ -> return ()
    >
    > convert :: Monad m => (a -> b) -> Pipe a b m ()
    > convert f = do
    > 	mx <- await
    > 	case mx of
    > 		Just x -> yield (f x) >> convert f
    > 		_ -> return ()
    >
    > takeP :: Monad m => Int -> Pipe a a m ()
    > takeP 0 = return ()
    > takeP n = do
    >	mx <- await
    >	case mx of
    >		Just x -> yield x >> takeP (n - 1)
    >		_ -> return ()
    .

extra-source-files:
    examples/upperFile.hs

source-repository	head
    type:	git
    location:	git://github.com/YoshikuniJujo/forest.git

source-repository	this
    type:	git
    location:	git://github.com/YoshikuniJujo/forest.git
    tag:	simple-pipe-0.0.0.4

library
    hs-source-dirs:	src
    exposed-modules:	Data.Pipe, Data.Pipe.List
    build-depends:
        base == 4.*, monad-control == 0.3.*, lifted-base == 0.2.*,
        monads-tf == 0.1.*
    ghc-options:	-Wall
