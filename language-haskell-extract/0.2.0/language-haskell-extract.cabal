-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:0b9b2bd08b74f853e36c98c00cdf9442
    SHA1:0acef91ca7264d37743d681e77983f85d5570a5a
    SHA256:1790a0311a6ed4da6d25c5a9183b176ba43b1c29bbd54bff04ec401c9ea168e0
    SHA512:c5e9d7d08f0e7c77a3dc10a51a1faadddfe5093398dfe3b0f6205a281f629b3d2021bfa11c8921674686341c294e1467e3387a9f695d5046b164d4edac16efa0
    Skein512_512:c0578705a8ab5bc9bf63122877d029a826dc04e9358ce3cf71a149ef1d3f9576db838e784f3026828963afb919e2291a578769e69d00770b9dd3d007e98fd4e1

package-locations:
    https://hackage.haskell.org/package/language-haskell-extract-0.2.0/language-haskell-extract-0.2.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/language-haskell-extract-0.2.0.tar.gz

package-size: 2980
-- END Added by all-cabal-hashes-tool

name: language-haskell-extract
version: 0.2.0
cabal-version: >=1.6
build-type: Simple
license: BSD3
license-file: "BSD3.txt"
maintainer: Oscar Finnsson

stability: stable
homepage: http://github.com/finnsson/template-helper
package-url:
bug-reports:
synopsis: Module to automatically extract functions from the local code.
description:
   @language-haskell-extract@ contains some useful helper functions on top of Template Haskell.
   .
   @functionExtractor@ extracts all functions after a regexp-pattern.
   .
   > foo = "test"
   > boo = "testing"
   > bar = $(functionExtractor "oo$")
   .  
   will automagically extract the functions ending with @oo@ such as
   . 
   > bar = [("foo",foo), ("boo",boo)]
   .
   This can be useful if you wish to extract all functions beginning with test (for a test-framework)
   or all functions beginning with wc (for a web service).
   .
   @functionExtractorMap@ works like @functionsExtractor@ but applies a function over all function-pairs.
   .
   This functions is useful if the common return type of the functions is a type class.
   .
   Example:
   .
   > secondTypeclassTest =
   >   do let expected = ["45", "88.8", "\"hej\""]
   >          actual = $(functionExtractorMap "^tc" [|\n f -> show f|] )
   >      expected @=? actual
   > 
   > tcInt :: Integer
   > tcInt = 45
   > 
   > tcDouble :: Double
   > tcDouble = 88.8
   > 
   > tcString :: String
   > tcString = "hej"
category: Template Haskell
author: Oscar Finnsson & Emil Nordling
 
library
  hs-source-dirs: src
  exposed-modules: Language.Haskell.Extract
  build-depends: base >= 4 && < 5, haskell98, regex-posix, haskell-src-exts, template-haskell

source-repository head
  type:     git
  location: https://github.com/finnsson/language-haskell-extract/
