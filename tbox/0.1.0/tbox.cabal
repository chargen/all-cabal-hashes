-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:d96c45cb8a23baea6189d394374af229
    SHA1:189dad7338aefe71ac3eb171767933722a417146
    SHA256:7e876bde1781d42bb008038a64ce7daa8bf4e3297dcbfff11d2efb1c5b254c63
    SHA512:4e66468f3779e2c297f8f912e19bd03ea06351e96deb3b62096730c059c2d81dd82de2038700fbbcb65097901f3f28174c3d61f26339c9ee3211164363121eb5
    Skein512_512:0cb852b196e217841a2336f435c0fc891c18e67e4af5dd512daa3fa7d9937a9004642f2f998ec3fb55673b09a6653acae36a6385267bc9a8e9920e930392c14d

package-locations:
    https://hackage.haskell.org/package/tbox-0.1.0/tbox-0.1.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/tbox-0.1.0.tar.gz

package-size: 17463
-- END Added by all-cabal-hashes-tool

Name:           tbox
Synopsis:       Transactional variables and data structures with IO hooks
Description:
    This package provides STM data structures with IO hooks. 
    The basic building blocks are instances of class 'TBox'. Such an
    instance is an STM variable that might contain a value of 
    some type 'a'. In contrast to a plain 'TVar (Maybe a)', a 
    'TBox' has IO hooks that are executed transparently on writes and reads.
        The IO hooks of the 'AdvSTM' monad extend the atomicity of STM transactions
    to the on-commit IO actions, which makes it particularly suitable for 
    implementing a persistent and thread-safe storage.
    .
    See module Control.Concurrent.TFile for a (simple) instance of a 'TBox'
    that serializes its content to a file via 'Data.Binary'.
    .
    New in this release is the implementation of a skip list in module
    Control.Concurrent.TBox.TSkipList. A skip list is a probabilistic data
    structure that provides expected run time of /O(log n)/ for 
    dictionary operations (insert, lookup, filter, delete, update) similar to 
    a balanced tree. 
    The main advantage of a skip list is that it does not need rebalancing,
    which could cause lots of contention among transactions.
    The 'TFile' skip list instance tries to reconstruct its content from the
    'TFile'-directory. See module Control.Concurrent.TFile.TSkipList for a
    usage example.
    .
    Feedback is highly appreciated!

Author:         Peter Robinson 2009, 2010
Maintainer:     Peter Robinson <thaldyron@gmail.com>
License:        LGPL
License-file:   LICENSE
Version:        0.1.0
Category:       Data, Concurrency
Stability:      experimental
Homepage:       http://darcs.monoid.at/tbox

build-type:     Simple                        
cabal-version: >= 1.2.3
library
    ghc-options:        -Wall -fno-ignore-asserts -fwarn-incomplete-patterns

    exposed-modules:    Control.Concurrent.TBox
                        Control.Concurrent.TBox.Internal.Class
                        Control.Concurrent.TBox.Internal.Operations
--                        Control.Concurrent.TBox.TList
--                        Control.Concurrent.TBox.THashtable
                        Control.Concurrent.TBox.TSkipList
                        Control.Concurrent.TFile
--                        Control.Concurrent.TFile.TList
--                        Control.Concurrent.TFile.THashtable
                        Control.Concurrent.TFile.TSkipList

--    other-modules:      test.hs

    build-depends:      base >= 4 && < 5, 
                        stm-io-hooks >= 0.6.0 && < 0.7, 
                        mtl >= 1.1.0.2 && < 1.2,
                        binary >= 0.5 && < 0.6,
                        filepath >= 1.1 && < 1.2,
                        directory >= 1.0.0.3 && < 1.1,
                        cautious-file >= 0.1.5 && < 0.2,
                        array >= 0.2 && < 0.4,
                        containers >= 0.2.0.1 && < 0.4,
                        random >= 1.0.0.1 && < 1.1,
                        monad-loops >= 0.3.0.2 && < 0.4.0.0,
                        IfElse >= 0.85 && < 1,
                        safe-failure >= 0.4.0 && < 0.5

    extensions:         MultiParamTypeClasses,
--                        RankNTypes, 
--                        FunctionalDependencies, 
                        FlexibleContexts,
                        FlexibleInstances,
--                        UndecidableInstances,
                        DeriveDataTypeable,
                        ExistentialQuantification,
                        TypeSynonymInstances,
                        BangPatterns,
                        ScopedTypeVariables
--                        TypeSynonymInstances
                      

