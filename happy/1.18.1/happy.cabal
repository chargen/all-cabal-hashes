-- BEGIN Added by all-cabal-hashes-tool
x-package-hashes:
    MD5:31de24740ea553a7aacfefcf0b95d223
    SHA1:5be91bb24a976c8bda67167533e2e9954658527e
    SHA256:7f9617e96076f6abe9a3b9949d9543fee5c97d45eac60d063da43bb0b6257f22
    SHA512:3b31ba7c6c75a97b1679bf6fa237c807f3bb6a8d2d64210f5d220bf71a257376c16c8abfc97a807ae22fed8bd5f3fc73a4d1a29ab99797c0e9bc2f3cdabc1f9c
    Skein512_512:c2b3daa7a2ec65632b48e7b90be6f62294399b3e3d3bf1257879dd4654d221dadb86679a202b0d2b8c02ed808108ecc4b07b80c61f7e390ce996c9fb4a589d97

x-package-locations:
    https://hackage.haskell.org/package/happy-1.18.1/happy-1.18.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/happy-1.18.1.tar.gz

x-package-size: 150734
-- END Added by all-cabal-hashes-tool

name: happy
version: 1.18.1
x-revision: 2
license: BSD3
license-file: LICENSE
copyright: (c) Andy Gill, Simon Marlow
author: Andy Gill and Simon Marlow
maintainer: Simon Marlow <simonmar@microsoft.com>
stability: stable
homepage: http://www.haskell.org/happy/
synopsis: Happy is a parser generator for Haskell
category: Development
cabal-version: >= 1.2
build-type: Custom
extra-source-files:
	ANNOUNCE
	CHANGES
	Makefile
	README
	TODO
	doc/Makefile
	doc/aclocal.m4
	doc/config.mk.in
	doc/configure.ac
	doc/docbook-xml.mk
	doc/fptools.css
	doc/happy.1.in
	doc/happy.xml
	examples/glr/nlp/Main.lhs
	examples/glr/nlp/Makefile
	examples/glr/nlp/README
	examples/glr/nlp/English.y
	examples/glr/nlp/Hugs.lhs
	examples/glr/Makefile
	examples/glr/Makefile.defs
	examples/glr/expr-eval/Main.lhs
	examples/glr/expr-eval/Makefile
	examples/glr/expr-eval/Expr.y
	examples/glr/expr-eval/README
	examples/glr/expr-eval/Hugs.lhs
	examples/glr/expr-tree/Main.lhs
	examples/glr/expr-tree/Makefile
	examples/glr/expr-tree/Expr.y
	examples/glr/expr-tree/README
	examples/glr/expr-tree/Tree.lhs
	examples/glr/expr-tree/Hugs.lhs
	examples/glr/highly-ambiguous/Main.lhs
	examples/glr/highly-ambiguous/Makefile
	examples/glr/highly-ambiguous/Expr.y
	examples/glr/highly-ambiguous/README
	examples/glr/highly-ambiguous/Hugs.lhs
	examples/glr/hidden-leftrec/Main.lhs
	examples/glr/hidden-leftrec/Makefile
	examples/glr/hidden-leftrec/Expr.y
	examples/glr/hidden-leftrec/README
	examples/glr/hidden-leftrec/Hugs.lhs
	examples/glr/expr-monad/Main.lhs
	examples/glr/expr-monad/Makefile
	examples/glr/expr-monad/Expr.y
	examples/glr/expr-monad/README
	examples/glr/expr-monad/Hugs.lhs
	examples/glr/bio-eg/Main.lhs
	examples/glr/bio-eg/Makefile
	examples/glr/bio-eg/Bio.y
	examples/glr/bio-eg/README
	examples/glr/bio-eg/1-1200.dna
	examples/glr/bio-eg/1-600.dna
	examples/glr/common/DV_lhs
	examples/glr/common/DaVinciTypes.hs
	examples/glr/packing/Main.lhs
	examples/glr/packing/Makefile
	examples/glr/packing/Expr.y
	examples/glr/packing/README
	examples/glr/packing/Hugs.lhs
	examples/PgnParser.ly
	examples/MonadTest.ly
	examples/igloo/ParserM.hs
	examples/igloo/Makefile
	examples/igloo/Parser.y
	examples/igloo/Foo.hs
	examples/igloo/README
	examples/igloo/Lexer.hs
	examples/igloo/Lexer.x
	examples/igloo/Parser.hs
	examples/README
	examples/Calc.ly
	examples/DavesExample.ly
	examples/ErrorTest.ly
	examples/ErlParser.ly
	examples/SimonsExample.ly
	examples/LexerTest.ly
	happy.spec
	src/ARRAY-NOTES
	templates/GLR_Base.lhs
	templates/GenericTemplate.hs
	templates/GLR_Lib.lhs
	tests/error001.y
	tests/error001.stdout
	tests/error001.stderr
	tests/monad001.y
	tests/Makefile
	tests/TestMulti.ly
	tests/Partial.ly
	tests/precedence001.ly
	tests/TestPrecedence.ly
	tests/bogus-token.y
	tests/monad002.ly
	tests/bug001.ly
	tests/bug002.y
	tests/Test.ly
	tests/precedence002.y
	tests/test_rules.y

flag small_base
  description: Choose the new smaller, split-up base package.

executable happy
--  executable: happy
  hs-source-dirs: src
  main-is: Main.lhs

  if flag(small_base)
    build-depends: base >= 2.1 && < 4.3, array, containers
  else
    build-depends: base >= 1.0 && < 2.1

  build-depends: haskell98 >= 1.0, mtl >= 1.0

  extensions: CPP
  ghc-options: -fglasgow-exts -W
  --TODO: replace this ^^^ with if impl(ghc) { extensions: ... }
  other-modules:
        AbsSyn
        First
        GenUtils
        Grammar
        Info
        LALR
        Lexer
        Main
        ParseMonad
        Parser
        ProduceCode
        ProduceGLRCode
        Set
        NameSet
        Target
        AttrGrammar
        AttrGrammarParser
        ParamRules
