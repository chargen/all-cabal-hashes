-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:673f34a1d83b351fff0df577cbafa571
    SHA1:95a376bd751908d221e9fe04f3e1369ed197b688
    SHA256:659520ed52e819ae7582c041ec6009c6e08adbdf1add873469250d6a06ad9bd9
    SHA512:c537201288625bfbadf56a3c0edf2fed9a455b3e843318950f78a688bc38c904f75c5e25b80ff981ebe0d049ab123339645e42ba86ad9269cf28d86510700d71
    Skein512_512:dff4b0ca4bfcba04dd9688fa5d7f382ea2bcaf129af3212cc15de255417e8d6a185be87128bfc8e9e5aeafde5ec31cdce5d432ee00ec3070eccf1e992feb8cc9

package-locations:
    https://hackage.haskell.org/package/OpenGLRaw-1.0.1.0/OpenGLRaw-1.0.1.0.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/OpenGLRaw-1.0.1.0.tar.gz

package-size: 50413
-- END Added by all-cabal-hashes-tool

name: OpenGLRaw
version: 1.0.1.0
license: BSD3
license-file: LICENSE
maintainer: Sven Panne <sven.panne@aedion.de>
bug-reports: mailto:hopengl@haskell.org
homepage: http://www.haskell.org/HOpenGL/
category: Graphics
synopsis: A raw binding for the OpenGL graphics system
description:
   OpenGLRaw is a raw Haskell binding for the OpenGL 3.1 graphics system and
   lots of OpenGL extensions. It is basically a 1:1 mapping of OpenGL's C API,
   intended as a basis for a nicer interface. OpenGLRaw offers access to all
   necessary functions, tokens and types plus a general facility for loading
   extension entries. The module hierarchy closely mirrors the naming structure
   of the OpenGL extensions, making it easy to find the right module to import.
   All API entries are loaded dynamically, so no special C header files are
   needed for building this package. If an API entry is not found at runtime, a
   userError is thrown.
   .
   OpenGL is the industry's most widely used and supported 2D and 3D graphics
   application programming interface (API), incorporating a broad set of
   rendering, texture mapping, special effects, and other powerful visualization
   functions. For more information about OpenGL and its various extensions,
   please see <http://www.opengl.org/>
   and <http://www.opengl.org/registry/>.
build-type: Simple
cabal-version:  >= 1.2
extra-source-files:
   include/HsOpenGLRaw.h

flag UseNativeWindowsLibraries
   description:
      When compiling under Windows, use the native libraries instead of e.g. the
      ones coming with Cygwin.

flag UseGlXGetProcAddress
   description:
      Use glXGetProcAddress instead of dlsym on non-Windows/-Darwin platforms.

library
   exposed-modules:
      Graphics.Rendering.OpenGL.Raw,
      Graphics.Rendering.OpenGL.Raw.ARB,
      Graphics.Rendering.OpenGL.Raw.ARB.Compatibility,
      Graphics.Rendering.OpenGL.Raw.ARB.FragmentProgram,
      Graphics.Rendering.OpenGL.Raw.ARB.GeometryShader4,
      Graphics.Rendering.OpenGL.Raw.ARB.InstancedArrays,
      Graphics.Rendering.OpenGL.Raw.ARB.MatrixPalette,
      Graphics.Rendering.OpenGL.Raw.ARB.ShadowAmbient,
      Graphics.Rendering.OpenGL.Raw.ARB.VertexBlend,
      Graphics.Rendering.OpenGL.Raw.ARB.VertexProgram,
      Graphics.Rendering.OpenGL.Raw.Core31,
      Graphics.Rendering.OpenGL.Raw.EXT,
      Graphics.Rendering.OpenGL.Raw.EXT.Abgr,
      Graphics.Rendering.OpenGL.Raw.EXT.BindableUniform,
      Graphics.Rendering.OpenGL.Raw.EXT.ClipVolumeHint,
      Graphics.Rendering.OpenGL.Raw.EXT.Cmyka,
      Graphics.Rendering.OpenGL.Raw.EXT.ColorSubtable,
      Graphics.Rendering.OpenGL.Raw.EXT.CompiledVertexArray,
      Graphics.Rendering.OpenGL.Raw.EXT.CoordinateFrame,
      Graphics.Rendering.OpenGL.Raw.EXT.CullVertex,
      Graphics.Rendering.OpenGL.Raw.EXT.DepthBoundsTest,
      Graphics.Rendering.OpenGL.Raw.EXT.DirectStateAccess,
      Graphics.Rendering.OpenGL.Raw.EXT.FogCoord,
      Graphics.Rendering.OpenGL.Raw.EXT.FourTwoTwoPixels,
      Graphics.Rendering.OpenGL.Raw.EXT.FragmentLighting,
      Graphics.Rendering.OpenGL.Raw.EXT.FramebufferObject,
      Graphics.Rendering.OpenGL.Raw.EXT.FramebufferSRGB,
      Graphics.Rendering.OpenGL.Raw.EXT.GeometryShader4,
      Graphics.Rendering.OpenGL.Raw.EXT.GpuProgramParameters,
      Graphics.Rendering.OpenGL.Raw.EXT.IndexArrayFormats,
      Graphics.Rendering.OpenGL.Raw.EXT.IndexFunc,
      Graphics.Rendering.OpenGL.Raw.EXT.IndexMaterial,
      Graphics.Rendering.OpenGL.Raw.EXT.LightTexture,
      Graphics.Rendering.OpenGL.Raw.EXT.Multisample,
      Graphics.Rendering.OpenGL.Raw.EXT.PackedFloat,
      Graphics.Rendering.OpenGL.Raw.EXT.PalettedTexture,
      Graphics.Rendering.OpenGL.Raw.EXT.PerturbNormal,
      Graphics.Rendering.OpenGL.Raw.EXT.PixelTransform,
      Graphics.Rendering.OpenGL.Raw.EXT.PointParameters,
      Graphics.Rendering.OpenGL.Raw.EXT.PolygonOffset,
      Graphics.Rendering.OpenGL.Raw.EXT.ProvokingVertex,
      Graphics.Rendering.OpenGL.Raw.EXT.RescaleNormal,
      Graphics.Rendering.OpenGL.Raw.EXT.SecondaryColor,
      Graphics.Rendering.OpenGL.Raw.EXT.SeparateSpecularColor,
      Graphics.Rendering.OpenGL.Raw.EXT.SharedTexturePalette,
      Graphics.Rendering.OpenGL.Raw.EXT.StencilClearTag,
      Graphics.Rendering.OpenGL.Raw.EXT.StencilTwoSide,
      Graphics.Rendering.OpenGL.Raw.EXT.Texture,
      Graphics.Rendering.OpenGL.Raw.EXT.TextureCompressionDxt1,
      Graphics.Rendering.OpenGL.Raw.EXT.TextureCompressionLatc,
      Graphics.Rendering.OpenGL.Raw.EXT.TextureCompressionS3tc,
      Graphics.Rendering.OpenGL.Raw.EXT.TextureEnvAdd,
      Graphics.Rendering.OpenGL.Raw.EXT.TextureEnvCombine,
      Graphics.Rendering.OpenGL.Raw.EXT.TextureEnvDot3,
      Graphics.Rendering.OpenGL.Raw.EXT.TextureFilterAnisotropic,
      Graphics.Rendering.OpenGL.Raw.EXT.TextureInteger,
      Graphics.Rendering.OpenGL.Raw.EXT.TextureLodBias,
      Graphics.Rendering.OpenGL.Raw.EXT.TextureMirrorClamp,
      Graphics.Rendering.OpenGL.Raw.EXT.TextureObject,
      Graphics.Rendering.OpenGL.Raw.EXT.TextureSRGB,
      Graphics.Rendering.OpenGL.Raw.EXT.TextureSwizzle,
      Graphics.Rendering.OpenGL.Raw.EXT.TimerQuery,
      Graphics.Rendering.OpenGL.Raw.EXT.VertexArray,
      Graphics.Rendering.OpenGL.Raw.EXT.VertexShader,
      Graphics.Rendering.OpenGL.Raw.EXT.VertexWeighting,
      Graphics.Rendering.OpenGL.Raw.GetProcAddress,
      Graphics.Rendering.OpenGL.Raw.NV,
      Graphics.Rendering.OpenGL.Raw.NV.CopyDepthToColor,
      Graphics.Rendering.OpenGL.Raw.NV.DepthClamp,
      Graphics.Rendering.OpenGL.Raw.NV.Fence,
      Graphics.Rendering.OpenGL.Raw.NV.FogDistance,
      Graphics.Rendering.OpenGL.Raw.NV.LightMaxExponent,
      Graphics.Rendering.OpenGL.Raw.NV.MultisampleFilterHint,
      Graphics.Rendering.OpenGL.Raw.NV.OcclusionQuery,
      Graphics.Rendering.OpenGL.Raw.NV.PrimitiveRestart,
      Graphics.Rendering.OpenGL.Raw.NV.RegisterCombiners,
      Graphics.Rendering.OpenGL.Raw.NV.RegisterCombiners2,
      Graphics.Rendering.OpenGL.Raw.NV.TexgenEmboss,
      Graphics.Rendering.OpenGL.Raw.NV.TextureCompressionVtc,
      Graphics.Rendering.OpenGL.Raw.NV.TextureEnvCombine4,
      Graphics.Rendering.OpenGL.Raw.NV.TextureShader,
      Graphics.Rendering.OpenGL.Raw.NV.TextureShader2,
      Graphics.Rendering.OpenGL.Raw.NV.VertexArrayRange,
      Graphics.Rendering.OpenGL.Raw.NV.VertexArrayRange2
   other-modules:
      Graphics.Rendering.OpenGL.Raw.ARB.Compatibility.Functions,
      Graphics.Rendering.OpenGL.Raw.ARB.Compatibility.Tokens,
      Graphics.Rendering.OpenGL.Raw.Core31.Functions,
      Graphics.Rendering.OpenGL.Raw.Core31.Tokens,
      Graphics.Rendering.OpenGL.Raw.Core31.Types,
      Graphics.Rendering.OpenGL.Raw.Extensions
   c-sources:
      cbits/HsOpenGLRaw.c
   hs-Source-Dirs: src
   include-dirs: include
   build-depends: base >= 3 && < 5
   ghc-options: -Wall -fno-warn-duplicate-exports
   if os(windows) && flag(UseNativeWindowsLibraries)
      cpp-options: "-DCALLCONV=stdcall"
      extra-libraries: opengl32
      cc-options: "-DUSE_WGLGETPROCADDRESS"
   else
      cpp-options: "-DCALLCONV=ccall"
      extra-libraries: GL
      if os(darwin)
         cc-options: "-DUSE_NSADDRESSOFSYMBOL"
      else
         if flag(UseGlXGetProcAddress)
            cc-options: "-DUSE_GLXGETPROCADDRESS"
         else
            cc-options: "-DUSE_DLSYM"
