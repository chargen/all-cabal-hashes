Name:           vector
Version:        0.10
x-revision: 1
License:        BSD3
License-File:   LICENSE
Author:         Roman Leshchinskiy <rl@cse.unsw.edu.au>
Maintainer:     Roman Leshchinskiy <rl@cse.unsw.edu.au>
Copyright:      (c) Roman Leshchinskiy 2008-2012
Homepage:       http://code.haskell.org/vector
Bug-Reports:    http://trac.haskell.org/vector
Category:       Data, Data Structures
Synopsis:       Efficient Arrays
Description:
        .
        An efficient implementation of Int-indexed arrays (both mutable
        and immutable), with a powerful loop optimisation framework .
        .
        It is structured as follows:
        .
        ["Data.Vector"] Boxed vectors of arbitrary types.
        .
        ["Data.Vector.Unboxed"] Unboxed vectors with an adaptive
        representation based on data type families.
        .
        ["Data.Vector.Storable"] Unboxed vectors of 'Storable' types.
        .
        ["Data.Vector.Primitive"] Unboxed vectors of primitive types as
        defined by the @primitive@ package. "Data.Vector.Unboxed" is more
        flexible at no performance cost.
        .
        ["Data.Vector.Generic"] Generic interface to the vector types.
        .
        There is also a (draft) tutorial on common uses of vector.
        .
        * <http://haskell.org/haskellwiki/Numeric_Haskell:_A_Vector_Tutorial>
        .
        Please use the project trac to submit bug reports and feature
        requests.
        .
        * <http://trac.haskell.org/vector>
        .
        Changes in version 0.10
        .
	* @NFData@ instances
	.
	* More efficient block fills
	.
	* Safe Haskell support removed
	.

Cabal-Version:  >= 1.2.3
Build-Type:     Simple

Extra-Source-Files:
      tests/vector-tests.cabal
      tests/LICENSE
      tests/Setup.hs
      tests/Main.hs
      tests/Boilerplater.hs
      tests/Utilities.hs
      tests/Tests/Move.hs
      tests/Tests/Stream.hs
      tests/Tests/Vector.hs
      benchmarks/vector-benchmarks.cabal
      benchmarks/LICENSE
      benchmarks/Setup.hs
      benchmarks/Main.hs
      benchmarks/Algo/AwShCC.hs
      benchmarks/Algo/HybCC.hs
      benchmarks/Algo/Leaffix.hs
      benchmarks/Algo/ListRank.hs
      benchmarks/Algo/Quickhull.hs
      benchmarks/Algo/Rootfix.hs
      benchmarks/Algo/Spectral.hs
      benchmarks/Algo/Tridiag.hs
      benchmarks/TestData/Graph.hs
      benchmarks/TestData/ParenTree.hs
      benchmarks/TestData/Random.hs
      internal/GenUnboxTuple.hs
      internal/unbox-tuple-instances

Flag BoundsChecks
  Description: Enable bounds checking
  Default: True

Flag UnsafeChecks
  Description: Enable bounds checking in unsafe operations at the cost of a
               significant performance penalty
  Default: False

Flag InternalChecks
  Description: Enable internal consistency checks at the cost of a
               significant performance penalty
  Default: False


Library
  Extensions: CPP, DeriveDataTypeable
  Exposed-Modules:
        Data.Vector.Internal.Check

        Data.Vector.Fusion.Util
        Data.Vector.Fusion.Stream.Size
        Data.Vector.Fusion.Stream.Monadic
        Data.Vector.Fusion.Stream

        Data.Vector.Generic.Mutable
        Data.Vector.Generic.Base
        Data.Vector.Generic.New
        Data.Vector.Generic

        Data.Vector.Primitive.Mutable
        Data.Vector.Primitive

        Data.Vector.Storable.Internal
        Data.Vector.Storable.Mutable
        Data.Vector.Storable

        Data.Vector.Unboxed.Base
        Data.Vector.Unboxed.Mutable
        Data.Vector.Unboxed

        Data.Vector.Mutable
        Data.Vector

  Include-Dirs:
        include, internal

  Install-Includes:
        vector.h

  Build-Depends: base >= 4 && < 4.7
               , primitive >= 0.5 && < 0.6
               , ghc-prim
               , deepseq >= 1.1 && < 1.4

  if impl(ghc<6.13)
    Ghc-Options: -finline-if-enough-args -fno-method-sharing
  
  Ghc-Options: -O2

  if flag(BoundsChecks)
    cpp-options: -DVECTOR_BOUNDS_CHECKS

  if flag(UnsafeChecks)
    cpp-options: -DVECTOR_UNSAFE_CHECKS

  if flag(InternalChecks)
    cpp-options: -DVECTOR_INTERNAL_CHECKS



package-hashes:
    MD5:83c50aaf516821a066984dfa1464da53
    SHA1:7b794a860d2550b8469d2b73eaa3c0203bc51e93
    SHA256:2fb26ce7bb88e0f2baf9152c65ff25971e9e6068c24dc5b5e4cf6c7e5ed39053
    SHA512:9a4f16fdae99514afe416fa9377df692237cd8032d03fa62296b1c8021c777cc3b3a9c94ba3c4eacaafc7b2609099ad2919cfc76017e2281a0baa486edb59a0e
    Skein512_512:bb154f6c788450ff16751f5ac625d28e3e4129b07984119e28ab05e6dba9a195e5aba93c45355bb5e32bb45457b4ad95f6d6f27b5fd9442b4d03363a4ad1c558

package-locations:
    https://hackage.haskell.org/package/vector-0.10/vector-0.10.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/vector-0.10.tar.gz

