Name:          llvm-tf
Version:       3.0.2
License:       BSD3
License-File:  LICENSE
Synopsis:      Bindings to the LLVM compiler toolkit using type families.
Description:
  High-level bindings to the LLVM compiler toolkit
  using type families instead of functional dependencies.
  .
  * New in 3.0.0.0:
    The low-level bindings have been split into the llvm-base package.
  .
  We use the same module names as the @llvm@ package,
  which makes it harder to work with both packages from GHCi.
  You may use the @-hide-package@ option.
  We may change the module names later.
  .
  A note on versioning:
  The first two version numbers match the version of LLVM.
  In order to be able to improve the Haskell API for the same version of LLVM,
  I use the first three numbers of the Cabal package version
  as the major version in the sense of the Package Versioning Policy PVP.
  That is, a bump from 3.0.0 to 3.0.1 may contain substantial API changes,
  a bump from 3.0.0.0 to 3.0.0.1 may contain API extensions,
  and a bump from 3.0.0.0.0 to 3.0.0.0.1 may contain API-preserving bugfixes.
Author:        Henning Thieleman, Bryan O'Sullivan, Lennart Augustsson
Maintainer:    Henning Thieleman <llvm@henning-thielemann.de>
Stability:     experimental
Category:      Compilers/Interpreters, Code Generation
Tested-With:   GHC == 7.4.2
Cabal-Version: >= 1.14
Build-Type:    Simple

Extra-Source-Files:
    *.md
    test/*.hs
    test/Makefile

Source-Repository head
  Type:     darcs
  Location: http://code.haskell.org/~thielema/llvm-tf/

Source-Repository this
  Tag:      3.0.2
  Type:     darcs
  Location: http://code.haskell.org/~thielema/llvm-tf/

Flag developer
  Description: operate in developer mode
  Default: False

Flag buildExamples
  Description: Build example executables
  Default:     False

Library
  Default-Language: Haskell98
  Build-Depends:
    llvm-base == 3.0.*,
    tfp >=0.7 && <0.9,
    transformers >=0.3 && <0.4,
    process >=1.1 && <1.3,
    containers >=0.4 && <0.6,
    base >=3 && <5

  Hs-Source-Dirs: src
  GHC-Options: -Wall

  If flag(developer)
    GHC-Options: -Werror

  If os(darwin)
    Ld-Options: -w
    Frameworks: vecLib
    CPP-Options: -D__MACOS__

  Exposed-Modules:
      LLVM.Core
      LLVM.ExecutionEngine
      LLVM.Util.Arithmetic
      LLVM.Util.File
      LLVM.Util.Foreign
      LLVM.Util.Loop
      LLVM.Util.Memory
      LLVM.Util.Optimize

  Other-Modules:
      LLVM.Core.CodeGen
      LLVM.Core.CodeGenMonad
      LLVM.Core.Data
      LLVM.Core.Instructions
      LLVM.Core.Type
      LLVM.Core.Util
      LLVM.Core.Vector
      LLVM.ExecutionEngine.Engine
      LLVM.ExecutionEngine.Target

Executable llvm-align
  If flag(buildExamples)
    Build-Depends:
      llvm-tf,
      tfp,
      base
  Else
    Buildable: False

  Main-Is: example/Align.hs
  Default-Language: Haskell98
  GHC-Options: -Wall

Executable llvm-arith
  If flag(buildExamples)
    Build-Depends:
      llvm-tf,
      tfp,
      base
  Else
    Buildable: False

  Main-Is: example/Arith.hs
  Default-Language: Haskell98
  GHC-Options: -Wall

Executable llvm-array
  If flag(buildExamples)
    Build-Depends:
      llvm-tf,
      tfp,
      base
  Else
    Buildable: False

  Main-Is: example/Array.hs
  Default-Language: Haskell98
  GHC-Options: -Wall

Executable llvm-brainf
  If flag(buildExamples)
    Build-Depends:
      llvm-tf,
      tfp,
      base
  Else
    Buildable: False

  Main-Is: example/BrainF.hs
  Default-Language: Haskell98
  GHC-Options: -Wall

Executable llvm-call-conv
  If flag(buildExamples)
    Build-Depends:
      llvm-tf,
      llvm-base,
      tfp,
      base
  Else
    Buildable: False

  Main-Is: example/CallConv.hs
  Default-Language: Haskell98
  GHC-Options: -Wall

Executable llvm-dot-prod
  If flag(buildExamples)
    Build-Depends:
      llvm-tf,
      tfp,
      base
  Else
    Buildable: False

  Main-Is: example/DotProd.hs
  Default-Language: Haskell98
  GHC-Options: -Wall

Executable llvm-fibonacci
  If flag(buildExamples)
    Build-Depends:
      llvm-tf,
      tfp,
      base
  Else
    Buildable: False

  Main-Is: example/Fibonacci.hs
  Default-Language: Haskell98
  GHC-Options: -Wall

Executable llvm-hello-jit
  If flag(buildExamples)
    Build-Depends:
      llvm-tf,
      tfp,
      base
  Else
    Buildable: False

  Main-Is: example/HelloJIT.hs
  Default-Language: Haskell98
  GHC-Options: -Wall

Executable llvm-list
  If flag(buildExamples)
    Build-Depends:
      llvm-tf,
      tfp,
      base
  Else
    Buildable: False

  Main-Is: example/List.hs
  Default-Language: Haskell98
  GHC-Options: -Wall

Executable llvm-struct
  If flag(buildExamples)
    Build-Depends:
      llvm-tf,
      tfp,
      base
  Else
    Buildable: False

  Main-Is: example/Struct.hs
  C-Sources: example/structCheck.c
  Default-Language: Haskell98
  GHC-Options: -Wall

Executable llvm-varargs
  If flag(buildExamples)
    Build-Depends:
      llvm-tf,
      tfp,
      base
  Else
    Buildable: False

  Main-Is: example/Varargs.hs
  Default-Language: Haskell98
  GHC-Options: -Wall

Executable llvm-vector
  If flag(buildExamples)
    Build-Depends:
      llvm-tf,
      tfp,
      base
  Else
    Buildable: False

  Hs-Source-Dirs: example
  Main-Is: Vector.hs
  Other-Modules: Convert
  Default-Language: Haskell98
  GHC-Options: -Wall


package-hashes:
    MD5:85a99e07ac645503f679f1461d4bbf6e
    SHA1:434c30590d1873b5ce751cdda63c20b969bc5e95
    SHA256:4566f010c9d46fc1ade4a005957b0472eae43c24eabed60c432fddfacbf4a1c2
    SHA512:dd90fadd457911c110a87023692f1517c6f02dc4b9e46f61ea95e7d8dd3510981f4bae9a2e3dbeed5804a482601fb91c98916f29544a9ff6ccc006cddf0b6e01
    Skein512_512:b3e766e96b08852966a8b7a54b44f9464414e56acba29b447ecc9403638996619d9c6f8d0c3c4320e48f412ea7b3fa440c9a376234c3745900af6b7c42519bfb

package-locations:
    https://hackage.haskell.org/package/llvm-tf-3.0.2/llvm-tf-3.0.2.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/llvm-tf-3.0.2.tar.gz

