-- BEGIN Added by all-cabal-hashes-tool
package-hashes:
    MD5:b41f2719d32c8418bf6d1dae07f14ca4
    SHA1:71d8c3005ef2e9c3242289ec59002738fa58bd59
    SHA256:eea5ff77f77a4395593dfc18c132016b761f6a38c7705ec8d6839c0671f8e7d3
    SHA512:8f2149f2ee0cf341522726ad1ade1024c5be8ebae6a548144f8e8f3d3b86ae3d6662accde0da2882338cf81273713965fb61293d55932f4cd786d6cb8b7a7e85
    Skein512_512:1087d1a74a7f6629c9641e1c7d5f832dcef410033979a110d91b699d75a2e1db25adb5ee57b8eb788a94631185a20b481d0fe9284dd88e519213aa9137a883d0

package-locations:
    https://hackage.haskell.org/package/fec-0.1/fec-0.1.tar.gz
    https://s3.amazonaws.com/hackage.fpcomplete.com/package/fec-0.1.tar.gz

package-size: 15603
-- END Added by all-cabal-hashes-tool

name:            fec
version:         0.1
license:         GPL
license-file:    README.txt
author:          Adam Langley <agl@imperialviolet.org>
maintainer:      Adam Langley <agl@imperialviolet.org>
description:     This code, based on zfec by Zooko, based on code by Luigi
		 Rizzo implements an erasure code, or forward error
		 correction code. The most widely known example of an erasure
		 code is the RAID-5 algorithm which makes it so that in the
		 event of the loss of any one hard drive, the stored data can
		 be completely recovered.  The algorithm in the zfec package
		 has a similar effect, but instead of recovering from the loss
		 of only a single element, it can be parameterized to choose in
		 advance the number of elements whose loss it can tolerate.
build-type:      Simple
homepage:        http://allmydata.org/source/zfec
synopsis:        Forward error correction of ByteStrings
category:        Codec
build-depends:   base, bytestring>=0.9
stability:       provisional
tested-with:     GHC == 6.8.2
exposed-modules: Codec.FEC
extensions:      ForeignFunctionInterface
hs-source-dirs:  haskell
ghc-options:     -Wall
c-sources:       zfec/fec.c
cc-options:      -std=c99
include-dirs:    zfec
extra-source-files: zfec/fec.h
